Power_Ip_MC_RGM_ResetDuringStandby ()
{
  uint8 ResetDuringStdby;
  uint32 RegValue;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.15_1;
  long unsigned int _2;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.16_3;
  long unsigned int StandbyResetStatus.17_4;
  unsigned int _5;
  uint8 _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetDuringStdby_8 = 0;
  # DEBUG ResetDuringStdby => ResetDuringStdby_8
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.15_1 = Power_Ip_pxMC_RGM;
  _2 ={v} Power_Ip_pxMC_RGM.15_1->RDSS;
  RegValue_10 = _2 & 3;
  # DEBUG RegValue => RegValue_10
  # DEBUG BEGIN_STMT
  if (RegValue_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  StandbyResetStatus = RegValue_10;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.16_3 = Power_Ip_pxMC_RGM;
  Power_Ip_pxMC_RGM.16_3->RDSS ={v} RegValue_10;

  <bb 4> :
  # DEBUG BEGIN_STMT
  StandbyResetStatus.17_4 = StandbyResetStatus;
  _5 = StandbyResetStatus.17_4 & 3;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ResetDuringStdby_13 = 1;
  # DEBUG ResetDuringStdby => ResetDuringStdby_13

  <bb 6> :
  # ResetDuringStdby_6 = PHI <ResetDuringStdby_8(4), ResetDuringStdby_13(5)>
  # DEBUG ResetDuringStdby => ResetDuringStdby_6
  # DEBUG BEGIN_STMT
  _14 = ResetDuringStdby_6;
  return _14;

}


Power_Ip_MC_RGM_GetResetRawValue ()
{
  Power_Ip_PowerModeType PreviousMode;
  uint32 ResetMask;
  uint32 Position;
  uint32 DynamicMask;
  uint32 Index;
  uint32 ActiveValue;
  uint32 RegValue;
  uint32 RawReset;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.13_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.14_6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  Power_Ip_RawResetType _58;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RawReset_31 = 0;
  # DEBUG RawReset => RawReset_31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.13_1 = Power_Ip_pxMC_RGM;
  _2 ={v} Power_Ip_pxMC_RGM.13_1->FES;
  RegValue_33 = _2 & 1611731929;
  # DEBUG RegValue => RegValue_33
  # DEBUG BEGIN_STMT
  if (RegValue_33 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FesResetStatus = RegValue_33;

  <bb 4> :
  # DEBUG BEGIN_STMT
  ResetMask_35 = 1611732953;
  # DEBUG ResetMask => ResetMask_35
  # DEBUG BEGIN_STMT
  ActiveValue_36 = FesResetStatus;
  # DEBUG ActiveValue => ActiveValue_36
  # DEBUG BEGIN_STMT
  if (ActiveValue_36 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Position_37 = 0;
  # DEBUG Position => Position_37
  # DEBUG BEGIN_STMT
  Index_38 = 0;
  # DEBUG Index => Index_38
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DynamicMask_40 = 1 << Index_20;
  # DEBUG DynamicMask => DynamicMask_40
  # DEBUG BEGIN_STMT
  _3 = DynamicMask_40 & ResetMask_35;
  if (_3 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _4 = DynamicMask_40 & ActiveValue_36;
  if (_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _5 = 1 << Position_23;
  RawReset_41 = RawReset_13 | _5;
  # DEBUG RawReset => RawReset_41

  <bb 9> :
  # RawReset_11 = PHI <RawReset_13(7), RawReset_41(8)>
  # DEBUG RawReset => RawReset_11
  # DEBUG BEGIN_STMT
  Position_42 = Position_23 + 1;
  # DEBUG Position => Position_42

  <bb 10> :
  # RawReset_12 = PHI <RawReset_13(6), RawReset_11(9)>
  # Position_22 = PHI <Position_23(6), Position_42(9)>
  # DEBUG Position => Position_22
  # DEBUG RawReset => RawReset_12
  # DEBUG BEGIN_STMT
  Index_43 = Index_20 + 1;
  # DEBUG Index => Index_43

  <bb 11> :
  # RawReset_13 = PHI <RawReset_31(5), RawReset_12(10)>
  # Index_20 = PHI <Index_38(5), Index_43(10)>
  # Position_23 = PHI <Position_37(5), Position_22(10)>
  # DEBUG Position => Position_23
  # DEBUG Index => Index_20
  # DEBUG RawReset => RawReset_13
  # DEBUG BEGIN_STMT
  if (Index_20 <= 31)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearFesResetFlags (RegValue_33);

  <bb 13> :
  # RawReset_14 = PHI <RawReset_31(4), RawReset_13(12)>
  # DEBUG RawReset => RawReset_14
  # DEBUG BEGIN_STMT
  ResetMask_44 = 1611126617;
  # DEBUG ResetMask => ResetMask_44
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.14_6 = Power_Ip_pxMC_RGM;
  _7 ={v} Power_Ip_pxMC_RGM.14_6->DES;
  RegValue_45 = _7 & 1611061081;
  # DEBUG RegValue => RegValue_45
  # DEBUG BEGIN_STMT
  if (RegValue_45 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  DesResetStatus = RegValue_45;

  <bb 15> :
  # DEBUG BEGIN_STMT
  ActiveValue_47 = DesResetStatus;
  # DEBUG ActiveValue => ActiveValue_47
  # DEBUG BEGIN_STMT
  if (ActiveValue_47 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Position_48 = 15;
  # DEBUG Position => Position_48
  # DEBUG BEGIN_STMT
  Index_49 = 0;
  # DEBUG Index => Index_49
  goto <bb 22>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  DynamicMask_51 = 1 << Index_21;
  # DEBUG DynamicMask => DynamicMask_51
  # DEBUG BEGIN_STMT
  _8 = DynamicMask_51 & ResetMask_44;
  if (_8 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _9 = DynamicMask_51 & ActiveValue_47;
  if (_9 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _10 = 1 << Position_25;
  RawReset_52 = RawReset_17 | _10;
  # DEBUG RawReset => RawReset_52

  <bb 20> :
  # RawReset_15 = PHI <RawReset_17(18), RawReset_52(19)>
  # DEBUG RawReset => RawReset_15
  # DEBUG BEGIN_STMT
  Position_53 = Position_25 + 1;
  # DEBUG Position => Position_53

  <bb 21> :
  # RawReset_16 = PHI <RawReset_17(17), RawReset_15(20)>
  # Position_24 = PHI <Position_25(17), Position_53(20)>
  # DEBUG Position => Position_24
  # DEBUG RawReset => RawReset_16
  # DEBUG BEGIN_STMT
  Index_54 = Index_21 + 1;
  # DEBUG Index => Index_54

  <bb 22> :
  # RawReset_17 = PHI <RawReset_14(16), RawReset_16(21)>
  # Index_21 = PHI <Index_49(16), Index_54(21)>
  # Position_25 = PHI <Position_48(16), Position_24(21)>
  # DEBUG Position => Position_25
  # DEBUG Index => Index_21
  # DEBUG RawReset => RawReset_17
  # DEBUG BEGIN_STMT
  if (Index_21 <= 31)
    goto <bb 17>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearDesResetFlags (RegValue_45);

  <bb 24> :
  # RawReset_18 = PHI <RawReset_14(15), RawReset_17(23)>
  # DEBUG RawReset => RawReset_18
  # DEBUG BEGIN_STMT
  if (RawReset_18 == 0)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  PreviousMode_56 = Power_Ip_MC_ME_GetPreviousMode ();
  # DEBUG PreviousMode => PreviousMode_56
  # DEBUG BEGIN_STMT
  if (PreviousMode_56 == 15)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  RawReset_57 = RawReset_18 | 8192;
  # DEBUG RawReset => RawReset_57

  <bb 27> :
  # RawReset_19 = PHI <RawReset_18(24), RawReset_18(25), RawReset_57(26)>
  # DEBUG RawReset => RawReset_19
  # DEBUG BEGIN_STMT
  _58 = RawReset_19;
  return _58;

}


Power_Ip_MC_RGM_GetResetReason ()
{
  uint32 Position;
  uint32 ActiveValue;
  uint32 RegValue;
  Power_Ip_ResetType ResetReason;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.8_1;
  long unsigned int _2;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.9_3;
  long unsigned int _4;
  Power_Ip_ResetType _26;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue_11 = 0;
  # DEBUG RegValue => RegValue_11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Position = 0;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.8_1 = Power_Ip_pxMC_RGM;
  _2 ={v} Power_Ip_pxMC_RGM.8_1->DES;
  RegValue_14 = _2 & 1611061081;
  # DEBUG RegValue => RegValue_14
  # DEBUG BEGIN_STMT
  if (RegValue_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  DesResetStatus = RegValue_14;

  <bb 4> :
  # DEBUG BEGIN_STMT
  ActiveValue_16 = DesResetStatus;
  # DEBUG ActiveValue => ActiveValue_16
  # DEBUG BEGIN_STMT
  ResetReason_18 = Power_Ip_MC_RGM_CheckResetReason (ActiveValue_16, 0, &Position);
  # DEBUG ResetReason => ResetReason_18
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearDesResetFlags (RegValue_14);
  # DEBUG BEGIN_STMT
  if (ActiveValue_16 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.9_3 = Power_Ip_pxMC_RGM;
  _4 ={v} Power_Ip_pxMC_RGM.9_3->FES;
  RegValue_20 = _4 & 1611731929;
  # DEBUG RegValue => RegValue_20
  # DEBUG BEGIN_STMT
  if (RegValue_20 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FesResetStatus = RegValue_20;

  <bb 7> :
  # DEBUG BEGIN_STMT
  ActiveValue_22 = FesResetStatus;
  # DEBUG ActiveValue => ActiveValue_22
  # DEBUG BEGIN_STMT
  if (ActiveValue_22 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ResetReason_24 = Power_Ip_MC_RGM_CheckResetReason (ActiveValue_22, 1, &Position);
  # DEBUG ResetReason => ResetReason_24

  <bb 9> :
  # ResetReason_5 = PHI <ResetReason_18(7), ResetReason_24(8)>
  # DEBUG ResetReason => ResetReason_5
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearFesResetFlags (RegValue_20);

  <bb 10> :
  # ResetReason_6 = PHI <ResetReason_18(4), ResetReason_5(9)>
  # DEBUG ResetReason => ResetReason_6
  # DEBUG BEGIN_STMT
  _26 = ResetReason_6;
  Position ={v} {CLOBBER};
  return _26;

}


Power_Ip_MC_RGM_CheckResetReason (uint32 ActiveValue, uint8 ResetMode, uint32 * PositionPtr)
{
  uint32 Position;
  uint32 DynamicMask;
  uint32 Index;
  uint32 NumberOfFlags;
  uint32 ResetMask;
  Power_Ip_ResetType ResetReason;
  long unsigned int _1;
  long unsigned int _2;
  Power_Ip_ResetType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ResetReason_14 = 29;
  # DEBUG ResetReason => ResetReason_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NumberOfFlags_15 = 0;
  # DEBUG NumberOfFlags => NumberOfFlags_15
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Position_18 = *PositionPtr_17(D);
  # DEBUG Position => Position_18
  # DEBUG BEGIN_STMT
  if (ResetMode_19(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ResetMask_21 = 1611126617;
  # DEBUG ResetMask => ResetMask_21
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ResetMask_20 = 1611732953;
  # DEBUG ResetMask => ResetMask_20

  <bb 5> :
  # ResetMask_7 = PHI <ResetMask_21(3), ResetMask_20(4)>
  # DEBUG ResetMask => ResetMask_7
  # DEBUG BEGIN_STMT
  Index_22 = 0;
  # DEBUG Index => Index_22
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DynamicMask_23 = 1 << Index_11;
  # DEBUG DynamicMask => DynamicMask_23
  # DEBUG BEGIN_STMT
  _1 = DynamicMask_23 & ResetMask_7;
  if (_1 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _2 = DynamicMask_23 & ActiveValue_24(D);
  if (_2 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ResetReason_25 = (Power_Ip_ResetType) Position_13;
  # DEBUG ResetReason => ResetReason_25
  # DEBUG BEGIN_STMT
  NumberOfFlags_26 = NumberOfFlags_10 + 1;
  # DEBUG NumberOfFlags => NumberOfFlags_26
  # DEBUG BEGIN_STMT
  if (NumberOfFlags_26 > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ResetReason_27 = 30;
  # DEBUG ResetReason => ResetReason_27
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 10> :
  # ResetReason_3 = PHI <ResetReason_5(7), ResetReason_25(8)>
  # NumberOfFlags_8 = PHI <NumberOfFlags_10(7), NumberOfFlags_26(8)>
  # DEBUG NumberOfFlags => NumberOfFlags_8
  # DEBUG ResetReason => ResetReason_3
  # DEBUG BEGIN_STMT
  Position_28 = Position_13 + 1;
  # DEBUG Position => Position_28

  <bb 11> :
  # ResetReason_4 = PHI <ResetReason_5(6), ResetReason_3(10)>
  # NumberOfFlags_9 = PHI <NumberOfFlags_10(6), NumberOfFlags_8(10)>
  # Position_12 = PHI <Position_13(6), Position_28(10)>
  # DEBUG Position => Position_12
  # DEBUG NumberOfFlags => NumberOfFlags_9
  # DEBUG ResetReason => ResetReason_4
  # DEBUG BEGIN_STMT
  Index_29 = Index_11 + 1;
  # DEBUG Index => Index_29

  <bb 12> :
  # ResetReason_5 = PHI <ResetReason_14(5), ResetReason_4(11)>
  # NumberOfFlags_10 = PHI <NumberOfFlags_15(5), NumberOfFlags_9(11)>
  # Index_11 = PHI <Index_22(5), Index_29(11)>
  # Position_13 = PHI <Position_18(5), Position_12(11)>
  # DEBUG Position => Position_13
  # DEBUG Index => Index_11
  # DEBUG NumberOfFlags => NumberOfFlags_10
  # DEBUG ResetReason => ResetReason_5
  # DEBUG BEGIN_STMT
  if (Index_11 <= 31)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # ResetReason_6 = PHI <ResetReason_27(9), ResetReason_5(12)>
  # DEBUG ResetReason => ResetReason_6
  # DEBUG BEGIN_STMT
  *PositionPtr_17(D) = Position_13;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _31 = ResetReason_6;
  return _31;

}


Power_Ip_MC_RGM_ResetInit (const struct Power_Ip_MC_RGM_ConfigType * ConfigPtr)
{
  uint32 DesResetReason;
  uint32 FesResetReason;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.0_1;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.1_2;
  long unsigned int _3;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.2_4;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.3_5;
  long unsigned int _6;
  long unsigned int _7;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.4_8;
  long unsigned int _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FesResetReason_13 = 0;
  # DEBUG FesResetReason => FesResetReason_13
  # DEBUG BEGIN_STMT
  DesResetReason_14 = 0;
  # DEBUG DesResetReason => DesResetReason_14
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.0_1 = Power_Ip_pxMC_RGM;
  FesResetReason_16 ={v} Power_Ip_pxMC_RGM.0_1->FES;
  # DEBUG FesResetReason => FesResetReason_16
  # DEBUG BEGIN_STMT
  if (FesResetReason_16 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FesResetStatus = FesResetReason_16;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearFesResetFlags (FesResetReason_16);

  <bb 4> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.1_2 = Power_Ip_pxMC_RGM;
  _3 = ConfigPtr_19(D)->FuncResetOpt;
  Power_Ip_pxMC_RGM.1_2->FERD ={v} _3;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.2_4 = Power_Ip_pxMC_RGM;
  DesResetReason_21 ={v} Power_Ip_pxMC_RGM.2_4->DES;
  # DEBUG DesResetReason => DesResetReason_21
  # DEBUG BEGIN_STMT
  if (DesResetReason_21 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.3_5 = Power_Ip_pxMC_RGM;
  _6 = ConfigPtr_19(D)->FesThresholdReset;
  Power_Ip_pxMC_RGM.3_5->FRET ={v} _6;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = DesResetReason_21 & 1;
  if (_7 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.4_8 = Power_Ip_pxMC_RGM;
  _9 = ConfigPtr_19(D)->DesThresholdReset;
  Power_Ip_pxMC_RGM.4_8->DRET ={v} _9;

  <bb 8> :
  return;

}


Power_Ip_MC_RGM_ClearDesResetFlags (uint32 RegValue)
{
  uint32 RegValueTemp;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  long unsigned int TimeoutTicks.10_1;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.11_2;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.12_3;
  long unsigned int _4;
  _Bool _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_9 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_9
  # DEBUG BEGIN_STMT
  RegValueTemp_11 = RegValue_10(D);
  # DEBUG RegValueTemp => RegValueTemp_11
  # DEBUG BEGIN_STMT
  if (RegValueTemp_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # RegValueTemp_6 = PHI <RegValueTemp_11(3), RegValueTemp_17(5)>
  # DEBUG RegValueTemp => RegValueTemp_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.10_1 = TimeoutTicks;
  TimeoutOccurred_15 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.10_1);
  # DEBUG TimeoutOccurred => TimeoutOccurred_15
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.11_2 = Power_Ip_pxMC_RGM;
  Power_Ip_pxMC_RGM.11_2->DES ={v} RegValueTemp_6;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.12_3 = Power_Ip_pxMC_RGM;
  _4 ={v} Power_Ip_pxMC_RGM.12_3->DES;
  RegValueTemp_17 = _4 & 1611061081;
  # DEBUG RegValueTemp => RegValueTemp_17
  # DEBUG BEGIN_STMT
  if (RegValueTemp_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = ~TimeoutOccurred_15;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_15 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 8> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Power_Ip_MC_RGM_ClearFesResetFlags (uint32 RegValue)
{
  uint32 RegValueTemp;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  long unsigned int TimeoutTicks.5_1;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.6_2;
  struct Power_Ip_MC_RGM_Type * Power_Ip_pxMC_RGM.7_3;
  long unsigned int _4;
  _Bool _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_9 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_9
  # DEBUG BEGIN_STMT
  RegValueTemp_11 = RegValue_10(D);
  # DEBUG RegValueTemp => RegValueTemp_11
  # DEBUG BEGIN_STMT
  if (RegValueTemp_11 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # RegValueTemp_6 = PHI <RegValueTemp_11(3), RegValueTemp_17(5)>
  # DEBUG RegValueTemp => RegValueTemp_6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.5_1 = TimeoutTicks;
  TimeoutOccurred_15 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.5_1);
  # DEBUG TimeoutOccurred => TimeoutOccurred_15
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.6_2 = Power_Ip_pxMC_RGM;
  Power_Ip_pxMC_RGM.6_2->FES ={v} RegValueTemp_6;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.7_3 = Power_Ip_pxMC_RGM;
  _4 ={v} Power_Ip_pxMC_RGM.7_3->FES;
  RegValueTemp_17 = _4 & 1611731929;
  # DEBUG RegValueTemp => RegValueTemp_17
  # DEBUG BEGIN_STMT
  if (RegValueTemp_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = ~TimeoutOccurred_15;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_15 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 8> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


