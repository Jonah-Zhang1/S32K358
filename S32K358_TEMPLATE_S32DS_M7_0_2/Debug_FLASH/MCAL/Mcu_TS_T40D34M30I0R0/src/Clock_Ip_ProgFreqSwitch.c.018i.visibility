
Marking local functions:


Marking externally visible functions:


Marking externally visible variables: Clock_Ip_axPcfsCallbacks/5


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Clock_Ip_FreqIds/9 (Clock_Ip_FreqIds) @06386ee8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) 
  Availability: not_available
  Varpool flags:
Clock_Ip_pxConfig/8 (Clock_Ip_pxConfig) @06386ea0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) 
  Availability: not_available
  Varpool flags:
Clock_Ip_apxCgmPcfs/7 (Clock_Ip_apxCgmPcfs) @06386e58
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8ClockFeatures/6 (Clock_Ip_au8ClockFeatures) @06386e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPcfsCallbacks/5 (Clock_Ip_axPcfsCallbacks) @063864c8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_ProgressiveFrequencyClockSwitchEmpty/3 (addr) Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (Clock_Ip_CgmXPcfsSdurDivcDiveDivs) @06385620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/6 (read) Clock_Ip_apxCgmPcfs/7 (read) Clock_Ip_au8ClockFeatures/6 (read) HashPfs/2 (read) HashPfs/2 (write) Clock_Ip_pxConfig/8 (read) Clock_Ip_FreqIds/9 (read) AMax/0 (read) PcfsRate/1 (read) 
  Referring: Clock_Ip_axPcfsCallbacks/5 (addr) 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Clock_Ip_ProgressiveFrequencyClockSwitchEmpty/3 (Clock_Ip_ProgressiveFrequencyClockSwitchEmpty) @06277e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_axPcfsCallbacks/5 (addr) 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
HashPfs/2 (HashPfs) @06273e10
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (write) 
  Availability: available
  Varpool flags:
PcfsRate/1 (PcfsRate) @06273d80
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
AMax/0 (AMax) @06273ca8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_CgmXPcfsSdurDivcDiveDivs/4 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_CgmXPcfsSdurDivcDiveDivs (const struct Clock_Ip_PcfsConfigType * Config, uint32 CfgIndex)
{
  uint32 DivEndValue;
  uint32 DivStartValue;
  uint32 DivcRate;
  uint32 DivcInit;
  uint32 Sdur;
  uint32 K;
  uint32 Var3;
  uint32 Var2;
  uint32 Var1;
  uint32 Index;
  uint32 Rate;
  uint32 AmaxBrut;
  uint32 Fsafe;
  uint32 Finput;
  uint32 HwIndex;
  volatile struct Clock_Ip_CgmPcfsType * CgmPcfsBase;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Finput = 0;
  # DEBUG BEGIN_STMT
  Fsafe = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Rate = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->SelectorName;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  _4 = (int) _3;
  CgmPcfsBase = Clock_Ip_apxCgmPcfs[_4];
  # DEBUG BEGIN_STMT
  _5 = Config->Name;
  _6 = (int) _5;
  _7 = Clock_Ip_au8ClockFeatures[_6][7];
  HwIndex = (uint32) _7;
  # DEBUG BEGIN_STMT
  _8 = HashPfs[CfgIndex];
  _9 = Config->ClockSourceFrequency;
  _10 = Config->MaxAllowableIDDchange;
  _11 = _9 ^ _10;
  _12 = Config->Name;
  _13 = (long unsigned int) _12;
  _14 = _11 ^ _13;
  _15 = Config->SelectorName;
  _16 = (long unsigned int) _15;
  _17 = _14 ^ _16;
  _18 = Config->StepDuration;
  _19 = _17 ^ _18;
  if (_8 != _19)
    goto <bb 4>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _20 = Config->ClockSourceFrequency;
  _21 = Config->MaxAllowableIDDchange;
  _22 = _20 ^ _21;
  _23 = Config->Name;
  _24 = (long unsigned int) _23;
  _25 = _22 ^ _24;
  _26 = Config->SelectorName;
  _27 = (long unsigned int) _26;
  _28 = _25 ^ _27;
  _29 = Config->StepDuration;
  _30 = _28 ^ _29;
  HashPfs[CfgIndex] = _30;
  # DEBUG BEGIN_STMT
  _31 = Config->ClockSourceFrequency;
  Finput = _31 / 1000000;
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.0_32 = Clock_Ip_pxConfig;
  _33 = Clock_Ip_pxConfig.0_32->ConfiguredFrequencies;
  _34 = Clock_Ip_FreqIds[1];
  _35 = (int) _34;
  _36 = (*_33)[_35].ConfiguredFrequencyValue;
  Fsafe = _36 / 1000000;
  # DEBUG BEGIN_STMT
  _37 = Config->MaxAllowableIDDchange;
  _38 = Config->StepDuration;
  _39 = _37 * _38;
  _40 = _39 * 100000;
  _41 = Finput * 2360;
  AmaxBrut = _40 / _41;
  # DEBUG BEGIN_STMT
  Rate = AmaxBrut;
  # DEBUG BEGIN_STMT
  _42 = 0;
  if (AmaxBrut < _42)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Rate = 0;
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _43 = 100;
  if (AmaxBrut > _43)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Rate = 1000;
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Index = 1;
  goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _44 = Index + 4294967295;
  _45 = AMax[_44];
  if (AmaxBrut > _45)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Rate = PcfsRate[Index];

  <bb 11> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (Index <= 5)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _46 = Finput * 2048000;
  _47 = Fsafe * Rate;
  _48 = _46 / _47;
  _49 = 2048000 / Rate;
  _50 = _48 - _49;
  Var1 = _50 + 256;
  # DEBUG BEGIN_STMT
  Var2 = 1073741824;
  # DEBUG BEGIN_STMT
  Var3 = 0;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Var2 = Var2 >> 2;

  <bb 15> :
  # DEBUG BEGIN_STMT
  if (Var2 > Var1)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _51 = Var3 + Var2;
  if (Var1 >= _51)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _52 = Var3 + Var2;
  Var1 = Var1 - _52;
  # DEBUG BEGIN_STMT
  _53 = Var2 << 1;
  Var3 = Var3 + _53;

  <bb 18> :
  # DEBUG BEGIN_STMT
  Var3 = Var3 >> 1;
  # DEBUG BEGIN_STMT
  Var2 = Var2 >> 2;

  <bb 19> :
  # DEBUG BEGIN_STMT
  if (Var2 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _54 = Var3 << 2;
  _55 = _54 + 191;
  K = _55 >> 7;
  # DEBUG BEGIN_STMT
  _56 = Config->StepDuration;
  Sdur = Fsafe * _56;
  # DEBUG BEGIN_STMT
  DivcInit = Rate * K;
  # DEBUG BEGIN_STMT
  DivcRate = Rate;
  # DEBUG BEGIN_STMT
  _57 = Rate * K;
  _58 = K + 1;
  _59 = _57 * _58;
  _60 = _59 >> 1;
  DivStartValue = _60 + 999;
  # DEBUG BEGIN_STMT
  _61 = Finput * 1000;
  _62 = _61 / Fsafe;
  DivEndValue = _62 + 4294967295;
  # DEBUG BEGIN_STMT
  _63 = Sdur & 65535;
  CgmPcfsBase->PCFS_SDUR = _63;
  # DEBUG BEGIN_STMT
  _64 = DivcRate & 255;
  _65 = DivcInit << 16;
  _66 = _64 | _65;
  CgmPcfsBase->PCFS[HwIndex].DIVC = _66;
  # DEBUG BEGIN_STMT
  _67 = DivEndValue & 1048575;
  CgmPcfsBase->PCFS[HwIndex].DIVE = _67;
  # DEBUG BEGIN_STMT
  _68 = DivStartValue & 1048575;
  CgmPcfsBase->PCFS[HwIndex].DIVS = _68;

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ProgressiveFrequencyClockSwitchEmpty (const struct Clock_Ip_PcfsConfigType * Config, uint32 Index)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


