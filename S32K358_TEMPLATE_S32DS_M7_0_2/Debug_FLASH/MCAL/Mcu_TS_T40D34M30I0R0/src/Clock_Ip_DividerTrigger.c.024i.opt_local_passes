Clock_Ip_TriggerUpdateCgmXDivTrigCtrlTctlHhenUpdStat (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  uint32 DividerStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  int _2;
  unsigned char _3;
  <unnamed type> _4;
  int _5;
  unsigned char _6;
  <unnamed type> _7;
  volatile struct Clock_Ip_CgmMuxType * _8;
  volatile struct Clock_Ip_CgmMuxType * _9;
  long unsigned int _10;
  long unsigned int TimeoutTicks.0_11;
  _Bool _12;
  <unnamed type> _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred_16 = 0;
  # DEBUG TimeoutOccurred => TimeoutOccurred_16
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config_17(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config_17(D)->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance_19 = (uint32) _3;
  # DEBUG Instance => Instance_19
  # DEBUG BEGIN_STMT
  _4 = Config_17(D)->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex_20 = (uint32) _6;
  # DEBUG SelectorIndex => SelectorIndex_20
  # DEBUG BEGIN_STMT
  _7 = Config_17(D)->TriggerType;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _8->MUX_DIV_TRIG ={v} 1;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_apxCgm[Instance_19][SelectorIndex_20];
  _10 ={v} _9->MUX_DIV_UPD_STAT;
  DividerStatus_23 = _10 & 1;
  # DEBUG DividerStatus => DividerStatus_23
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_11 = TimeoutTicks;
  TimeoutOccurred_25 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_11);
  # DEBUG TimeoutOccurred => TimeoutOccurred_25
  # DEBUG BEGIN_STMT
  if (DividerStatus_23 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _12 = ~TimeoutOccurred_25;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_25 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _13 = Config_17(D)->Name;
  Clock_Ip_ReportClockErrors (1, _13);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ConfigureCgmXDivTrigCtrlTctlHhenUpdStat (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  int _2;
  unsigned char _3;
  <unnamed type> _4;
  int _5;
  unsigned char _6;
  <unnamed type> _7;
  volatile struct Clock_Ip_CgmMuxType * _8;
  volatile struct Clock_Ip_CgmMuxType * _9;
  long unsigned int _10;
  volatile struct Clock_Ip_CgmMuxType * _11;
  long unsigned int _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config_14(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config_14(D)->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance_16 = (uint32) _3;
  # DEBUG Instance => Instance_16
  # DEBUG BEGIN_STMT
  _4 = Config_14(D)->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex_17 = (uint32) _6;
  # DEBUG SelectorIndex => SelectorIndex_17
  # DEBUG BEGIN_STMT
  _7 = Config_14(D)->TriggerType;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance_16][SelectorIndex_17];
  _8->MUX_DIV_TRIG_CTRL ={v} 1;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_apxCgm[Instance_16][SelectorIndex_17];
  _10 ={v} _9->MUX_DIV_TRIG_CTRL;
  _11 = Clock_Ip_apxCgm[Instance_16][SelectorIndex_17];
  _12 = _10 & 4294967294;
  _11->MUX_DIV_TRIG_CTRL ={v} _12;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_Callback_DividerTriggerEmpty (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


