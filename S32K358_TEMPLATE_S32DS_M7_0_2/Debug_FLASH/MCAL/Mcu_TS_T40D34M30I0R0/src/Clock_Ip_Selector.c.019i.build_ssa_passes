Clock_Ip_SetRtcRtccClksel_TrustedCall (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorValue;
  uint32 RegValue;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config->Value;
  _2 = (int) _1;
  _3 = Clock_Ip_au16SelectorEntryRtcHardwareValue[_2];
  SelectorValue = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = 1076396032B;
  RegValue = _4->RTCC;
  # DEBUG BEGIN_STMT
  RegValue = RegValue & 4294955007;
  # DEBUG BEGIN_STMT
  _5 = SelectorValue << 12;
  _6 = _5 & 12288;
  RegValue = RegValue | _6;
  # DEBUG BEGIN_STMT
  _7 = 1076396032B;
  _7->RTCC = RegValue;
  return;

}


Clock_Ip_SetRtcRtccClksel (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Clock_Ip_SetRtcRtccClksel_TrustedCall (Config);

  <bb 4> :
  return;

}


Clock_Ip_SetCgmXCscCssCsGrip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Value;
  _8 = (int) _7;
  _9 = Clock_Ip_au16SelectorEntryHardwareValue[_8];
  SelectorValue = (uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = (int) _10;
  _12 = Clock_Ip_au8ClockFeatures[_11][2];
  _13 = (int) _12;
  SelectorMask = Clock_Ip_axFeatureExtensions[_13].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _14 = Config->Name;
  _15 = (int) _14;
  _16 = Clock_Ip_au8ClockFeatures[_15][2];
  _17 = (int) _16;
  SelectorShift = Clock_Ip_axFeatureExtensions[_17].SelectorValueShift;
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSC;
  _20 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _21 = _19 | 12;
  _20->CSC = _21;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_22 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_22);
  # DEBUG BEGIN_STMT
  _23 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _24 = _23->CSS;
  _25 = _24 & 131072;
  if (_25 == 131072)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _26 = ~TimeoutOccurred;
  if (_26 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _27 = ~TimeoutOccurred;
  if (_27 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _28 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _28->CSC;
  # DEBUG BEGIN_STMT
  _29 = ~SelectorMask;
  RegValue = RegValue & _29;
  # DEBUG BEGIN_STMT
  _30 = SelectorValue << SelectorShift;
  _31 = SelectorMask & _30;
  RegValue = RegValue | _31;
  # DEBUG BEGIN_STMT
  _32 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _32->CSC = RegValue;
  # DEBUG BEGIN_STMT
  _33 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _34 = _33->CSC;
  _35 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _36 = _34 & 4294967283;
  _35->CSC = _36;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 8> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_37 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_37);
  # DEBUG BEGIN_STMT
  _38 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _39 = _38->CSS;
  _40 = _39 & 131072;
  if (_40 != 131072)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _41 = ~TimeoutOccurred;
  if (_41 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _42 = Config->Name;
  Clock_Ip_ReportClockErrors (3, _42);
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _43 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _43);

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssCsGrip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorResetValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = (int) _7;
  _9 = Clock_Ip_au8SoftwareMuxResetValue[_8];
  SelectorResetValue = (uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = (int) _10;
  _12 = Clock_Ip_au8ClockFeatures[_11][2];
  _13 = (int) _12;
  SelectorMask = Clock_Ip_axFeatureExtensions[_13].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _14 = Config->Name;
  _15 = (int) _14;
  _16 = Clock_Ip_au8ClockFeatures[_15][2];
  _17 = (int) _16;
  SelectorShift = Clock_Ip_axFeatureExtensions[_17].SelectorValueShift;
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSC;
  _20 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _21 = _19 | 12;
  _20->CSC = _21;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.2_22 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.2_22);
  # DEBUG BEGIN_STMT
  _23 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _24 = _23->CSS;
  _25 = _24 & 131072;
  if (_25 == 131072)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _26 = ~TimeoutOccurred;
  if (_26 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _27 = ~TimeoutOccurred;
  if (_27 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _28 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _28->CSC;
  # DEBUG BEGIN_STMT
  _29 = ~SelectorMask;
  RegValue = RegValue & _29;
  # DEBUG BEGIN_STMT
  _30 = SelectorResetValue << SelectorShift;
  _31 = SelectorMask & _30;
  RegValue = RegValue | _31;
  # DEBUG BEGIN_STMT
  _32 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _32->CSC = RegValue;
  # DEBUG BEGIN_STMT
  _33 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _34 = _33->CSC;
  _35 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _36 = _34 & 4294967283;
  _35->CSC = _36;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _37 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _37);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_SetCgmXCscCssClkswRampupRampdownSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Value;
  _8 = (int) _7;
  _9 = Clock_Ip_au16SelectorEntryHardwareValue[_8];
  SelectorValue = (uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = (int) _10;
  _12 = Clock_Ip_au8ClockFeatures[_11][2];
  _13 = (int) _12;
  SelectorMask = Clock_Ip_axFeatureExtensions[_13].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _14 = Config->Name;
  _15 = (int) _14;
  _16 = Clock_Ip_au8ClockFeatures[_15][2];
  _17 = (int) _16;
  SelectorShift = Clock_Ip_axFeatureExtensions[_17].SelectorValueShift;
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSS;
  _20 = SelectorMask & _19;
  _21 = _20 >> SelectorShift;
  if (SelectorValue != _21)
    goto <bb 4>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.3_22 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.3_22);
  # DEBUG BEGIN_STMT
  _23 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _24 = _23->CSS;
  _25 = _24 & 65536;
  if (_25 == 65536)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _26 = ~TimeoutOccurred;
  if (_26 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _27 = ~TimeoutOccurred;
  if (_27 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _28 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _28->CSC;
  # DEBUG BEGIN_STMT
  _29 = ~SelectorMask;
  RegValue = RegValue & _29;
  # DEBUG BEGIN_STMT
  _30 = SelectorValue << SelectorShift;
  _31 = SelectorMask & _30;
  RegValue = RegValue | _31;
  # DEBUG BEGIN_STMT
  RegValue = RegValue | 7;
  # DEBUG BEGIN_STMT
  _32 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _32->CSC = RegValue;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.4_33 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.4_33);
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _35 = _34->CSS;
  _36 = _35 & 4;
  if (_36 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _37 = ~TimeoutOccurred;
  if (_37 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _38 = ~TimeoutOccurred;
  if (_38 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.5_39 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.5_39);
  # DEBUG BEGIN_STMT
  _40 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _41 = _40->CSS;
  _42 = _41 & 65536;
  if (_42 == 65536)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _43 = ~TimeoutOccurred;
  if (_43 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _44 = ~TimeoutOccurred;
  if (_44 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _45 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _46 = _45->CSS;
  _47 = _46 >> 17;
  _48 = _47 & 7;
  if (_48 != 1)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _49 = Config->Name;
  Clock_Ip_ReportClockErrors (3, _49);
  goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _50 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _50);
  goto <bb 21>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _51 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _51);
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _52 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _52);

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssClkswRampupRampdownSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorMask;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = (int) _7;
  _9 = Clock_Ip_au8ClockFeatures[_8][2];
  _10 = (int) _9;
  SelectorMask = Clock_Ip_axFeatureExtensions[_10].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _11 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _12 = _11->CSC;
  _13 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _14 = _12 | 8;
  _13->CSC = _14;
  # DEBUG BEGIN_STMT
  _15 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _16 = _15->CSC;
  _17 = ~SelectorMask;
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _16 & _17;
  _18->CSC = _19;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_SetCgmXCscCssClkswSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 SelectorShift;
  uint32 SelectorMask;
  uint32 SelectorValue;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Value;
  _8 = (int) _7;
  _9 = Clock_Ip_au16SelectorEntryHardwareValue[_8];
  SelectorValue = (uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = (int) _10;
  _12 = Clock_Ip_au8ClockFeatures[_11][2];
  _13 = (int) _12;
  SelectorMask = Clock_Ip_axFeatureExtensions[_13].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _14 = Config->Name;
  _15 = (int) _14;
  _16 = Clock_Ip_au8ClockFeatures[_15][2];
  _17 = (int) _16;
  SelectorShift = Clock_Ip_axFeatureExtensions[_17].SelectorValueShift;
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _18->CSS;
  _20 = SelectorMask & _19;
  _21 = _20 >> SelectorShift;
  if (SelectorValue != _21)
    goto <bb 4>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.6_22 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.6_22);
  # DEBUG BEGIN_STMT
  _23 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _24 = _23->CSS;
  _25 = _24 & 65536;
  if (_25 == 65536)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _26 = ~TimeoutOccurred;
  if (_26 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _27 = ~TimeoutOccurred;
  if (_27 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _28 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _28->CSC;
  # DEBUG BEGIN_STMT
  _29 = ~SelectorMask;
  RegValue = RegValue & _29;
  # DEBUG BEGIN_STMT
  _30 = SelectorValue << SelectorShift;
  _31 = SelectorMask & _30;
  RegValue = RegValue | _31;
  # DEBUG BEGIN_STMT
  RegValue = RegValue | 4;
  # DEBUG BEGIN_STMT
  _32 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _32->CSC = RegValue;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.7_33 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.7_33);
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _35 = _34->CSS;
  _36 = _35 & 4;
  if (_36 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _37 = ~TimeoutOccurred;
  if (_37 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _38 = ~TimeoutOccurred;
  if (_38 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.8_39 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.8_39);
  # DEBUG BEGIN_STMT
  _40 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _41 = _40->CSS;
  _42 = _41 & 65536;
  if (_42 == 65536)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _43 = ~TimeoutOccurred;
  if (_43 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _44 = ~TimeoutOccurred;
  if (_44 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _45 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _46 = _45->CSS;
  _47 = _46 >> 17;
  _48 = _47 & 7;
  if (_48 != 1)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _49 = Config->Name;
  Clock_Ip_ReportClockErrors (3, _49);
  goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _50 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _50);
  goto <bb 21>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _51 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _51);
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _52 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _52);

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ResetCgmXCscCssClkswSwip (const struct Clock_Ip_SelectorConfigType * Config)
{
  uint32 SelectorMask;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = (int) _7;
  _9 = Clock_Ip_au8ClockFeatures[_8][2];
  _10 = (int) _9;
  SelectorMask = Clock_Ip_axFeatureExtensions[_10].SelectorValueMask;
  # DEBUG BEGIN_STMT
  _11 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _12 = _11->CSC;
  _13 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _14 = _12 | 8;
  _13->CSC = _14;
  # DEBUG BEGIN_STMT
  _15 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _16 = _15->CSC;
  _17 = ~SelectorMask;
  _18 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _19 = _16 & _17;
  _18->CSC = _19;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_CallbackSelectorEmpty (const struct Clock_Ip_SelectorConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


