IPA function summary for Clock_Ip_DistributePll.part.0/60 inlinable
  global time:     424.840003
  self size:       69
  global size:     69
  min size:       66
  self stack:      0
  global stack:    0
    size:51.000000, time:243.370911
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_Command/25 function body not available
      freq:0.50 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant
    indirect call loop depth: 1 freq:2.75 size: 4 time: 16
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16

IPA function summary for Clock_Ip_GetPllStatus.part.0/59 inlinable
  global time:     276.905591
  self size:       22
  global size:     22
  min size:       19
  self stack:      0
  global stack:    0
    size:14.000000, time:124.730313
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 1 freq:8.83 size: 5 time: 17

IPA function summary for Clock_Ip_TimeoutExpired/24 inlinable
  global time:     20.000000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/58 function body not available
      freq:1.00 loop depth: 0 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for Clock_Ip_StartTimeout/23 inlinable
  global time:     30.000000
  self size:       13
  global size:     13
  min size:       9
  self stack:      0
  global stack:    0
    size:1.500000, time:1.500000
    size:4.500000, time:3.500000,  executed if:(not inlined)
  calls:
    OsIf_MicrosToTicks/57 function body not available
      freq:1.00 loop depth: 0 size: 4 time: 13
       op1 is compile time invariant
    OsIf_GetCounter/56 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op0 is compile time invariant

IPA function summary for Clock_Ip_ReportClockErrors/22 inlinable
  global time:     20.000000
  self size:       9
  global size:     9
  min size:       6
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_EnableSircInStandby/21 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    EnableSircInStandbyMode/55 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_DisableSircInStandby/20 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    DisableSircInStandbyMode/54 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_EnableFircInStandby/19 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    EnableFircInStandbyMode/53 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_DisableFircInStandby/18 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    DisableFircInStandbyMode/52 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_GetClockFrequency/17 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_GetFreq/51 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12

IPA function summary for Clock_Ip_EnableModuleClock/16 inlinable
  global time:     25.000000
  self size:       14
  global size:     14
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_DisableModuleClock/15 inlinable
  global time:     25.000000
  self size:       14
  global size:     14
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_InstallNotificationsCallback/14 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Clock_Ip_DisableClockMonitor/13 inlinable
  global time:     24.000000
  self size:       13
  global size:     13
  min size:       9
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for Clock_Ip_DistributePll/12 inlinable
  global time:     12.000000
  self size:       7
  global size:     7
  min size:       4
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll.part.0/60 function not considered for inlining
      freq:0.70 loop depth: 0 size: 1 time: 10 callee size:34 stack: 0

IPA function summary for Clock_Ip_GetPllStatus/11 inlinable
  global time:     301.101548
  self size:       28
  global size:     28
  min size:       25
  self stack:      0
  global stack:    0
    size:18.000000, time:143.426270
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_GetPllStatus.part.0/59 function not considered for inlining
      freq:0.50 loop depth: 0 size: 2 time: 11 callee size:11 stack: 0
    indirect call loop depth: 1 freq:8.83 size: 5 time: 17

IPA function summary for Clock_Ip_InitClock/10 inlinable
  global time:     3310.074600
  self size:       288
  global size:     288
  min size:       270
  self stack:      0
  global stack:    0
    size:198.000000, time:1404.684584
    size:18.000000, time:119.695456,  executed if:(not inlined)
  calls:
    Clock_Ip_Command/25 function body not available
      freq:0.50 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant
    Clock_Ip_UpdateDriverContext/6 function not considered for inlining
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size:14 stack: 0
    Clock_Ip_ResetClockConfiguration/8 function not considered for inlining
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size:35 stack: 0
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16
    indirect call loop depth: 1 freq:5.34 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 5 time: 17
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 5 time: 17
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:5.66 size: 4 time: 16

IPA function summary for Clock_Ip_Init/9 inlinable
  global time:     21.379000
  self size:       13
  global size:     13
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:3.660000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll/12 function not considered for inlining
      freq:0.11 loop depth: 0 size: 1 time: 10 callee size: 3 stack: 0
    Clock_Ip_GetPllStatus/11 function not considered for inlining
      freq:0.33 loop depth: 0 size: 2 time: 11 callee size:14 stack: 0
    Clock_Ip_InitClock/10 function not considered for inlining
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size:144 stack: 0

IPA function summary for Clock_Ip_ResetClockConfiguration/8 inlinable
  global time:     920.181825
  self size:       71
  global size:     71
  min size:       64
  self stack:      0
  global stack:    0
    size:47.500000, time:381.681820
    size:6.500000, time:19.681818,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 88] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 88] changed)
  loop iterations:(op0[ref offset: 88] changed)
  calls:
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16

IPA function summary for Clock_Ip_CallEmptyCallbacks/7 inlinable
  global time:     126.000000
  self size:       80
  global size:     80
  min size:       77
  self stack:      0
  global stack:    0
    size:18.000000, time:10.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:0.50 size: 5 time: 17
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 5 time: 17
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 4 time: 16
    indirect call loop depth: 0 freq:0.50 size: 5 time: 17

IPA function summary for Clock_Ip_UpdateDriverContext/6 inlinable
  global time:     273.727274
  self size:       29
  global size:     29
  min size:       24
  self stack:      0
  global stack:    0
    size:17.000000, time:135.454546
    size:5.000000, time:19.181818,  executed if:(not inlined)
  calls:
    Clock_Ip_CallEmptyCallbacks/7 function not considered for inlining
      freq:1.00 loop depth: 0 size: 1 time: 10 callee size:40 stack: 0
    Clock_Ip_SetExternalSignalFrequency/48 function body not available
      freq:8.09 loop depth: 1 size: 3 time: 12
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_NotificatonsEmptyCallback/5 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Flattening functions:
Overall time estimate: 5929.209839 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in Clock_Ip_DistributePll.part.0/60.
Enqueueing calls in Clock_Ip_GetPllStatus.part.0/59.
Enqueueing calls in Clock_Ip_TimeoutExpired/24.
Enqueueing calls in Clock_Ip_StartTimeout/23.
Enqueueing calls in Clock_Ip_ReportClockErrors/22.
Enqueueing calls in Clock_Ip_EnableSircInStandby/21.
Enqueueing calls in Clock_Ip_DisableSircInStandby/20.
Enqueueing calls in Clock_Ip_EnableFircInStandby/19.
Enqueueing calls in Clock_Ip_DisableFircInStandby/18.
Enqueueing calls in Clock_Ip_GetClockFrequency/17.
Enqueueing calls in Clock_Ip_EnableModuleClock/16.
Enqueueing calls in Clock_Ip_DisableModuleClock/15.
Enqueueing calls in Clock_Ip_InstallNotificationsCallback/14.
Enqueueing calls in Clock_Ip_DisableClockMonitor/13.
Enqueueing calls in Clock_Ip_DistributePll/12.
Enqueueing calls in Clock_Ip_GetPllStatus/11.
Enqueueing calls in Clock_Ip_InitClock/10.
Enqueueing calls in Clock_Ip_Init/9.
Enqueueing calls in Clock_Ip_ResetClockConfiguration/8.
Enqueueing calls in Clock_Ip_CallEmptyCallbacks/7.
Enqueueing calls in Clock_Ip_UpdateDriverContext/6.
Enqueueing calls in Clock_Ip_NotificatonsEmptyCallback/5.

Considering Clock_Ip_GetPllStatus.part.0/59 with 22 size
 to be inlined into Clock_Ip_GetPllStatus/11 in unknown:0
 Estimated badness is -0.033987, frequency 0.50.

Considering Clock_Ip_UpdateDriverContext/6 with 29 size
 to be inlined into Clock_Ip_InitClock/10 in C:/Users/zhang_liu/workspaceS32DS.3.5/S32K358_TEMPLATE_S32DS/S32K358_TEMPLATE_S32DS_M7_0_0/MCAL/Mcu_TS_T40D34M30I0R0/src/Clock_Ip.c:785
 Estimated badness is -0.017702, frequency 1.00.
node context cache: 0 hits, 0 misses, 4 initializations

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:

Inlining Clock_Ip_DistributePll.part.0/60 size 69.
 Called once from Clock_Ip_DistributePll/12 7 insns.
 Inlined into Clock_Ip_DistributePll/12 which now has 72 size

Inlining Clock_Ip_ResetClockConfiguration/8 size 71.
 Called once from Clock_Ip_InitClock/10 310 insns.
 Inlined into Clock_Ip_InitClock/10 which now has 372 size

Inlining Clock_Ip_CallEmptyCallbacks/7 size 80.
 Called once from Clock_Ip_UpdateDriverContext/6 29 insns.
 Inlined into Clock_Ip_UpdateDriverContext/6 which now has 29 size
Overall time estimate: 5575.041412 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :       17 calls, 22.940909 freq, 0 count
--param max-inline-insns-auto limit reached       :        2 calls, 1.330000 freq, 0 count
call is unlikely and code size would grow         :        1 calls, 0.108900 freq, 0 count
IPA function summary for Clock_Ip_TimeoutExpired/24 inlinable
  global time:     20.000000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
  calls:
    OsIf_GetElapsed/58 function body not available
      freq:1.00 loop depth: 0 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for Clock_Ip_StartTimeout/23 inlinable
  global time:     30.000000
  self size:       13
  global size:     13
  min size:       9
  self stack:      0
  global stack:    0
    size:1.500000, time:1.500000
    size:4.500000, time:3.500000,  executed if:(not inlined)
  calls:
    OsIf_MicrosToTicks/57 function body not available
      freq:1.00 loop depth: 0 size: 4 time: 13
       op1 is compile time invariant
    OsIf_GetCounter/56 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op0 is compile time invariant

IPA function summary for Clock_Ip_ReportClockErrors/22 inlinable
  global time:     20.000000
  self size:       9
  global size:     9
  min size:       6
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_EnableSircInStandby/21 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    EnableSircInStandbyMode/55 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_DisableSircInStandby/20 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    DisableSircInStandbyMode/54 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_EnableFircInStandby/19 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    EnableFircInStandbyMode/53 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_DisableFircInStandby/18 inlinable
  global time:     25.000000
  self size:       8
  global size:     8
  min size:       5
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    DisableFircInStandbyMode/52 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant

IPA function summary for Clock_Ip_GetClockFrequency/17 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_GetFreq/51 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12

IPA function summary for Clock_Ip_EnableModuleClock/16 inlinable
  global time:     25.000000
  self size:       14
  global size:     14
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_DisableModuleClock/15 inlinable
  global time:     25.000000
  self size:       14
  global size:     14
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 5 time: 17

IPA function summary for Clock_Ip_InstallNotificationsCallback/14 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Clock_Ip_DisableClockMonitor/13 inlinable
  global time:     24.000000
  self size:       13
  global size:     13
  min size:       9
  self stack:      0
  global stack:    0
    size:5.000000, time:5.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:1.00 size: 4 time: 16

IPA function summary for Clock_Ip_DistributePll/12 inlinable
  global time:     300.988003
  self size:       7
  global size:     72
  min size:       69
  self stack:      0
  global stack:    0
  estimated growth:3
    size:54.000000, time:173.359638
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll.part.0/60 inlined
      freq:0.70
      Stack frame offset 0, callee self size 0
      Clock_Ip_Command/25 function body not available
        freq:0.35 loop depth: 0 size: 3 time: 12
         op1 is compile time invariant
      indirect call loop depth: 1 freq:1.93 size: 4 time: 16
      indirect call loop depth: 1 freq:2.83 size: 4 time: 16
      indirect call loop depth: 1 freq:2.83 size: 4 time: 16

IPA function summary for Clock_Ip_GetPllStatus/11 inlinable
  global time:     433.054345
  self size:       28
  global size:     45
  min size:       42
  self stack:      0
  global stack:    0
  estimated growth:23
    size:32.000000, time:205.791428
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_GetPllStatus.part.0/59 inlined
      freq:0.50
      Stack frame offset 0, callee self size 0
      indirect call loop depth: 1 freq:4.42 size: 5 time: 17
    indirect call loop depth: 1 freq:8.83 size: 5 time: 17

IPA function summary for Clock_Ip_InitClock/10 inlinable
  global time:     4556.620064
  self size:       288
  global size:     448
  min size:       430
  self stack:      0
  global stack:    0
  estimated growth:268
    size:281.000000, time:1932.820950
    size:18.000000, time:119.695456,  executed if:(not inlined)
  calls:
    Clock_Ip_Command/25 function body not available
      freq:0.50 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant
    Clock_Ip_UpdateDriverContext/6 inlined
      freq:1.00
      Stack frame offset 0, callee self size 0
      Clock_Ip_CallEmptyCallbacks/7 inlined
        freq:1.00
        Stack frame offset 0, callee self size 0
        indirect call loop depth: 0 freq:0.50 size: 5 time: 17
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 5 time: 17
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 4 time: 16
        indirect call loop depth: 0 freq:0.50 size: 5 time: 17
      Clock_Ip_SetExternalSignalFrequency/48 function body not available
        freq:8.09 loop depth: 1 size: 3 time: 12
      Clock_Ip_Command/25 function body not available
        freq:1.00 loop depth: 0 size: 3 time: 12
         op1 is compile time invariant
    Clock_Ip_ResetClockConfiguration/8 inlined
      freq:1.00
      Stack frame offset 0, callee self size 0
      indirect call loop depth: 1 freq:8.09 size: 4 time: 16
      indirect call loop depth: 1 freq:8.09 size: 4 time: 16
      indirect call loop depth: 1 freq:8.09 size: 4 time: 16
      indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    Clock_Ip_Command/25 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op1 is compile time invariant
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16
    indirect call loop depth: 1 freq:4.05 size: 4 time: 16
    indirect call loop depth: 1 freq:5.34 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 5 time: 17
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 5 time: 17
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:8.09 size: 4 time: 16
    indirect call loop depth: 1 freq:5.66 size: 4 time: 16

IPA function summary for Clock_Ip_Init/9 inlinable
  global time:     21.379000
  self size:       13
  global size:     13
  min size:       10
  self stack:      0
  global stack:    0
    size:5.000000, time:3.660000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Clock_Ip_DistributePll/12 call is unlikely and code size would grow
      freq:0.11 loop depth: 0 size: 1 time: 10 callee size:36 stack: 0
    Clock_Ip_GetPllStatus/11 --param max-inline-insns-auto limit reached
      freq:0.33 loop depth: 0 size: 2 time: 11 callee size:22 stack: 0
    Clock_Ip_InitClock/10 --param max-inline-insns-auto limit reached
      freq:1.00 loop depth: 0 size: 2 time: 11 callee size:224 stack: 0

IPA function summary for Clock_Ip_NotificatonsEmptyCallback/5 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Clock_Ip_DistributePll.part.0/60 (Clock_Ip_DistributePll.part.0) @062e07e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Clock_Ip_aeSourceTypeClockName/43 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8SelectorCallbackIndex/44 (read) Clock_Ip_axSelectorCallbacks/45 (read) Clock_Ip_pxConfig/2 (read) DriverContext/1 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8GateCallbackIndex/46 (read) Clock_Ip_axGateCallbacks/47 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8CmuCallbackIndex/27 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Function Clock_Ip_DistributePll.part.0/60 is inline copy in Clock_Ip_DistributePll/12
  Availability: local
  Function flags: count:118111600 (estimated locally) body local split_part optimize_size
  Called by: Clock_Ip_DistributePll/12 (inlined) (118111600 (estimated locally),0.70 per call) 
  Calls: Clock_Ip_Command/25 (59055800 (estimated locally),0.35 per call) 
   Indirect call(324914280 (estimated locally),1.93 per call)  Num speculative call targets: 0
   Indirect call(477815112 (estimated locally),2.83 per call)  Num speculative call targets: 0
   Indirect call(477815112 (estimated locally),2.83 per call)  Num speculative call targets: 0
Clock_Ip_GetPllStatus.part.0/59 (Clock_Ip_GetPllStatus.part.0) @063fe620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Clock_Ip_aeHwDfsName/50 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8FractionalDividerCallbackIndex/41 (read) Clock_Ip_axFracDivCallbacks/42 (read) DriverContext/1 (read) 
  Referring: 
  Function Clock_Ip_GetPllStatus.part.0/59 is inline copy in Clock_Ip_GetPllStatus/11
  Availability: local
  Function flags: count:57431766 (estimated locally) body local split_part optimize_size
  Called by: Clock_Ip_GetPllStatus/11 (inlined) (57431766 (estimated locally),0.50 per call) 
  Calls: 
   Indirect call(507343022 (estimated locally),4.42 per call)  Num speculative call targets: 0
OsIf_GetElapsed/58 (OsIf_GetElapsed) @064f2540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_TimeoutExpired/24 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
OsIf_MicrosToTicks/57 (OsIf_MicrosToTicks) @064f2380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_StartTimeout/23 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
OsIf_GetCounter/56 (OsIf_GetCounter) @064f22a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_StartTimeout/23 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
EnableSircInStandbyMode/55 (EnableSircInStandbyMode) @064f2000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_EnableSircInStandby/21 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
DisableSircInStandbyMode/54 (DisableSircInStandbyMode) @064e0380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_DisableSircInStandby/20 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
EnableFircInStandbyMode/53 (EnableFircInStandbyMode) @064e0ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_EnableFircInStandby/19 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
DisableFircInStandbyMode/52 (DisableFircInStandbyMode) @064e0d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_DisableFircInStandby/18 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Clock_Ip_GetFreq/51 (Clock_Ip_GetFreq) @064e0b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_GetClockFrequency/17 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Clock_Ip_aeHwDfsName/50 (Clock_Ip_aeHwDfsName) @064def78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus.part.0/59 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_aeHwPllName/49 (Clock_Ip_aeHwPllName) @064deee8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/11 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_SetExternalSignalFrequency/48 (Clock_Ip_SetExternalSignalFrequency) @064e0000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_UpdateDriverContext/6 (955630225 (estimated locally),8.09 per call) 
  Calls: 
Clock_Ip_axGateCallbacks/47 (Clock_Ip_axGateCallbacks) @064d9948
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DisableModuleClock/15 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_EnableModuleClock/16 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8GateCallbackIndex/46 (Clock_Ip_au8GateCallbackIndex) @064d9900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_DisableModuleClock/15 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_EnableModuleClock/16 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axSelectorCallbacks/45 (Clock_Ip_axSelectorCallbacks) @064d9870
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_DistributePll.part.0/60 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8SelectorCallbackIndex/44 (Clock_Ip_au8SelectorCallbackIndex) @064d9828
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_DistributePll.part.0/60 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_aeSourceTypeClockName/43 (Clock_Ip_aeSourceTypeClockName) @064d97e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_DistributePll.part.0/60 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axFracDivCallbacks/42 (Clock_Ip_axFracDivCallbacks) @064d9750
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_GetPllStatus.part.0/59 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8FractionalDividerCallbackIndex/41 (Clock_Ip_au8FractionalDividerCallbackIndex) @064d9708
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_GetPllStatus.part.0/59 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPllCallbacks/40 (Clock_Ip_axPllCallbacks) @064d95a0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_GetPllStatus/11 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PllCallbackIndex/39 (Clock_Ip_au8PllCallbackIndex) @064d9558
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_GetPllStatus/11 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerCallbacks/38 (Clock_Ip_axDividerCallbacks) @064d9480
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerCallbackIndex/37 (Clock_Ip_au8DividerCallbackIndex) @064d9438
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerTriggerCallbacks/36 (Clock_Ip_axDividerTriggerCallbacks) @064d93a8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerTriggerCallbackIndex/35 (Clock_Ip_au8DividerTriggerCallbackIndex) @064d9360
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPcfsCallbacks/34 (Clock_Ip_axPcfsCallbacks) @064d92d0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PcfsCallbackIndex/33 (Clock_Ip_au8PcfsCallbackIndex) @064d9288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axExtOscCallbacks/32 (Clock_Ip_axExtOscCallbacks) @064d91b0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8XoscCallbackIndex/31 (Clock_Ip_au8XoscCallbackIndex) @064d9168
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axIntOscCallbacks/30 (Clock_Ip_axIntOscCallbacks) @064d90d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8IrcoscCallbackIndex/29 (Clock_Ip_au8IrcoscCallbackIndex) @064d9090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axCmuCallbacks/28 (Clock_Ip_axCmuCallbacks) @064d3f78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_DisableClockMonitor/13 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8CmuCallbackIndex/27 (Clock_Ip_au8CmuCallbackIndex) @064d3f30
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_DisableClockMonitor/13 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8ClockFeatures/26 (Clock_Ip_au8ClockFeatures) @064d3ee8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_GetPllStatus.part.0/59 (read) Clock_Ip_DisableModuleClock/15 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_GetPllStatus/11 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_DisableClockMonitor/13 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_EnableModuleClock/16 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_Command/25 (Clock_Ip_Command) @063fe380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Clock_Ip_EnableSircInStandby/21 (1073741824 (estimated locally),1.00 per call) Clock_Ip_DisableSircInStandby/20 (1073741824 (estimated locally),1.00 per call) Clock_Ip_EnableFircInStandby/19 (1073741824 (estimated locally),1.00 per call) Clock_Ip_DisableFircInStandby/18 (1073741824 (estimated locally),1.00 per call) Clock_Ip_DistributePll.part.0/60 (59055800 (estimated locally),0.35 per call) Clock_Ip_InitClock/10 (59055800 (estimated locally),0.50 per call) Clock_Ip_InitClock/10 (118111600 (estimated locally),1.00 per call) Clock_Ip_UpdateDriverContext/6 (118111600 (estimated locally),1.00 per call) 
  Calls: 
Clock_Ip_TimeoutExpired/24 (Clock_Ip_TimeoutExpired) @063fea80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/58 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_StartTimeout/23 (Clock_Ip_StartTimeout) @063fe7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_MicrosToTicks/57 (1073741824 (estimated locally),1.00 per call) OsIf_GetCounter/56 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_ReportClockErrors/22 (Clock_Ip_ReportClockErrors) @063fe540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pfkNotificationsCallback/4 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
Clock_Ip_EnableSircInStandby/21 (Clock_Ip_EnableSircInStandby) @063fe2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: EnableSircInStandbyMode/55 (1073741824 (estimated locally),1.00 per call) Clock_Ip_Command/25 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_DisableSircInStandby/20 (Clock_Ip_DisableSircInStandby) @063fe000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: DisableSircInStandbyMode/54 (1073741824 (estimated locally),1.00 per call) Clock_Ip_Command/25 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_EnableFircInStandby/19 (Clock_Ip_EnableFircInStandby) @063f8b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: EnableFircInStandbyMode/53 (1073741824 (estimated locally),1.00 per call) Clock_Ip_Command/25 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_DisableFircInStandby/18 (Clock_Ip_DisableFircInStandby) @063f8620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: DisableFircInStandbyMode/52 (1073741824 (estimated locally),1.00 per call) Clock_Ip_Command/25 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_GetClockFrequency/17 (Clock_Ip_GetClockFrequency) @063f80e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Clock_Ip_GetFreq/51 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_EnableModuleClock/16 (Clock_Ip_EnableModuleClock) @063f8d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8GateCallbackIndex/46 (read) Clock_Ip_axGateCallbacks/47 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
Clock_Ip_DisableModuleClock/15 (Clock_Ip_DisableModuleClock) @063f8a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8GateCallbackIndex/46 (read) Clock_Ip_axGateCallbacks/47 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
Clock_Ip_InstallNotificationsCallback/14 (Clock_Ip_InstallNotificationsCallback) @063f87e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pfkNotificationsCallback/4 (write) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Clock_Ip_DisableClockMonitor/13 (Clock_Ip_DisableClockMonitor) @063f8540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8CmuCallbackIndex/27 (read) Clock_Ip_axCmuCallbacks/28 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(1073741824 (estimated locally),1.00 per call)  Num speculative call targets: 0
Clock_Ip_DistributePll/12 (Clock_Ip_DistributePll) @063f82a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: count:168730857 (estimated locally) body optimize_size
  Called by: Clock_Ip_Init/9 (116930483 (estimated locally),0.11 per call) 
  Calls: Clock_Ip_DistributePll.part.0/60 (inlined) (118111600 (estimated locally),0.70 per call) 
Clock_Ip_GetPllStatus/11 (Clock_Ip_GetPllStatus) @063f8000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_aeHwPllName/49 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8PllCallbackIndex/39 (read) Clock_Ip_axPllCallbacks/40 (read) DriverContext/1 (read) 
  Referring: 
  Availability: available
  Function flags: count:114863530 (estimated locally) body optimize_size
  Called by: Clock_Ip_Init/9 (354334800 (estimated locally),0.33 per call) 
  Calls: Clock_Ip_GetPllStatus.part.0/59 (inlined) (57431766 (estimated locally),0.50 per call) 
   Indirect call(1014686026 (estimated locally),8.83 per call)  Num speculative call targets: 0
Clock_Ip_InitClock/10 (Clock_Ip_InitClock) @0637dc40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Clock_Ip_pxConfig/2 (write) Clock_Ip_pxConfig/2 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8CmuCallbackIndex/27 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8IrcoscCallbackIndex/29 (read) Clock_Ip_axIntOscCallbacks/30 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8XoscCallbackIndex/31 (read) Clock_Ip_axExtOscCallbacks/32 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8PcfsCallbackIndex/33 (read) Clock_Ip_axPcfsCallbacks/34 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8DividerTriggerCallbackIndex/35 (read) Clock_Ip_axDividerTriggerCallbacks/36 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8DividerCallbackIndex/37 (read) Clock_Ip_axDividerCallbacks/38 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8DividerTriggerCallbackIndex/35 (read) Clock_Ip_axDividerTriggerCallbacks/36 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8PllCallbackIndex/39 (read) Clock_Ip_axPllCallbacks/40 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8CmuCallbackIndex/27 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8XoscCallbackIndex/31 (read) Clock_Ip_axExtOscCallbacks/32 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8PllCallbackIndex/39 (read) Clock_Ip_axPllCallbacks/40 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8FractionalDividerCallbackIndex/41 (read) Clock_Ip_axFracDivCallbacks/42 (read) DriverContext/1 (write) DriverContext/1 (write) DriverContext/1 (write) DriverContext/1 (write) Clock_Ip_aeSourceTypeClockName/43 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8SelectorCallbackIndex/44 (read) Clock_Ip_axSelectorCallbacks/45 (read) DriverContext/1 (write) DriverContext/1 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8GateCallbackIndex/46 (read) Clock_Ip_axGateCallbacks/47 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8CmuCallbackIndex/27 (read) Clock_Ip_axCmuCallbacks/28 (read) 
  Referring: 
  Availability: available
  Function flags: count:118111600 (estimated locally) body optimize_size
  Called by: Clock_Ip_Init/9 (1073741824 (estimated locally),1.00 per call) 
  Calls: Clock_Ip_Command/25 (59055800 (estimated locally),0.50 per call) Clock_Ip_UpdateDriverContext/6 (inlined) (118111600 (estimated locally),1.00 per call) Clock_Ip_ResetClockConfiguration/8 (inlined) (118111600 (estimated locally),1.00 per call) Clock_Ip_Command/25 (118111600 (estimated locally),1.00 per call) 
   Indirect call(477815112 (estimated locally),4.05 per call)  Num speculative call targets: 0
   Indirect call(477815112 (estimated locally),4.05 per call)  Num speculative call targets: 0
   Indirect call(630715945 (estimated locally),5.34 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(668941161 (estimated locally),5.66 per call)  Num speculative call targets: 0
Clock_Ip_Init/9 (Clock_Ip_Init) @0637d700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: DriverContext/1 (read) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Clock_Ip_DistributePll/12 (116930483 (estimated locally),0.11 per call) Clock_Ip_GetPllStatus/11 (354334800 (estimated locally),0.33 per call) Clock_Ip_InitClock/10 (1073741824 (estimated locally),1.00 per call) 
Clock_Ip_ResetClockConfiguration/8 (Clock_Ip_ResetClockConfiguration) @0637de00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8SelectorCallbackIndex/44 (read) Clock_Ip_axSelectorCallbacks/45 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8FractionalDividerCallbackIndex/41 (read) Clock_Ip_axFracDivCallbacks/42 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8PllCallbackIndex/39 (read) Clock_Ip_axPllCallbacks/40 (read) Clock_Ip_au8ClockFeatures/26 (read) Clock_Ip_au8XoscCallbackIndex/31 (read) Clock_Ip_axExtOscCallbacks/32 (read) 
  Referring: 
  Function Clock_Ip_ResetClockConfiguration/8 is inline copy in Clock_Ip_InitClock/10
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: Clock_Ip_InitClock/10 (inlined) (118111600 (estimated locally),1.00 per call) 
  Calls: 
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
   Indirect call(955630225 (estimated locally),8.09 per call)  Num speculative call targets: 0
Clock_Ip_CallEmptyCallbacks/7 (Clock_Ip_CallEmptyCallbacks) @0637db60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: FunctionWasCalled/0 (read) FunctionWasCalled/0 (write) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_axDividerCallbacks/38 (read) Clock_Ip_axDividerTriggerCallbacks/36 (read) Clock_Ip_axExtOscCallbacks/32 (read) Clock_Ip_axFracDivCallbacks/42 (read) Clock_Ip_axFracDivCallbacks/42 (read) Clock_Ip_axGateCallbacks/47 (read) Clock_Ip_axGateCallbacks/47 (read) Clock_Ip_axIntOscCallbacks/30 (read) Clock_Ip_axPllCallbacks/40 (read) Clock_Ip_axPllCallbacks/40 (read) Clock_Ip_axSelectorCallbacks/45 (read) Clock_Ip_axPcfsCallbacks/34 (read) 
  Referring: 
  Function Clock_Ip_CallEmptyCallbacks/7 is inline copy in Clock_Ip_InitClock/10
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: Clock_Ip_UpdateDriverContext/6 (inlined) (118111600 (estimated locally),1.00 per call) 
  Calls: 
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
   Indirect call(59055800 (estimated locally),0.50 per call)  Num speculative call targets: 0
Clock_Ip_UpdateDriverContext/6 (Clock_Ip_UpdateDriverContext) @0637d8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_pxConfig/2 (read) Clock_Ip_FreqIds/3 (write) 
  Referring: 
  Function Clock_Ip_UpdateDriverContext/6 is inline copy in Clock_Ip_InitClock/10
  Availability: local
  Function flags: count:118111600 (estimated locally) body local optimize_size
  Called by: Clock_Ip_InitClock/10 (inlined) (118111600 (estimated locally),1.00 per call) 
  Calls: Clock_Ip_CallEmptyCallbacks/7 (inlined) (118111600 (estimated locally),1.00 per call) Clock_Ip_SetExternalSignalFrequency/48 (955630225 (estimated locally),8.09 per call) Clock_Ip_Command/25 (118111600 (estimated locally),1.00 per call) 
Clock_Ip_NotificatonsEmptyCallback/5 (Clock_Ip_NotificatonsEmptyCallback) @0637d620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_pfkNotificationsCallback/4 (addr) 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Clock_Ip_pfkNotificationsCallback/4 (Clock_Ip_pfkNotificationsCallback) @06378e58
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: Clock_Ip_NotificatonsEmptyCallback/5 (addr) 
  Referring: Clock_Ip_InstallNotificationsCallback/14 (write) Clock_Ip_ReportClockErrors/22 (read) 
  Availability: available
  Varpool flags: initialized
Clock_Ip_FreqIds/3 (Clock_Ip_FreqIds) @06378900
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Clock_Ip_UpdateDriverContext/6 (write) 
  Availability: available
  Varpool flags:
Clock_Ip_pxConfig/2 (Clock_Ip_pxConfig) @063788b8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Clock_Ip_DisableFircInStandby/18 (read) Clock_Ip_DisableSircInStandby/20 (read) Clock_Ip_EnableFircInStandby/19 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_InitClock/10 (write) Clock_Ip_UpdateDriverContext/6 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_EnableSircInStandby/21 (read) 
  Availability: available
  Varpool flags:
DriverContext/1 (DriverContext) @06378870
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_GetPllStatus/11 (read) Clock_Ip_InitClock/10 (write) Clock_Ip_DistributePll.part.0/60 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (write) Clock_Ip_InitClock/10 (write) Clock_Ip_InitClock/10 (write) Clock_Ip_InitClock/10 (write) Clock_Ip_GetPllStatus.part.0/59 (read) Clock_Ip_Init/9 (read) 
  Availability: available
  Varpool flags:
FunctionWasCalled/0 (FunctionWasCalled) @063787e0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_CallEmptyCallbacks/7 (write) 
  Availability: available
  Varpool flags:

;; Function Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificatonsEmptyCallback, funcdef_no=0, decl_uid=6851, cgraph_uid=1, symbol_order=5)

Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificationType Notification, Clock_Ip_NameType ClockName)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}



;; Function Clock_Ip_InitClock (Clock_Ip_InitClock, funcdef_no=5, decl_uid=6523, cgraph_uid=6, symbol_order=10)


Symbols to be put in SSA form
{ D.7070 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 80
Number of blocks to update: 79 ( 99%)


Merging blocks 5 and 55
Removing basic block 10
Removing basic block 42
Removing basic block 43
Removing basic block 44
Removing basic block 45
Removing basic block 46
Removing basic block 47
Removing basic block 48
Removing basic block 49
Removing basic block 50
Removing basic block 51
Removing basic block 52
Removing basic block 53
Removing basic block 54
Removing basic block 67
Removing basic block 68
Removing basic block 72
Removing basic block 75
Removing basic block 76
;; 22 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
;;
;; Loop 15
;;  header 57, latch 56
;;  depth 1, outer 0
;;  nodes: 57 56
;;
;; Loop 14
;;  header 55, latch 54
;;  depth 1, outer 0
;;  nodes: 55 54
;;
;; Loop 13
;;  header 52, latch 51
;;  depth 1, outer 0
;;  nodes: 52 51 49 50 48
;;
;; Loop 12
;;  header 46, latch 45
;;  depth 1, outer 0
;;  nodes: 46 45
;;
;; Loop 11
;;  header 44, latch 43
;;  depth 1, outer 0
;;  nodes: 44 43
;;
;; Loop 10
;;  header 42, latch 41
;;  depth 1, outer 0
;;  nodes: 42 41
;;
;; Loop 9
;;  header 40, latch 39
;;  depth 1, outer 0
;;  nodes: 40 39
;;
;; Loop 8
;;  header 38, latch 37
;;  depth 1, outer 0
;;  nodes: 38 37
;;
;; Loop 7
;;  header 36, latch 35
;;  depth 1, outer 0
;;  nodes: 36 35
;;
;; Loop 6
;;  header 34, latch 33
;;  depth 1, outer 0
;;  nodes: 34 33
;;
;; Loop 5
;;  header 32, latch 31
;;  depth 1, outer 0
;;  nodes: 32 31
;;
;; Loop 4
;;  header 30, latch 29
;;  depth 1, outer 0
;;  nodes: 30 29
;;
;; Loop 20
;;  header 28, latch 27
;;  depth 1, outer 0
;;  nodes: 28 27
;;
;; Loop 21
;;  header 23, latch 22
;;  depth 1, outer 0
;;  nodes: 23 22
;;
;; Loop 3
;;  header 20, latch 19
;;  depth 1, outer 0
;;  nodes: 20 19
;;
;; Loop 2
;;  header 18, latch 17
;;  depth 1, outer 0
;;  nodes: 18 17
;;
;; Loop 16
;;  header 16, latch 15
;;  depth 1, outer 0
;;  nodes: 16 15
;;
;; Loop 17
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12
;;
;; Loop 18
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9
;;
;; Loop 19
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 5 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 9 11 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 12 14 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 15 18 }
;; 17 succs { 18 }
;; 18 succs { 17 20 }
;; 19 succs { 20 }
;; 20 succs { 19 21 }
;; 21 succs { 23 }
;; 22 succs { 23 }
;; 23 succs { 22 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 28 }
;; 27 succs { 28 }
;; 28 succs { 27 30 }
;; 29 succs { 30 }
;; 30 succs { 29 32 }
;; 31 succs { 32 }
;; 32 succs { 31 34 }
;; 33 succs { 34 }
;; 34 succs { 33 36 }
;; 35 succs { 36 }
;; 36 succs { 35 38 }
;; 37 succs { 38 }
;; 38 succs { 37 40 }
;; 39 succs { 40 }
;; 40 succs { 39 42 }
;; 41 succs { 42 }
;; 42 succs { 41 44 }
;; 43 succs { 44 }
;; 44 succs { 43 46 }
;; 45 succs { 46 }
;; 46 succs { 45 47 }
;; 47 succs { 52 }
;; 48 succs { 49 50 }
;; 49 succs { 51 }
;; 50 succs { 51 }
;; 51 succs { 52 }
;; 52 succs { 48 53 }
;; 53 succs { 55 59 }
;; 54 succs { 55 }
;; 55 succs { 54 57 }
;; 56 succs { 57 }
;; 57 succs { 56 58 }
;; 58 succs { 59 }
;; 59 succs { 1 }
cyclic probability of bb 4 is 0.890000; turning freq 0.700000 to 6.363636
cyclic probability of bb 7 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 10 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 13 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 16 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 18 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 20 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 23 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 28 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 30 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 32 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 34 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 36 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 38 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 40 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 42 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 44 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 46 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 52 is 0.890000; turning freq 1.000000 to 9.090909
cyclic probability of bb 55 is 0.890000; turning freq 0.500000 to 4.545455
cyclic probability of bb 57 is 0.890000; turning freq 0.500000 to 4.545455
Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  uint8 Index;
  uint32 CallbackIndex;
  uint32 Index;
  uint32 Index;
  uint32 CallbackIndex;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.0_1;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _2;
  <unnamed type> _3;
  int _4;
  unsigned char _5;
  int _6;
  unsigned char _7;
  void (*<T714>) (const struct Clock_Ip_CmuConfigType *) _8;
  const struct Clock_Ip_CmuConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  const struct Clock_Ip_IrcoscConfigType[<unknown>] * _12;
  <unnamed type> _13;
  int _14;
  unsigned char _15;
  int _16;
  unsigned char _17;
  void (*<T6ab>) (const struct Clock_Ip_IrcoscConfigType *) _18;
  const struct Clock_Ip_IrcoscConfigType * _19;
  unsigned char _20;
  long unsigned int _21;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _22;
  <unnamed type> _23;
  int _24;
  unsigned char _25;
  int _26;
  unsigned char _27;
  void (*<T6b8>) (const struct Clock_Ip_XoscConfigType *) _28;
  const struct Clock_Ip_XoscConfigType * _29;
  unsigned char _30;
  long unsigned int _31;
  const struct Clock_Ip_PcfsConfigType[<unknown>] * _32;
  <unnamed type> _33;
  int _34;
  unsigned char _35;
  int _36;
  unsigned char _37;
  void (*<T71f>) (const struct Clock_Ip_PcfsConfigType *, uint32) _38;
  const struct Clock_Ip_PcfsConfigType * _39;
  unsigned char _40;
  long unsigned int _41;
  const struct Clock_Ip_DividerTriggerConfigType[<unknown>] * _42;
  <unnamed type> _43;
  int _44;
  unsigned char _45;
  int _46;
  unsigned char _47;
  void (*<T6cd>) (const struct Clock_Ip_DividerTriggerConfigType *) _48;
  const struct Clock_Ip_DividerTriggerConfigType * _49;
  unsigned char _50;
  long unsigned int _51;
  const struct Clock_Ip_DividerConfigType[<unknown>] * _52;
  <unnamed type> _53;
  int _54;
  unsigned char _55;
  int _56;
  unsigned char _57;
  void (*<T6c4>) (const struct Clock_Ip_DividerConfigType *) _58;
  const struct Clock_Ip_DividerConfigType * _59;
  unsigned char _60;
  long unsigned int _61;
  const struct Clock_Ip_DividerTriggerConfigType[<unknown>] * _62;
  <unnamed type> _63;
  int _64;
  unsigned char _65;
  int _66;
  unsigned char _67;
  void (*<T6cd>) (const struct Clock_Ip_DividerTriggerConfigType *) _68;
  const struct Clock_Ip_DividerTriggerConfigType * _69;
  unsigned char _70;
  long unsigned int _71;
  const struct Clock_Ip_PllConfigType[<unknown>] * _72;
  <unnamed type> _73;
  int _74;
  unsigned char _75;
  int _76;
  unsigned char _77;
  void (*<T6e6>) (const struct Clock_Ip_PllConfigType *) _78;
  const struct Clock_Ip_PllConfigType * _79;
  unsigned char _80;
  long unsigned int _81;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _82;
  <unnamed type> _83;
  int _84;
  unsigned char _85;
  int _86;
  unsigned char _87;
  void (*<T70f>) (const struct Clock_Ip_CmuConfigType *, uint32) _88;
  const struct Clock_Ip_CmuConfigType * _89;
  unsigned char _90;
  long unsigned int _91;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _92;
  <unnamed type> _93;
  int _94;
  unsigned char _95;
  int _96;
  unsigned char _97;
  void (*<T6b8>) (const struct Clock_Ip_XoscConfigType *) _98;
  const struct Clock_Ip_XoscConfigType * _99;
  unsigned char _100;
  long unsigned int _101;
  const struct Clock_Ip_PllConfigType[<unknown>] * _102;
  <unnamed type> _103;
  int _104;
  unsigned char _105;
  int _106;
  unsigned char _107;
  void (*<T6e6>) (const struct Clock_Ip_PllConfigType *) _108;
  const struct Clock_Ip_PllConfigType * _109;
  unsigned char _110;
  long unsigned int _111;
  const struct Clock_Ip_FracDivConfigType[<unknown>] * _112;
  <unnamed type> _113;
  int _114;
  unsigned char _115;
  int _116;
  unsigned char _117;
  void (*<T6d7>) (const struct Clock_Ip_FracDivConfigType *) _118;
  const struct Clock_Ip_FracDivConfigType * _119;
  unsigned char _120;
  long unsigned int _121;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _122;
  <unnamed type> _123;
  int _124;
  <unnamed type> _125;
  <unnamed type> _126;
  int _127;
  unsigned char _128;
  int _129;
  unsigned char _130;
  void (*<T6f7>) (const struct Clock_Ip_SelectorConfigType *) _131;
  const struct Clock_Ip_SelectorConfigType * _132;
  unsigned char _133;
  long unsigned int _134;
  _Bool _135;
  const struct Clock_Ip_GateConfigType[<unknown>] * _136;
  <unnamed type> _137;
  int _138;
  unsigned char _139;
  int _140;
  unsigned char _141;
  void (*<T701>) (const struct Clock_Ip_GateConfigType *) _142;
  const struct Clock_Ip_GateConfigType * _143;
  unsigned char _144;
  long unsigned int _145;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _146;
  <unnamed type> _147;
  int _148;
  unsigned char _149;
  int _150;
  unsigned char _151;
  void (*<T714>) (const struct Clock_Ip_CmuConfigType *) _152;
  const struct Clock_Ip_CmuConfigType * _153;
  unsigned char _154;
  long unsigned int _155;
  unsigned char _246;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _248;
  long unsigned int _250;
  <unnamed type> _251;
  int _252;
  unsigned char _253;
  int _254;
  unsigned char _255;
  void (*<T6f7>) (const struct Clock_Ip_SelectorConfigType *) _257;
  const struct Clock_Ip_SelectorConfigType * _258;
  unsigned char _259;
  const struct Clock_Ip_FracDivConfigType[<unknown>] * _261;
  long unsigned int _263;
  <unnamed type> _264;
  int _265;
  unsigned char _266;
  int _267;
  unsigned char _268;
  void (*<T6d7>) (const struct Clock_Ip_FracDivConfigType *) _270;
  const struct Clock_Ip_FracDivConfigType * _271;
  unsigned char _272;
  const struct Clock_Ip_PllConfigType[<unknown>] * _274;
  long unsigned int _276;
  <unnamed type> _277;
  int _278;
  unsigned char _279;
  int _280;
  unsigned char _281;
  void (*<T6e6>) (const struct Clock_Ip_PllConfigType *) _283;
  const struct Clock_Ip_PllConfigType * _284;
  unsigned char _285;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _287;
  long unsigned int _289;
  <unnamed type> _290;
  int _291;
  unsigned char _292;
  int _293;
  unsigned char _294;
  void (*<T6b8>) (const struct Clock_Ip_XoscConfigType *) _296;
  const struct Clock_Ip_XoscConfigType * _297;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.1_298;
  const struct Clock_Ip_ExtClkConfigType[<unknown>] * _299;
  int _301;
  <unnamed type> _302;
  long unsigned int _303;
  unsigned char _305;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _306;
  int _308;
  <unnamed type> _309;
  int _310;
  unsigned char _312;
  _Bool FunctionWasCalled.4_313;
  void (*<T70f>) (const struct Clock_Ip_CmuConfigType *, uint32) _314;
  void (*<T6ae>) (Clock_Ip_NameType) _315;
  void (*<T6c4>) (const struct Clock_Ip_DividerConfigType *) _316;
  void (*<T6cd>) (const struct Clock_Ip_DividerTriggerConfigType *) _317;
  void (*<T6b8>) (const struct Clock_Ip_XoscConfigType *) _318;
  void (*<T6d7>) (const struct Clock_Ip_FracDivConfigType *) _319;
  Clock_Ip_DfsStatusType (*<T6dd>) (Clock_Ip_NameType) _320;
  void (*<T701>) (const struct Clock_Ip_GateConfigType *) _321;
  void (*<T706>) (Clock_Ip_NameType, boolean) _322;
  void (*<T6ab>) (const struct Clock_Ip_IrcoscConfigType *) _323;
  void (*<T6e6>) (const struct Clock_Ip_PllConfigType *) _324;
  Clock_Ip_PllStatusReturnType (*<T6ec>) (Clock_Ip_NameType) _325;
  void (*<T6f7>) (const struct Clock_Ip_SelectorConfigType *) _326;
  void (*<T71f>) (const struct Clock_Ip_PcfsConfigType *, uint32) _327;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig = Config_190(D);
  # DEBUG BEGIN_STMT
  Clock_Ip_Command (Config_190(D), 1);
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.0_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.0_1 != 0B)
    goto <bb 4>; [70.00%]
  else
    goto <bb 5>; [30.00%]

  <bb 3> [local count: 668941161]:
  # DEBUG BEGIN_STMT
  _2 = Config_190(D)->Cmus;
  _3 = (*_2)[Index_156].Name;
  _4 = (int) _3;
  _5 = Clock_Ip_au8ClockFeatures[_4][1];
  _6 = (int) _5;
  _7 = Clock_Ip_au8CmuCallbackIndex[_6];
  CallbackIndex_193 = (uint32) _7;
  # DEBUG CallbackIndex => CallbackIndex_193
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_axCmuCallbacks[CallbackIndex_193].Reset;
  _9 = &(*_2)[Index_156];
  _8 (_9);
  # DEBUG BEGIN_STMT
  Index_195 = Index_156 + 1;
  # DEBUG Index => Index_195

  <bb 4> [local count: 751619281]:
  # Index_156 = PHI <Index_195(3), 0(2)>
  # DEBUG Index => Index_156
  # DEBUG BEGIN_STMT
  _10 = Config_190(D)->CmusCount;
  _11 = (long unsigned int) _10;
  if (_11 > Index_156)
    goto <bb 3>; [89.00%]
  else
    goto <bb 5>; [11.00%]

  <bb 5> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => Config_190(D)
  # DEBUG INLINE_ENTRY Clock_Ip_ResetClockConfiguration
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _246 = Config_190(D)->SelectorsCount;
  Index_247 = (uint32) _246;
  # DEBUG Index => Index_247
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _248 = Config_190(D)->Selectors;
  _250 = Index_249 + 4294967295;
  _251 = (*_248)[_250].Name;
  _252 = (int) _251;
  _253 = Clock_Ip_au8ClockFeatures[_252][1];
  _254 = (int) _253;
  _255 = Clock_Ip_au8SelectorCallbackIndex[_254];
  CallbackIndex_256 = (uint32) _255;
  # DEBUG CallbackIndex => CallbackIndex_256
  # DEBUG BEGIN_STMT
  _257 = Clock_Ip_axSelectorCallbacks[CallbackIndex_256].Reset;
  _258 = &(*_248)[_250];
  _257 (_258);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _250

  <bb 7> [local count: 1073741824]:
  # Index_249 = PHI <Index_247(5), _250(6)>
  # DEBUG Index => Index_249
  # DEBUG BEGIN_STMT
  if (Index_249 != 0)
    goto <bb 6>; [89.00%]
  else
    goto <bb 8>; [11.00%]

  <bb 8> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _259 = Config_190(D)->FracDivsCount;
  Index_260 = (uint32) _259;
  # DEBUG Index => Index_260
  goto <bb 10>; [100.00%]

  <bb 9> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _261 = Config_190(D)->FracDivs;
  _263 = Index_262 + 4294967295;
  _264 = (*_261)[_263].Name;
  _265 = (int) _264;
  _266 = Clock_Ip_au8ClockFeatures[_265][1];
  _267 = (int) _266;
  _268 = Clock_Ip_au8FractionalDividerCallbackIndex[_267];
  CallbackIndex_269 = (uint32) _268;
  # DEBUG CallbackIndex => CallbackIndex_269
  # DEBUG BEGIN_STMT
  _270 = Clock_Ip_axFracDivCallbacks[CallbackIndex_269].Reset;
  _271 = &(*_261)[_263];
  _270 (_271);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _263

  <bb 10> [local count: 1073741824]:
  # Index_262 = PHI <Index_260(8), _263(9)>
  # DEBUG Index => Index_262
  # DEBUG BEGIN_STMT
  if (Index_262 != 0)
    goto <bb 9>; [89.00%]
  else
    goto <bb 11>; [11.00%]

  <bb 11> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _272 = Config_190(D)->PllsCount;
  Index_273 = (uint32) _272;
  # DEBUG Index => Index_273
  goto <bb 13>; [100.00%]

  <bb 12> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _274 = Config_190(D)->Plls;
  _276 = Index_275 + 4294967295;
  _277 = (*_274)[_276].Name;
  _278 = (int) _277;
  _279 = Clock_Ip_au8ClockFeatures[_278][1];
  _280 = (int) _279;
  _281 = Clock_Ip_au8PllCallbackIndex[_280];
  CallbackIndex_282 = (uint32) _281;
  # DEBUG CallbackIndex => CallbackIndex_282
  # DEBUG BEGIN_STMT
  _283 = Clock_Ip_axPllCallbacks[CallbackIndex_282].Reset;
  _284 = &(*_274)[_276];
  _283 (_284);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _276

  <bb 13> [local count: 1073741824]:
  # Index_275 = PHI <Index_273(11), _276(12)>
  # DEBUG Index => Index_275
  # DEBUG BEGIN_STMT
  if (Index_275 != 0)
    goto <bb 12>; [89.00%]
  else
    goto <bb 14>; [11.00%]

  <bb 14> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _285 = Config_190(D)->XoscsCount;
  Index_286 = (uint32) _285;
  # DEBUG Index => Index_286
  goto <bb 16>; [100.00%]

  <bb 15> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _287 = Config_190(D)->Xoscs;
  _289 = Index_288 + 4294967295;
  _290 = (*_287)[_289].Name;
  _291 = (int) _290;
  _292 = Clock_Ip_au8ClockFeatures[_291][1];
  _293 = (int) _292;
  _294 = Clock_Ip_au8XoscCallbackIndex[_293];
  CallbackIndex_295 = (uint32) _294;
  # DEBUG CallbackIndex => CallbackIndex_295
  # DEBUG BEGIN_STMT
  _296 = Clock_Ip_axExtOscCallbacks[CallbackIndex_295].Reset;
  _297 = &(*_287)[_289];
  _296 (_297);
  # DEBUG BEGIN_STMT
  # DEBUG Index => _289

  <bb 16> [local count: 1073741824]:
  # Index_288 = PHI <Index_286(14), _289(15)>
  # DEBUG Index => Index_288
  # DEBUG BEGIN_STMT
  if (Index_288 != 0)
    goto <bb 15>; [89.00%]
  else
    goto <bb 18>; [11.00%]

  <bb 17> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _12 = Config_190(D)->Ircoscs;
  _13 = (*_12)[Index_157].Name;
  _14 = (int) _13;
  _15 = Clock_Ip_au8ClockFeatures[_14][1];
  _16 = (int) _15;
  _17 = Clock_Ip_au8IrcoscCallbackIndex[_16];
  CallbackIndex_243 = (uint32) _17;
  # DEBUG CallbackIndex => CallbackIndex_243
  # DEBUG BEGIN_STMT
  _18 = Clock_Ip_axIntOscCallbacks[CallbackIndex_243].Set;
  _19 = &(*_12)[Index_157];
  _18 (_19);
  # DEBUG BEGIN_STMT
  Index_245 = Index_157 + 1;
  # DEBUG Index => Index_245

  <bb 18> [local count: 1073741824]:
  # Index_157 = PHI <0(16), Index_245(17)>
  # DEBUG Config => NULL
  # DEBUG Index => NULL
  # DEBUG CallbackIndex => NULL
  # DEBUG Index => NULL
  # DEBUG Index => Index_157
  # DEBUG BEGIN_STMT
  _20 = Config_190(D)->IrcoscsCount;
  _21 = (long unsigned int) _20;
  if (_21 > Index_157)
    goto <bb 17>; [89.00%]
  else
    goto <bb 20>; [11.00%]

  <bb 19> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _22 = Config_190(D)->Xoscs;
  _23 = (*_22)[Index_158].Name;
  _24 = (int) _23;
  _25 = Clock_Ip_au8ClockFeatures[_24][1];
  _26 = (int) _25;
  _27 = Clock_Ip_au8XoscCallbackIndex[_26];
  CallbackIndex_240 = (uint32) _27;
  # DEBUG CallbackIndex => CallbackIndex_240
  # DEBUG BEGIN_STMT
  _28 = Clock_Ip_axExtOscCallbacks[CallbackIndex_240].Set;
  _29 = &(*_22)[Index_158];
  _28 (_29);
  # DEBUG BEGIN_STMT
  Index_242 = Index_158 + 1;
  # DEBUG Index => Index_242

  <bb 20> [local count: 1073741824]:
  # Index_158 = PHI <Index_242(19), 0(18)>
  # DEBUG Index => Index_158
  # DEBUG BEGIN_STMT
  _30 = Config_190(D)->XoscsCount;
  _31 = (long unsigned int) _30;
  if (_31 > Index_158)
    goto <bb 19>; [89.00%]
  else
    goto <bb 21>; [11.00%]

  <bb 21> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG Config => Config_190(D)
  # DEBUG INLINE_ENTRY Clock_Ip_UpdateDriverContext
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.1_298 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.1_298, 2);
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 23>; [100.00%]

  <bb 22> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _299 = Config_190(D)->ExtClks;
  _301 = (int) Index_300;
  _302 = (*_299)[_301].Name;
  _303 = (*_299)[_301].Value;
  Clock_Ip_SetExternalSignalFrequency (_302, _303);
  # DEBUG BEGIN_STMT
  Index_304 = Index_300 + 1;
  # DEBUG Index => Index_304

  <bb 23> [local count: 1073741824]:
  # Index_300 = PHI <0(21), Index_304(22)>
  # DEBUG Index => Index_300
  # DEBUG BEGIN_STMT
  _305 = Config_190(D)->ExtClksCount;
  if (Index_300 < _305)
    goto <bb 22>; [89.00%]
  else
    goto <bb 24>; [11.00%]

  <bb 24> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG INLINE_ENTRY Clock_Ip_CallEmptyCallbacks
  # DEBUG BEGIN_STMT
  FunctionWasCalled.4_313 = FunctionWasCalled;
  if (FunctionWasCalled.4_313 != 0)
    goto <bb 26>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 25> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  FunctionWasCalled = 1;
  # DEBUG BEGIN_STMT
  _314 = Clock_Ip_axCmuCallbacks[0].Set;
  _314 (0B, 0);
  # DEBUG BEGIN_STMT
  _315 = Clock_Ip_axCmuCallbacks[0].Disable;
  _315 (157);
  # DEBUG BEGIN_STMT
  _316 = Clock_Ip_axDividerCallbacks[0].Set;
  _316 (0B);
  # DEBUG BEGIN_STMT
  _317 = Clock_Ip_axDividerTriggerCallbacks[0].Configure;
  _317 (0B);
  # DEBUG BEGIN_STMT
  _318 = Clock_Ip_axExtOscCallbacks[0].Reset;
  _318 (0B);
  # DEBUG BEGIN_STMT
  _319 = Clock_Ip_axFracDivCallbacks[0].Set;
  _319 (0B);
  # DEBUG BEGIN_STMT
  _320 = Clock_Ip_axFracDivCallbacks[0].Complete;
  _320 (157);
  # DEBUG BEGIN_STMT
  _321 = Clock_Ip_axGateCallbacks[0].Set;
  _321 (0B);
  # DEBUG BEGIN_STMT
  _322 = Clock_Ip_axGateCallbacks[0].Update;
  _322 (157, 0);
  # DEBUG BEGIN_STMT
  _323 = Clock_Ip_axIntOscCallbacks[0].Set;
  _323 (0B);
  # DEBUG BEGIN_STMT
  _324 = Clock_Ip_axPllCallbacks[0].Set;
  _324 (0B);
  # DEBUG BEGIN_STMT
  _325 = Clock_Ip_axPllCallbacks[0].Complete;
  _325 (157);
  # DEBUG BEGIN_STMT
  _326 = Clock_Ip_axSelectorCallbacks[0].Set;
  _326 (0B);
  # DEBUG BEGIN_STMT
  _327 = Clock_Ip_axPcfsCallbacks[0].Set;
  _327 (0B, 0);

  <bb 26> [local count: 118111600]:
  goto <bb 28>; [100.00%]

  <bb 27> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _306 = Config_190(D)->ConfiguredFrequencies;
  _308 = (int) Index_307;
  _309 = (*_306)[_308].Name;
  _310 = (int) _309;
  Clock_Ip_FreqIds[_310] = Index_307;
  # DEBUG BEGIN_STMT
  Index_311 = Index_307 + 1;
  # DEBUG Index => Index_311

  <bb 28> [local count: 1073741824]:
  # Index_307 = PHI <1(26), Index_311(27)>
  # DEBUG Index => NULL
  # DEBUG Index => Index_307
  # DEBUG BEGIN_STMT
  _312 = Config_190(D)->ConfigureFrequenciesCount;
  if (Index_307 < _312)
    goto <bb 27>; [89.00%]
  else
    goto <bb 30>; [11.00%]

  <bb 29> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _32 = Config_190(D)->Pcfs;
  _33 = (*_32)[Index_159].Name;
  _34 = (int) _33;
  _35 = Clock_Ip_au8ClockFeatures[_34][1];
  _36 = (int) _35;
  _37 = Clock_Ip_au8PcfsCallbackIndex[_36];
  CallbackIndex_237 = (uint32) _37;
  # DEBUG CallbackIndex => CallbackIndex_237
  # DEBUG BEGIN_STMT
  _38 = Clock_Ip_axPcfsCallbacks[CallbackIndex_237].Set;
  _39 = &(*_32)[Index_159];
  _38 (_39, Index_159);
  # DEBUG BEGIN_STMT
  Index_239 = Index_159 + 1;
  # DEBUG Index => Index_239

  <bb 30> [local count: 1073741824]:
  # Index_159 = PHI <0(28), Index_239(29)>
  # DEBUG Config => NULL
  # DEBUG Index => NULL
  # DEBUG Index => NULL
  # DEBUG Index => Index_159
  # DEBUG BEGIN_STMT
  _40 = Config_190(D)->PcfsCount;
  _41 = (long unsigned int) _40;
  if (_41 > Index_159)
    goto <bb 29>; [89.00%]
  else
    goto <bb 32>; [11.00%]

  <bb 31> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _42 = Config_190(D)->DividerTriggers;
  _43 = (*_42)[Index_160].Name;
  _44 = (int) _43;
  _45 = Clock_Ip_au8ClockFeatures[_44][1];
  _46 = (int) _45;
  _47 = Clock_Ip_au8DividerTriggerCallbackIndex[_46];
  CallbackIndex_234 = (uint32) _47;
  # DEBUG CallbackIndex => CallbackIndex_234
  # DEBUG BEGIN_STMT
  _48 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_234].Configure;
  _49 = &(*_42)[Index_160];
  _48 (_49);
  # DEBUG BEGIN_STMT
  Index_236 = Index_160 + 1;
  # DEBUG Index => Index_236

  <bb 32> [local count: 1073741824]:
  # Index_160 = PHI <Index_236(31), 0(30)>
  # DEBUG Index => Index_160
  # DEBUG BEGIN_STMT
  _50 = Config_190(D)->DividerTriggersCount;
  _51 = (long unsigned int) _50;
  if (_51 > Index_160)
    goto <bb 31>; [89.00%]
  else
    goto <bb 34>; [11.00%]

  <bb 33> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _52 = Config_190(D)->Dividers;
  _53 = (*_52)[Index_161].Name;
  _54 = (int) _53;
  _55 = Clock_Ip_au8ClockFeatures[_54][1];
  _56 = (int) _55;
  _57 = Clock_Ip_au8DividerCallbackIndex[_56];
  CallbackIndex_231 = (uint32) _57;
  # DEBUG CallbackIndex => CallbackIndex_231
  # DEBUG BEGIN_STMT
  _58 = Clock_Ip_axDividerCallbacks[CallbackIndex_231].Set;
  _59 = &(*_52)[Index_161];
  _58 (_59);
  # DEBUG BEGIN_STMT
  Index_233 = Index_161 + 1;
  # DEBUG Index => Index_233

  <bb 34> [local count: 1073741824]:
  # Index_161 = PHI <Index_233(33), 0(32)>
  # DEBUG Index => Index_161
  # DEBUG BEGIN_STMT
  _60 = Config_190(D)->DividersCount;
  _61 = (long unsigned int) _60;
  if (_61 > Index_161)
    goto <bb 33>; [89.00%]
  else
    goto <bb 36>; [11.00%]

  <bb 35> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _62 = Config_190(D)->DividerTriggers;
  _63 = (*_62)[Index_162].Name;
  _64 = (int) _63;
  _65 = Clock_Ip_au8ClockFeatures[_64][1];
  _66 = (int) _65;
  _67 = Clock_Ip_au8DividerTriggerCallbackIndex[_66];
  CallbackIndex_228 = (uint32) _67;
  # DEBUG CallbackIndex => CallbackIndex_228
  # DEBUG BEGIN_STMT
  _68 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_228].TriggerUpdate;
  _69 = &(*_62)[Index_162];
  _68 (_69);
  # DEBUG BEGIN_STMT
  Index_230 = Index_162 + 1;
  # DEBUG Index => Index_230

  <bb 36> [local count: 1073741824]:
  # Index_162 = PHI <Index_230(35), 0(34)>
  # DEBUG Index => Index_162
  # DEBUG BEGIN_STMT
  _70 = Config_190(D)->DividerTriggersCount;
  _71 = (long unsigned int) _70;
  if (_71 > Index_162)
    goto <bb 35>; [89.00%]
  else
    goto <bb 38>; [11.00%]

  <bb 37> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _72 = Config_190(D)->Plls;
  _73 = (*_72)[Index_163].Name;
  _74 = (int) _73;
  _75 = Clock_Ip_au8ClockFeatures[_74][1];
  _76 = (int) _75;
  _77 = Clock_Ip_au8PllCallbackIndex[_76];
  CallbackIndex_225 = (uint32) _77;
  # DEBUG CallbackIndex => CallbackIndex_225
  # DEBUG BEGIN_STMT
  _78 = Clock_Ip_axPllCallbacks[CallbackIndex_225].Set;
  _79 = &(*_72)[Index_163];
  _78 (_79);
  # DEBUG BEGIN_STMT
  Index_227 = Index_163 + 1;
  # DEBUG Index => Index_227

  <bb 38> [local count: 1073741824]:
  # Index_163 = PHI <Index_227(37), 0(36)>
  # DEBUG Index => Index_163
  # DEBUG BEGIN_STMT
  _80 = Config_190(D)->PllsCount;
  _81 = (long unsigned int) _80;
  if (_81 > Index_163)
    goto <bb 37>; [89.00%]
  else
    goto <bb 40>; [11.00%]

  <bb 39> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _82 = Config_190(D)->Cmus;
  _83 = (*_82)[Index_164].Name;
  _84 = (int) _83;
  _85 = Clock_Ip_au8ClockFeatures[_84][1];
  _86 = (int) _85;
  _87 = Clock_Ip_au8CmuCallbackIndex[_86];
  CallbackIndex_222 = (uint32) _87;
  # DEBUG CallbackIndex => CallbackIndex_222
  # DEBUG BEGIN_STMT
  _88 = Clock_Ip_axCmuCallbacks[CallbackIndex_222].Set;
  _89 = &(*_82)[Index_164];
  _88 (_89, Index_164);
  # DEBUG BEGIN_STMT
  Index_224 = Index_164 + 1;
  # DEBUG Index => Index_224

  <bb 40> [local count: 1073741824]:
  # Index_164 = PHI <Index_224(39), 0(38)>
  # DEBUG Index => Index_164
  # DEBUG BEGIN_STMT
  _90 = Config_190(D)->CmusCount;
  _91 = (long unsigned int) _90;
  if (_91 > Index_164)
    goto <bb 39>; [89.00%]
  else
    goto <bb 42>; [11.00%]

  <bb 41> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _92 = Config_190(D)->Xoscs;
  _93 = (*_92)[Index_165].Name;
  _94 = (int) _93;
  _95 = Clock_Ip_au8ClockFeatures[_94][1];
  _96 = (int) _95;
  _97 = Clock_Ip_au8XoscCallbackIndex[_96];
  CallbackIndex_219 = (uint32) _97;
  # DEBUG CallbackIndex => CallbackIndex_219
  # DEBUG BEGIN_STMT
  _98 = Clock_Ip_axExtOscCallbacks[CallbackIndex_219].Complete;
  _99 = &(*_92)[Index_165];
  _98 (_99);
  # DEBUG BEGIN_STMT
  Index_221 = Index_165 + 1;
  # DEBUG Index => Index_221

  <bb 42> [local count: 1073741824]:
  # Index_165 = PHI <Index_221(41), 0(40)>
  # DEBUG Index => Index_165
  # DEBUG BEGIN_STMT
  _100 = Config_190(D)->XoscsCount;
  _101 = (long unsigned int) _100;
  if (_101 > Index_165)
    goto <bb 41>; [89.00%]
  else
    goto <bb 44>; [11.00%]

  <bb 43> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _102 = Config_190(D)->Plls;
  _103 = (*_102)[Index_166].Name;
  _104 = (int) _103;
  _105 = Clock_Ip_au8ClockFeatures[_104][1];
  _106 = (int) _105;
  _107 = Clock_Ip_au8PllCallbackIndex[_106];
  CallbackIndex_216 = (uint32) _107;
  # DEBUG CallbackIndex => CallbackIndex_216
  # DEBUG BEGIN_STMT
  _108 = Clock_Ip_axPllCallbacks[CallbackIndex_216].Enable;
  _109 = &(*_102)[Index_166];
  _108 (_109);
  # DEBUG BEGIN_STMT
  Index_218 = Index_166 + 1;
  # DEBUG Index => Index_218

  <bb 44> [local count: 1073741824]:
  # Index_166 = PHI <Index_218(43), 0(42)>
  # DEBUG Index => Index_166
  # DEBUG BEGIN_STMT
  _110 = Config_190(D)->PllsCount;
  _111 = (long unsigned int) _110;
  if (_111 > Index_166)
    goto <bb 43>; [89.00%]
  else
    goto <bb 46>; [11.00%]

  <bb 45> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _112 = Config_190(D)->FracDivs;
  _113 = (*_112)[Index_167].Name;
  _114 = (int) _113;
  _115 = Clock_Ip_au8ClockFeatures[_114][1];
  _116 = (int) _115;
  _117 = Clock_Ip_au8FractionalDividerCallbackIndex[_116];
  CallbackIndex_213 = (uint32) _117;
  # DEBUG CallbackIndex => CallbackIndex_213
  # DEBUG BEGIN_STMT
  _118 = Clock_Ip_axFracDivCallbacks[CallbackIndex_213].Set;
  _119 = &(*_112)[Index_167];
  _118 (_119);
  # DEBUG BEGIN_STMT
  Index_215 = Index_167 + 1;
  # DEBUG Index => Index_215

  <bb 46> [local count: 1073741824]:
  # Index_167 = PHI <Index_215(45), 0(44)>
  # DEBUG Index => Index_167
  # DEBUG BEGIN_STMT
  _120 = Config_190(D)->FracDivsCount;
  _121 = (long unsigned int) _120;
  if (_121 > Index_167)
    goto <bb 45>; [89.00%]
  else
    goto <bb 47>; [11.00%]

  <bb 47> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  DriverContext.ClockTreeIsConsumingPll = 0;
  # DEBUG BEGIN_STMT
  DriverContext.WaitStatesAreSupported = 0;
  # DEBUG BEGIN_STMT
  DriverContext.HwPllsNo = 2;
  # DEBUG BEGIN_STMT
  DriverContext.HwDfsNo = 0;
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 52>; [100.00%]

  <bb 48> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _122 = Config_190(D)->Selectors;
  _123 = (*_122)[Index_168].Value;
  _124 = (int) _123;
  _125 = Clock_Ip_aeSourceTypeClockName[_124];
  if (_125 != 3)
    goto <bb 49>; [66.00%]
  else
    goto <bb 50>; [34.00%]

  <bb 49> [local count: 630715945]:
  # DEBUG BEGIN_STMT
  _126 = (*_122)[Index_168].Name;
  _127 = (int) _126;
  _128 = Clock_Ip_au8ClockFeatures[_127][1];
  _129 = (int) _128;
  _130 = Clock_Ip_au8SelectorCallbackIndex[_129];
  CallbackIndex_210 = (uint32) _130;
  # DEBUG CallbackIndex => CallbackIndex_210
  # DEBUG BEGIN_STMT
  _131 = Clock_Ip_axSelectorCallbacks[CallbackIndex_210].Set;
  _132 = &(*_122)[Index_168];
  _131 (_132);
  goto <bb 51>; [100.00%]

  <bb 50> [local count: 324914280]:
  # DEBUG BEGIN_STMT
  DriverContext.ClockTreeIsConsumingPll = 1;

  <bb 51> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  Index_212 = Index_168 + 1;
  # DEBUG Index => Index_212

  <bb 52> [local count: 1073741824]:
  # Index_168 = PHI <0(47), Index_212(51)>
  # DEBUG Index => Index_168
  # DEBUG BEGIN_STMT
  _133 = Config_190(D)->SelectorsCount;
  _134 = (long unsigned int) _133;
  if (_134 > Index_168)
    goto <bb 48>; [89.00%]
  else
    goto <bb 53>; [11.00%]

  <bb 53> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _135 = DriverContext.ClockTreeIsConsumingPll;
  if (_135 != 0)
    goto <bb 59>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 54> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _136 = Config_190(D)->Gates;
  _137 = (*_136)[Index_169].Name;
  _138 = (int) _137;
  _139 = Clock_Ip_au8ClockFeatures[_138][1];
  _140 = (int) _139;
  _141 = Clock_Ip_au8GateCallbackIndex[_140];
  CallbackIndex_206 = (uint32) _141;
  # DEBUG CallbackIndex => CallbackIndex_206
  # DEBUG BEGIN_STMT
  _142 = Clock_Ip_axGateCallbacks[CallbackIndex_206].Set;
  _143 = &(*_136)[Index_169];
  _142 (_143);
  # DEBUG BEGIN_STMT
  Index_208 = Index_169 + 1;
  # DEBUG Index => Index_208

  <bb 55> [local count: 536870913]:
  # Index_169 = PHI <Index_208(54), 0(53)>
  # DEBUG Index => Index_169
  # DEBUG BEGIN_STMT
  _144 = Config_190(D)->GatesCount;
  _145 = (long unsigned int) _144;
  if (_145 > Index_169)
    goto <bb 54>; [89.00%]
  else
    goto <bb 57>; [11.00%]

  <bb 56> [local count: 477815112]:
  # DEBUG BEGIN_STMT
  _146 = Config_190(D)->Cmus;
  _147 = (*_146)[Index_170].Name;
  _148 = (int) _147;
  _149 = Clock_Ip_au8ClockFeatures[_148][1];
  _150 = (int) _149;
  _151 = Clock_Ip_au8CmuCallbackIndex[_150];
  CallbackIndex_203 = (uint32) _151;
  # DEBUG CallbackIndex => CallbackIndex_203
  # DEBUG BEGIN_STMT
  _152 = Clock_Ip_axCmuCallbacks[CallbackIndex_203].Enable;
  _153 = &(*_146)[Index_170];
  _152 (_153);
  # DEBUG BEGIN_STMT
  Index_205 = Index_170 + 1;
  # DEBUG Index => Index_205

  <bb 57> [local count: 536870913]:
  # Index_170 = PHI <Index_205(56), 0(55)>
  # DEBUG Index => Index_170
  # DEBUG BEGIN_STMT
  _154 = Config_190(D)->CmusCount;
  _155 = (long unsigned int) _154;
  if (_155 > Index_170)
    goto <bb 56>; [89.00%]
  else
    goto <bb 58>; [11.00%]

  <bb 58> [local count: 59055800]:
  # DEBUG BEGIN_STMT
  Clock_Ip_Command (Config_190(D), 4);

  <bb 59> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  return;

}



;; Function Clock_Ip_GetPllStatus (Clock_Ip_GetPllStatus, funcdef_no=6, decl_uid=6525, cgraph_uid=7, symbol_order=11)


Symbols to be put in SSA form
{ D.7071 D.7285 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 17
Number of blocks to update: 16 ( 94%)


Merging blocks 9 and 12
Merging blocks 16 and 11
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 3
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 10
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6 4 5 3
;; 2 succs { 7 }
;; 3 succs { 8 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 3 8 }
;; 8 succs { 9 14 }
;; 9 succs { 12 }
;; 10 succs { 13 11 }
;; 11 succs { 12 }
;; 12 succs { 10 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
cyclic probability of bb 7 is 0.893025; turning freq 1.000000 to 9.347979
cyclic probability of bb 12 is 0.893025; turning freq 0.500000 to 4.673989
Clock_Ip_GetPllStatus ()
{
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_DfsStatusType DfsStatus;
  Clock_Ip_PllStatusType RetValue;
  Clock_Ip_PllStatusType D.7285;
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_PllStatusReturnType PllStatus;
  Clock_Ip_PllStatusType RetValue;
  <unnamed type> _1;
  int _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  Clock_Ip_PllStatusReturnType (*<T6ec>) (Clock_Ip_NameType) _6;
  unsigned char _8;
  long unsigned int _9;
  <unnamed type> _27;
  int _28;
  unsigned char _29;
  int _30;
  unsigned char _31;
  Clock_Ip_DfsStatusType (*<T6dd>) (Clock_Ip_NameType) _33;
  unsigned char _36;
  long unsigned int _37;

  <bb 2> [local count: 114863530]:
  # DEBUG BEGIN_STMT
  # DEBUG RetValue => 2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 7>; [100.00%]

  <bb 3> [local count: 1014686026]:
  # DEBUG BEGIN_STMT
  _1 = Clock_Ip_aeHwPllName[Index_15];
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][1];
  _4 = (int) _3;
  _5 = Clock_Ip_au8PllCallbackIndex[_4];
  CallbackIndex_21 = (uint32) _5;
  # DEBUG CallbackIndex => CallbackIndex_21
  # DEBUG BEGIN_STMT
  _6 = Clock_Ip_axPllCallbacks[CallbackIndex_21].Complete;
  PllStatus_23 = _6 (_1);
  # DEBUG PllStatus => PllStatus_23
  # DEBUG BEGIN_STMT
  if (PllStatus_23 == 1)
    goto <bb 8>; [5.50%]
  else
    goto <bb 4>; [94.50%]

  <bb 4> [local count: 958878296]:
  # DEBUG BEGIN_STMT
  if (PllStatus_23 == 2)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 326018624]:
  # DEBUG BEGIN_STMT
  # DEBUG RetValue => 0

  <bb 6> [local count: 958878296]:
  # RetValue_11 = PHI <RetValue_12(4), 0(5)>
  # DEBUG RetValue => RetValue_11
  # DEBUG BEGIN_STMT
  Index_24 = Index_15 + 1;
  # DEBUG Index => Index_24

  <bb 7> [local count: 1073741824]:
  # RetValue_12 = PHI <2(2), RetValue_11(6)>
  # Index_15 = PHI <0(2), Index_24(6)>
  # DEBUG Index => Index_15
  # DEBUG RetValue => RetValue_12
  # DEBUG BEGIN_STMT
  _8 = DriverContext.HwPllsNo;
  _9 = (long unsigned int) _8;
  if (_9 > Index_15)
    goto <bb 3>; [94.50%]
  else
    goto <bb 8>; [5.50%]

  <bb 8> [local count: 114863531]:
  # RetValue_13 = PHI <1(3), RetValue_12(7)>
  # DEBUG RetValue => RetValue_13
  # DEBUG BEGIN_STMT
  if (RetValue_13 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [local count: 57431766]:
  # Index_16 = PHI <0(8)>
  # DEBUG INLINE_ENTRY Clock_Ip_GetPllStatus
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 507343018]:
  # DEBUG BEGIN_STMT
  _27 = Clock_Ip_aeHwDfsName[Index_26];
  _28 = (int) _27;
  _29 = Clock_Ip_au8ClockFeatures[_28][1];
  _30 = (int) _29;
  _31 = Clock_Ip_au8FractionalDividerCallbackIndex[_30];
  CallbackIndex_32 = (uint32) _31;
  # DEBUG CallbackIndex => CallbackIndex_32
  # DEBUG BEGIN_STMT
  _33 = Clock_Ip_axFracDivCallbacks[CallbackIndex_32].Complete;
  DfsStatus_34 = _33 (_27);
  # DEBUG DfsStatus => DfsStatus_34
  # DEBUG BEGIN_STMT
  if (DfsStatus_34 == 1)
    goto <bb 13>; [5.50%]
  else
    goto <bb 11>; [94.50%]

  <bb 11> [local count: 479439152]:
  # DEBUG BEGIN_STMT
  Index_35 = Index_26 + 1;
  # DEBUG Index => Index_35

  <bb 12> [local count: 536870919]:
  # Index_26 = PHI <0(9), Index_35(11)>
  # DEBUG Index => Index_26
  # DEBUG BEGIN_STMT
  _36 = DriverContext.HwDfsNo;
  _37 = (long unsigned int) _36;
  if (Index_26 < _37)
    goto <bb 10>; [94.50%]
  else
    goto <bb 13>; [5.50%]

  <bb 13> [local count: 57431766]:
  # RetValue_38 = PHI <1(10), 0(12)>
  # DEBUG RetValue => RetValue_38
  # DEBUG BEGIN_STMT
  _42 = RetValue_38;
  # DEBUG RetValue => NULL
  # DEBUG PllStatus => NULL
  # DEBUG DfsStatus => NULL
  # DEBUG Index => NULL
  # DEBUG CallbackIndex => NULL
  RetValue_7 = _42;

  <bb 14> [local count: 114863532]:
  # RetValue_14 = PHI <RetValue_13(8), RetValue_7(13)>
  # DEBUG RetValue => RetValue_14
  # DEBUG BEGIN_STMT
  return RetValue_14;

}



;; Function Clock_Ip_DistributePll (Clock_Ip_DistributePll, funcdef_no=7, decl_uid=6527, cgraph_uid=8, symbol_order=12)


Symbols to be put in SSA form
{ D.7072 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 20
Number of blocks to update: 19 ( 95%)


Merging blocks 3 and 6
Removing basic block 5
Removing basic block 12
Removing basic block 15
;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 4
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11
;;
;; Loop 5
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9
;;
;; Loop 6
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6 4 5
;; 2 succs { 3 15 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 4 8 }
;; 8 succs { 10 14 }
;; 9 succs { 10 }
;; 10 succs { 9 12 }
;; 11 succs { 12 }
;; 12 succs { 11 13 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 1 }
cyclic probability of bb 7 is 0.890000; turning freq 0.700000 to 6.363636
cyclic probability of bb 10 is 0.890000; turning freq 0.350000 to 3.181818
cyclic probability of bb 12 is 0.890000; turning freq 0.350000 to 3.181818
Clock_Ip_DistributePll ()
{
  uint32 CallbackIndex;
  uint32 Index;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.5_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.9_7;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _8;
  <unnamed type> _10;
  int _11;
  <unnamed type> _12;
  <unnamed type> _13;
  int _14;
  unsigned char _15;
  int _16;
  unsigned char _17;
  void (*<T6f7>) (const struct Clock_Ip_SelectorConfigType *) _19;
  const struct Clock_Ip_SelectorConfigType * _20;
  unsigned char _22;
  long unsigned int _23;
  _Bool _24;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.12_25;
  const struct Clock_Ip_GateConfigType[<unknown>] * _26;
  <unnamed type> _28;
  int _29;
  unsigned char _30;
  int _31;
  unsigned char _32;
  void (*<T701>) (const struct Clock_Ip_GateConfigType *) _34;
  const struct Clock_Ip_GateConfigType * _35;
  unsigned char _37;
  long unsigned int _38;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.15_39;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _40;
  <unnamed type> _42;
  int _43;
  unsigned char _44;
  int _45;
  unsigned char _46;
  void (*<T714>) (const struct Clock_Ip_CmuConfigType *) _48;
  const struct Clock_Ip_CmuConfigType * _49;
  unsigned char _51;
  long unsigned int _52;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.15_53;

  <bb 2> [local count: 168730857]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.5_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.5_1 != 0B)
    goto <bb 3>; [70.00%]
  else
    goto <bb 15>; [30.00%]

  <bb 3> [local count: 118111600]:
  # Index_4 = PHI <0(2)>
  # DEBUG INLINE_ENTRY Clock_Ip_DistributePll
  goto <bb 7>; [100.00%]

  <bb 4> [local count: 955630226]:
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_pxConfig.9_7->Selectors;
  _10 = (*_8)[Index_9].Value;
  _11 = (int) _10;
  _12 = Clock_Ip_aeSourceTypeClockName[_11];
  if (_12 == 3)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 324914280]:
  # DEBUG BEGIN_STMT
  _13 = (*_8)[Index_9].Name;
  _14 = (int) _13;
  _15 = Clock_Ip_au8ClockFeatures[_14][1];
  _16 = (int) _15;
  _17 = Clock_Ip_au8SelectorCallbackIndex[_16];
  CallbackIndex_18 = (uint32) _17;
  # DEBUG CallbackIndex => CallbackIndex_18
  # DEBUG BEGIN_STMT
  _19 = Clock_Ip_axSelectorCallbacks[CallbackIndex_18].Set;
  _20 = &(*_8)[Index_9];
  _19 (_20);

  <bb 6> [local count: 955630227]:
  # DEBUG BEGIN_STMT
  Index_21 = Index_9 + 1;
  # DEBUG Index => Index_21

  <bb 7> [local count: 1073741824]:
  # Index_9 = PHI <0(3), Index_21(6)>
  # DEBUG Index => Index_9
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.9_7 = Clock_Ip_pxConfig;
  _22 = Clock_Ip_pxConfig.9_7->SelectorsCount;
  _23 = (long unsigned int) _22;
  if (Index_9 < _23)
    goto <bb 4>; [89.00%]
  else
    goto <bb 8>; [11.00%]

  <bb 8> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  _24 = DriverContext.ClockTreeIsConsumingPll;
  if (_24 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [local count: 477815113]:
  # DEBUG BEGIN_STMT
  _26 = Clock_Ip_pxConfig.12_25->Gates;
  _28 = (*_26)[Index_27].Name;
  _29 = (int) _28;
  _30 = Clock_Ip_au8ClockFeatures[_29][1];
  _31 = (int) _30;
  _32 = Clock_Ip_au8GateCallbackIndex[_31];
  CallbackIndex_33 = (uint32) _32;
  # DEBUG CallbackIndex => CallbackIndex_33
  # DEBUG BEGIN_STMT
  _34 = Clock_Ip_axGateCallbacks[CallbackIndex_33].Set;
  _35 = &(*_26)[Index_27];
  _34 (_35);
  # DEBUG BEGIN_STMT
  Index_36 = Index_27 + 1;
  # DEBUG Index => Index_36

  <bb 10> [local count: 536870913]:
  # Index_27 = PHI <0(8), Index_36(9)>
  # DEBUG Index => Index_27
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.12_25 = Clock_Ip_pxConfig;
  _37 = Clock_Ip_pxConfig.12_25->GatesCount;
  _38 = (long unsigned int) _37;
  if (Index_27 < _38)
    goto <bb 9>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 11> [local count: 477815113]:
  # DEBUG BEGIN_STMT
  _40 = Clock_Ip_pxConfig.15_39->Cmus;
  _42 = (*_40)[Index_41].Name;
  _43 = (int) _42;
  _44 = Clock_Ip_au8ClockFeatures[_43][1];
  _45 = (int) _44;
  _46 = Clock_Ip_au8CmuCallbackIndex[_45];
  CallbackIndex_47 = (uint32) _46;
  # DEBUG CallbackIndex => CallbackIndex_47
  # DEBUG BEGIN_STMT
  _48 = Clock_Ip_axCmuCallbacks[CallbackIndex_47].Enable;
  _49 = &(*_40)[Index_41];
  _48 (_49);
  # DEBUG BEGIN_STMT
  Index_50 = Index_41 + 1;
  # DEBUG Index => Index_50

  <bb 12> [local count: 536870913]:
  # Index_41 = PHI <0(10), Index_50(11)>
  # DEBUG Index => Index_41
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.15_39 = Clock_Ip_pxConfig;
  _51 = Clock_Ip_pxConfig.15_39->CmusCount;
  _52 = (long unsigned int) _51;
  if (Index_41 < _52)
    goto <bb 11>; [89.00%]
  else
    goto <bb 13>; [11.00%]

  <bb 13> [local count: 59055800]:
  # Clock_Ip_pxConfig.15_53 = PHI <Clock_Ip_pxConfig.15_39(12)>
  # DEBUG BEGIN_STMT
  Clock_Ip_Command (Clock_Ip_pxConfig.15_53, 4);

  <bb 14> [local count: 118111600]:

  <bb 15> [local count: 168730857]:
  # DEBUG Index => NULL
  # DEBUG CallbackIndex => NULL
  return;

}



;; Function Clock_Ip_Init (Clock_Ip_Init, funcdef_no=4, decl_uid=6521, cgraph_uid=5, symbol_order=9)

Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * Config)
{
  Clock_Ip_PllStatusType PllStatus;
  Clock_Ip_StatusType ClockStatus;
  _Bool _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ClockStatus => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_InitClock (Config_5(D));
  # DEBUG BEGIN_STMT
  _1 = DriverContext.ClockTreeIsConsumingPll;
  if (_1 != 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 3> [local count: 354334800]:
  # DEBUG BEGIN_STMT
  PllStatus_8 = Clock_Ip_GetPllStatus ();
  # DEBUG PllStatus => PllStatus_8
  # DEBUG BEGIN_STMT
  if (PllStatus_8 == 0)
    goto <bb 4>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 4> [local count: 116930483]:
  # DEBUG BEGIN_STMT
  Clock_Ip_DistributePll ();
  # DEBUG BEGIN_STMT
  # DEBUG ClockStatus => 0

  <bb 5> [local count: 1073741824]:
  # ClockStatus_2 = PHI <0(4), 0(2), 1(3)>
  # DEBUG ClockStatus => ClockStatus_2
  # DEBUG BEGIN_STMT
  return ClockStatus_2;

}



;; Function Clock_Ip_DisableClockMonitor (Clock_Ip_DisableClockMonitor, funcdef_no=8, decl_uid=6531, cgraph_uid=9, symbol_order=13)

Clock_Ip_DisableClockMonitor (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  int _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  void (*<T6ae>) (Clock_Ip_NameType) _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) ClockName_6(D);
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8CmuCallbackIndex[_3];
  CallbackIndex_8 = (uint32) _4;
  # DEBUG CallbackIndex => CallbackIndex_8
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axCmuCallbacks[CallbackIndex_8].Disable;
  _5 (ClockName_6(D));
  return;

}



;; Function Clock_Ip_InstallNotificationsCallback (Clock_Ip_InstallNotificationsCallback, funcdef_no=9, decl_uid=6529, cgraph_uid=10, symbol_order=14)

Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_NotificationType, Clock_Ip_NameType) Callback)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback = Callback_2(D);
  return;

}



;; Function Clock_Ip_DisableModuleClock (Clock_Ip_DisableModuleClock, funcdef_no=10, decl_uid=6533, cgraph_uid=11, symbol_order=15)

Clock_Ip_DisableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  int _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  void (*<T706>) (Clock_Ip_NameType, boolean) _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) ClockName_6(D);
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8GateCallbackIndex[_3];
  CallbackIndex_8 = (uint32) _4;
  # DEBUG CallbackIndex => CallbackIndex_8
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axGateCallbacks[CallbackIndex_8].Update;
  _5 (ClockName_6(D), 1);
  return;

}



;; Function Clock_Ip_EnableModuleClock (Clock_Ip_EnableModuleClock, funcdef_no=11, decl_uid=6535, cgraph_uid=12, symbol_order=16)

Clock_Ip_EnableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  int _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  void (*<T706>) (Clock_Ip_NameType, boolean) _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) ClockName_6(D);
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8GateCallbackIndex[_3];
  CallbackIndex_8 = (uint32) _4;
  # DEBUG CallbackIndex => CallbackIndex_8
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_axGateCallbacks[CallbackIndex_8].Update;
  _5 (ClockName_6(D), 0);
  return;

}



;; Function Clock_Ip_GetClockFrequency (Clock_Ip_GetClockFrequency, funcdef_no=12, decl_uid=6537, cgraph_uid=13, symbol_order=17)

Clock_Ip_GetClockFrequency (Clock_Ip_NameType ClockName)
{
  uint32 _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = Clock_Ip_GetFreq (ClockName_2(D));
  return _4;

}



;; Function Clock_Ip_DisableFircInStandby (Clock_Ip_DisableFircInStandby, funcdef_no=13, decl_uid=6539, cgraph_uid=14, symbol_order=18)

Clock_Ip_DisableFircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.17_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.17_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.17_1, 2);
  # DEBUG BEGIN_STMT
  DisableFircInStandbyMode ();
  return;

}



;; Function Clock_Ip_EnableFircInStandby (Clock_Ip_EnableFircInStandby, funcdef_no=14, decl_uid=6541, cgraph_uid=15, symbol_order=19)

Clock_Ip_EnableFircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.18_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.18_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.18_1, 2);
  # DEBUG BEGIN_STMT
  EnableFircInStandbyMode ();
  return;

}



;; Function Clock_Ip_DisableSircInStandby (Clock_Ip_DisableSircInStandby, funcdef_no=15, decl_uid=6543, cgraph_uid=16, symbol_order=20)

Clock_Ip_DisableSircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.19_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.19_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.19_1, 2);
  # DEBUG BEGIN_STMT
  DisableSircInStandbyMode ();
  return;

}



;; Function Clock_Ip_EnableSircInStandby (Clock_Ip_EnableSircInStandby, funcdef_no=16, decl_uid=6545, cgraph_uid=17, symbol_order=21)

Clock_Ip_EnableSircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.20_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.20_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.20_1, 2);
  # DEBUG BEGIN_STMT
  EnableSircInStandbyMode ();
  return;

}



;; Function Clock_Ip_ReportClockErrors (Clock_Ip_ReportClockErrors, funcdef_no=17, decl_uid=6797, cgraph_uid=18, symbol_order=22)

Clock_Ip_ReportClockErrors (Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
  void (*<T557>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.21_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Clock_Ip_pfkNotificationsCallback.21_1 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.21_1 (Error_3(D), ClockName_4(D));
  return;

}



;; Function Clock_Ip_StartTimeout (Clock_Ip_StartTimeout, funcdef_no=18, decl_uid=6817, cgraph_uid=19, symbol_order=23)

Clock_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  *StartTimeOut_5(D) = _1;
  # DEBUG BEGIN_STMT
  *ElapsedTimeOut_7(D) = 0;
  # DEBUG BEGIN_STMT
  _2 = OsIf_MicrosToTicks (TimeoutUs_9(D), 0);
  *TimeoutTicksOut_11(D) = _2;
  return;

}



;; Function Clock_Ip_TimeoutExpired (Clock_Ip_TimeoutExpired, funcdef_no=19, decl_uid=6821, cgraph_uid=20, symbol_order=24)

Clock_Ip_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  boolean RetVal;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG RetVal => 0
  # DEBUG BEGIN_STMT
  _7 = OsIf_GetElapsed (StartTimeInOut_5(D), 0);
  _1 = *ElapsedTimeInOut_8(D);
  _2 = _1 + _7;
  *ElapsedTimeInOut_8(D) = _2;
  # DEBUG BEGIN_STMT
  if (_2 >= TimeoutTicks_10(D))
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG RetVal => 1

  <bb 4> [local count: 1073741824]:
  # RetVal_3 = PHI <0(2), 1(3)>
  # DEBUG RetVal => RetVal_3
  # DEBUG BEGIN_STMT
  return RetVal_3;

}


