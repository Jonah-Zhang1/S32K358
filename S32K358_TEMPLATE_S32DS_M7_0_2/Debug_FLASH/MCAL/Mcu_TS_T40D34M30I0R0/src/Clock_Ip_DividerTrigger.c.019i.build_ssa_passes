Clock_Ip_TriggerUpdateCgmXDivTrigCtrlTctlHhenUpdStat (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  uint32 DividerStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->TriggerType;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _8->MUX_DIV_TRIG = 1;
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _10 = _9->MUX_DIV_UPD_STAT;
  DividerStatus = _10 & 1;
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_11 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_11);
  # DEBUG BEGIN_STMT
  if (DividerStatus == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _12 = ~TimeoutOccurred;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _13 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _13);

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ConfigureCgmXDivTrigCtrlTctlHhenUpdStat (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->TriggerType;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _8->MUX_DIV_TRIG_CTRL = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _10 = _9->MUX_DIV_TRIG_CTRL;
  _11 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _12 = _10 & 4294967294;
  _11->MUX_DIV_TRIG_CTRL = _12;

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_Callback_DividerTriggerEmpty (const struct Clock_Ip_DividerTriggerConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


