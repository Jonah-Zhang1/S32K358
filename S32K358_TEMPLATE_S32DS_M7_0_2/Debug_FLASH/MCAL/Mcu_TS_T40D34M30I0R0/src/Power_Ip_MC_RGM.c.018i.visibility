
Marking local functions: Power_Ip_MC_RGM_CheckResetReason/7 Power_Ip_MC_RGM_ClearDesResetFlags/5 Power_Ip_MC_RGM_ClearFesResetFlags/4


Marking externally visible functions: Power_Ip_MC_RGM_ResetDuringStandby/10 Power_Ip_MC_RGM_GetResetRawValue/9 Power_Ip_MC_RGM_GetResetReason/8 Power_Ip_MC_RGM_ResetInit/6


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Power_Ip_MC_ME_GetPreviousMode/14 (Power_Ip_MC_ME_GetPreviousMode) @06453a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_MC_RGM_GetResetRawValue/9 
  Calls: 
Power_Ip_ReportPowerErrors/13 (Power_Ip_ReportPowerErrors) @064532a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_MC_RGM_ClearDesResetFlags/5 Power_Ip_MC_RGM_ClearFesResetFlags/4 
  Calls: 
Power_Ip_TimeoutExpired/12 (Power_Ip_TimeoutExpired) @064531c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_MC_RGM_ClearDesResetFlags/5 Power_Ip_MC_RGM_ClearFesResetFlags/4 
  Calls: 
Power_Ip_StartTimeout/11 (Power_Ip_StartTimeout) @064530e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_MC_RGM_ClearDesResetFlags/5 Power_Ip_MC_RGM_ClearFesResetFlags/4 
  Calls: 
Power_Ip_MC_RGM_ResetDuringStandby/10 (Power_Ip_MC_RGM_ResetDuringStandby) @06623d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Power_Ip_pxMC_RGM/3 (read) StandbyResetStatus/2 (write) Power_Ip_pxMC_RGM/3 (read) StandbyResetStatus/2 (read) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
Power_Ip_MC_RGM_GetResetRawValue/9 (Power_Ip_MC_RGM_GetResetRawValue) @06623a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Power_Ip_pxMC_RGM/3 (read) FesResetStatus/1 (write) FesResetStatus/1 (read) Power_Ip_pxMC_RGM/3 (read) DesResetStatus/0 (write) DesResetStatus/0 (read) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Power_Ip_MC_ME_GetPreviousMode/14 Power_Ip_MC_RGM_ClearDesResetFlags/5 Power_Ip_MC_RGM_ClearFesResetFlags/4 
Power_Ip_MC_RGM_GetResetReason/8 (Power_Ip_MC_RGM_GetResetReason) @06623700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Power_Ip_pxMC_RGM/3 (read) DesResetStatus/0 (write) DesResetStatus/0 (read) Power_Ip_pxMC_RGM/3 (read) FesResetStatus/1 (write) FesResetStatus/1 (read) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Power_Ip_MC_RGM_ClearFesResetFlags/4 Power_Ip_MC_RGM_CheckResetReason/7 Power_Ip_MC_RGM_ClearDesResetFlags/5 Power_Ip_MC_RGM_CheckResetReason/7 
Power_Ip_MC_RGM_CheckResetReason/7 (Power_Ip_MC_RGM_CheckResetReason) @06623460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Power_Ip_MC_RGM_GetResetReason/8 Power_Ip_MC_RGM_GetResetReason/8 
  Calls: 
Power_Ip_MC_RGM_ResetInit/6 (Power_Ip_MC_RGM_ResetInit) @066231c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Power_Ip_pxMC_RGM/3 (read) FesResetStatus/1 (write) Power_Ip_pxMC_RGM/3 (read) Power_Ip_pxMC_RGM/3 (read) Power_Ip_pxMC_RGM/3 (read) Power_Ip_pxMC_RGM/3 (read) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Power_Ip_MC_RGM_ClearFesResetFlags/4 
Power_Ip_MC_RGM_ClearDesResetFlags/5 (Power_Ip_MC_RGM_ClearDesResetFlags) @0644aee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_RGM/3 (read) Power_Ip_pxMC_RGM/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Power_Ip_MC_RGM_GetResetRawValue/9 Power_Ip_MC_RGM_GetResetReason/8 
  Calls: Power_Ip_ReportPowerErrors/13 Power_Ip_TimeoutExpired/12 Power_Ip_StartTimeout/11 
Power_Ip_MC_RGM_ClearFesResetFlags/4 (Power_Ip_MC_RGM_ClearFesResetFlags) @0644ae00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Power_Ip_pxMC_RGM/3 (read) Power_Ip_pxMC_RGM/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Power_Ip_MC_RGM_GetResetRawValue/9 Power_Ip_MC_RGM_GetResetReason/8 Power_Ip_MC_RGM_ResetInit/6 
  Calls: Power_Ip_ReportPowerErrors/13 Power_Ip_TimeoutExpired/12 Power_Ip_StartTimeout/11 
Power_Ip_pxMC_RGM/3 (Power_Ip_pxMC_RGM) @06447b88
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Power_Ip_MC_RGM_ResetInit/6 (read) Power_Ip_MC_RGM_ResetInit/6 (read) Power_Ip_MC_RGM_ResetInit/6 (read) Power_Ip_MC_RGM_ResetInit/6 (read) Power_Ip_MC_RGM_ResetInit/6 (read) Power_Ip_MC_RGM_ClearFesResetFlags/4 (read) Power_Ip_MC_RGM_ClearFesResetFlags/4 (read) Power_Ip_MC_RGM_GetResetReason/8 (read) Power_Ip_MC_RGM_GetResetReason/8 (read) Power_Ip_MC_RGM_ClearDesResetFlags/5 (read) Power_Ip_MC_RGM_ClearDesResetFlags/5 (read) Power_Ip_MC_RGM_GetResetRawValue/9 (read) Power_Ip_MC_RGM_GetResetRawValue/9 (read) Power_Ip_MC_RGM_ResetDuringStandby/10 (read) Power_Ip_MC_RGM_ResetDuringStandby/10 (read) 
  Availability: available
  Varpool flags: initialized
StandbyResetStatus/2 (StandbyResetStatus) @06447af8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Power_Ip_MC_RGM_ResetDuringStandby/10 (write) Power_Ip_MC_RGM_ResetDuringStandby/10 (read) 
  Availability: available
  Varpool flags: initialized
FesResetStatus/1 (FesResetStatus) @06447a68
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Power_Ip_MC_RGM_ResetInit/6 (write) Power_Ip_MC_RGM_GetResetReason/8 (write) Power_Ip_MC_RGM_GetResetReason/8 (read) Power_Ip_MC_RGM_GetResetRawValue/9 (write) Power_Ip_MC_RGM_GetResetRawValue/9 (read) 
  Availability: available
  Varpool flags:
DesResetStatus/0 (DesResetStatus) @064479d8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Power_Ip_MC_RGM_GetResetReason/8 (write) Power_Ip_MC_RGM_GetResetReason/8 (read) Power_Ip_MC_RGM_GetResetRawValue/9 (write) Power_Ip_MC_RGM_GetResetRawValue/9 (read) 
  Availability: available
  Varpool flags:
Power_Ip_MC_RGM_ResetDuringStandby ()
{
  uint8 ResetDuringStdby;
  uint32 RegValue;
  uint8 D.6526;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetDuringStdby = 0;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.15_1 = Power_Ip_pxMC_RGM;
  _2 = Power_Ip_pxMC_RGM.15_1->RDSS;
  RegValue = _2 & 3;
  # DEBUG BEGIN_STMT
  if (RegValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  StandbyResetStatus = RegValue;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.16_3 = Power_Ip_pxMC_RGM;
  Power_Ip_pxMC_RGM.16_3->RDSS = RegValue;

  <bb 4> :
  # DEBUG BEGIN_STMT
  StandbyResetStatus.17_4 = StandbyResetStatus;
  _5 = StandbyResetStatus.17_4 & 3;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ResetDuringStdby = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.6526 = ResetDuringStdby;
  return D.6526;

}


Power_Ip_MC_RGM_GetResetRawValue ()
{
  Power_Ip_PowerModeType PreviousMode;
  uint32 ResetMask;
  uint32 Position;
  uint32 DynamicMask;
  uint32 Index;
  uint32 ActiveValue;
  uint32 RegValue;
  uint32 RawReset;
  Power_Ip_RawResetType D.6520;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RawReset = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.13_1 = Power_Ip_pxMC_RGM;
  _2 = Power_Ip_pxMC_RGM.13_1->FES;
  RegValue = _2 & 1611731929;
  # DEBUG BEGIN_STMT
  if (RegValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FesResetStatus = RegValue;

  <bb 4> :
  # DEBUG BEGIN_STMT
  ResetMask = 1611732953;
  # DEBUG BEGIN_STMT
  ActiveValue = FesResetStatus;
  # DEBUG BEGIN_STMT
  if (ActiveValue != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Position = 0;
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DynamicMask = 1 << Index;
  # DEBUG BEGIN_STMT
  _3 = DynamicMask & ResetMask;
  if (_3 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _4 = DynamicMask & ActiveValue;
  if (_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _5 = 1 << Position;
  RawReset = RawReset | _5;

  <bb 9> :
  # DEBUG BEGIN_STMT
  Position = Position + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (Index <= 31)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearFesResetFlags (RegValue);

  <bb 13> :
  # DEBUG BEGIN_STMT
  ResetMask = 1611126617;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.14_6 = Power_Ip_pxMC_RGM;
  _7 = Power_Ip_pxMC_RGM.14_6->DES;
  RegValue = _7 & 1611061081;
  # DEBUG BEGIN_STMT
  if (RegValue != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  DesResetStatus = RegValue;

  <bb 15> :
  # DEBUG BEGIN_STMT
  ActiveValue = DesResetStatus;
  # DEBUG BEGIN_STMT
  if (ActiveValue != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Position = 15;
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 22>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  DynamicMask = 1 << Index;
  # DEBUG BEGIN_STMT
  _8 = DynamicMask & ResetMask;
  if (_8 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _9 = DynamicMask & ActiveValue;
  if (_9 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  _10 = 1 << Position;
  RawReset = RawReset | _10;

  <bb 20> :
  # DEBUG BEGIN_STMT
  Position = Position + 1;

  <bb 21> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 22> :
  # DEBUG BEGIN_STMT
  if (Index <= 31)
    goto <bb 17>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearDesResetFlags (RegValue);

  <bb 24> :
  # DEBUG BEGIN_STMT
  if (RawReset == 0)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  PreviousMode = Power_Ip_MC_ME_GetPreviousMode ();
  # DEBUG BEGIN_STMT
  if (PreviousMode == 15)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  # DEBUG BEGIN_STMT
  RawReset = RawReset | 8192;

  <bb 27> :
  # DEBUG BEGIN_STMT
  D.6520 = RawReset;
  return D.6520;

}


Power_Ip_MC_RGM_GetResetReason ()
{
  uint32 Position;
  uint32 ActiveValue;
  uint32 RegValue;
  Power_Ip_ResetType ResetReason;
  Power_Ip_ResetType D.6481;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  RegValue = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Position = 0;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.8_1 = Power_Ip_pxMC_RGM;
  _2 = Power_Ip_pxMC_RGM.8_1->DES;
  RegValue = _2 & 1611061081;
  # DEBUG BEGIN_STMT
  if (RegValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  DesResetStatus = RegValue;

  <bb 4> :
  # DEBUG BEGIN_STMT
  ActiveValue = DesResetStatus;
  # DEBUG BEGIN_STMT
  ResetReason = Power_Ip_MC_RGM_CheckResetReason (ActiveValue, 0, &Position);
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearDesResetFlags (RegValue);
  # DEBUG BEGIN_STMT
  if (ActiveValue == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.9_3 = Power_Ip_pxMC_RGM;
  _4 = Power_Ip_pxMC_RGM.9_3->FES;
  RegValue = _4 & 1611731929;
  # DEBUG BEGIN_STMT
  if (RegValue != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FesResetStatus = RegValue;

  <bb 7> :
  # DEBUG BEGIN_STMT
  ActiveValue = FesResetStatus;
  # DEBUG BEGIN_STMT
  if (ActiveValue != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ResetReason = Power_Ip_MC_RGM_CheckResetReason (ActiveValue, 1, &Position);

  <bb 9> :
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearFesResetFlags (RegValue);

  <bb 10> :
  # DEBUG BEGIN_STMT
  D.6481 = ResetReason;
  Position = {CLOBBER};
  return D.6481;

}


Power_Ip_MC_RGM_CheckResetReason (uint32 ActiveValue, uint8 ResetMode, uint32 * PositionPtr)
{
  uint32 Position;
  uint32 DynamicMask;
  uint32 Index;
  uint32 NumberOfFlags;
  uint32 ResetMask;
  Power_Ip_ResetType ResetReason;
  Power_Ip_ResetType D.6498;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ResetReason = 29;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  NumberOfFlags = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Position = *PositionPtr;
  # DEBUG BEGIN_STMT
  if (ResetMode == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ResetMask = 1611126617;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ResetMask = 1611732953;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Index = 0;
  goto <bb 12>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  DynamicMask = 1 << Index;
  # DEBUG BEGIN_STMT
  _1 = DynamicMask & ResetMask;
  if (_1 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _2 = DynamicMask & ActiveValue;
  if (_2 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  ResetReason = (Power_Ip_ResetType) Position;
  # DEBUG BEGIN_STMT
  NumberOfFlags = NumberOfFlags + 1;
  # DEBUG BEGIN_STMT
  if (NumberOfFlags > 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ResetReason = 30;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Position = Position + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  Index = Index + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (Index <= 31)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  *PositionPtr = Position;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.6498 = ResetReason;
  return D.6498;

}


Power_Ip_MC_RGM_ResetInit (const struct Power_Ip_MC_RGM_ConfigType * ConfigPtr)
{
  uint32 DesResetReason;
  uint32 FesResetReason;

  <bb 2> :
  # DEBUG BEGIN_STMT
  FesResetReason = 0;
  # DEBUG BEGIN_STMT
  DesResetReason = 0;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.0_1 = Power_Ip_pxMC_RGM;
  FesResetReason = Power_Ip_pxMC_RGM.0_1->FES;
  # DEBUG BEGIN_STMT
  if (FesResetReason != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FesResetStatus = FesResetReason;
  # DEBUG BEGIN_STMT
  Power_Ip_MC_RGM_ClearFesResetFlags (FesResetReason);

  <bb 4> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.1_2 = Power_Ip_pxMC_RGM;
  _3 = ConfigPtr->FuncResetOpt;
  Power_Ip_pxMC_RGM.1_2->FERD = _3;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.2_4 = Power_Ip_pxMC_RGM;
  DesResetReason = Power_Ip_pxMC_RGM.2_4->DES;
  # DEBUG BEGIN_STMT
  if (DesResetReason != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.3_5 = Power_Ip_pxMC_RGM;
  _6 = ConfigPtr->FesThresholdReset;
  Power_Ip_pxMC_RGM.3_5->FRET = _6;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _7 = DesResetReason & 1;
  if (_7 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.4_8 = Power_Ip_pxMC_RGM;
  _9 = ConfigPtr->DesThresholdReset;
  Power_Ip_pxMC_RGM.4_8->DRET = _9;

  <bb 8> :
  return;

}


Power_Ip_MC_RGM_ClearDesResetFlags (uint32 RegValue)
{
  uint32 RegValueTemp;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  RegValueTemp = RegValue;
  # DEBUG BEGIN_STMT
  if (RegValueTemp != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.10_1 = TimeoutTicks;
  TimeoutOccurred = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.10_1);
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.11_2 = Power_Ip_pxMC_RGM;
  Power_Ip_pxMC_RGM.11_2->DES = RegValueTemp;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.12_3 = Power_Ip_pxMC_RGM;
  _4 = Power_Ip_pxMC_RGM.12_3->DES;
  RegValueTemp = _4 & 1611061081;
  # DEBUG BEGIN_STMT
  if (RegValueTemp != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = ~TimeoutOccurred;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 8> :
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Power_Ip_MC_RGM_ClearFesResetFlags (uint32 RegValue)
{
  uint32 RegValueTemp;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  RegValueTemp = RegValue;
  # DEBUG BEGIN_STMT
  if (RegValueTemp != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks.5_1 = TimeoutTicks;
  TimeoutOccurred = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.5_1);
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.6_2 = Power_Ip_pxMC_RGM;
  Power_Ip_pxMC_RGM.6_2->FES = RegValueTemp;
  # DEBUG BEGIN_STMT
  Power_Ip_pxMC_RGM.7_3 = Power_Ip_pxMC_RGM;
  _4 = Power_Ip_pxMC_RGM.7_3->FES;
  RegValueTemp = _4 & 1611731929;
  # DEBUG BEGIN_STMT
  if (RegValueTemp != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = ~TimeoutOccurred;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (0, 255);

  <bb 8> :
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


