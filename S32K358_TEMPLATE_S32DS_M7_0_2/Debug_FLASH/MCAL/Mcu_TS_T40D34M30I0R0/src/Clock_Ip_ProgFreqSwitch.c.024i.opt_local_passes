Clock_Ip_CgmXPcfsSdurDivcDiveDivs (const struct Clock_Ip_PcfsConfigType * Config, uint32 CfgIndex)
{
  uint32 DivEndValue;
  uint32 DivStartValue;
  uint32 DivcRate;
  uint32 DivcInit;
  uint32 Sdur;
  uint32 K;
  uint32 Var3;
  uint32 Var2;
  uint32 Var1;
  uint32 Index;
  uint32 Rate;
  uint32 AmaxBrut;
  uint32 Fsafe;
  uint32 Finput;
  uint32 HwIndex;
  volatile struct Clock_Ip_CgmPcfsType * CgmPcfsBase;
  <unnamed type> _1;
  int _2;
  unsigned char _3;
  int _4;
  <unnamed type> _5;
  int _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  <unnamed type> _12;
  long unsigned int _13;
  long unsigned int _14;
  <unnamed type> _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  <unnamed type> _23;
  long unsigned int _24;
  long unsigned int _25;
  <unnamed type> _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.0_32;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _33;
  unsigned char _34;
  int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  long unsigned int _60;
  long unsigned int _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  long unsigned int _66;
  long unsigned int _67;
  long unsigned int _68;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Finput_80 = 0;
  # DEBUG Finput => Finput_80
  # DEBUG BEGIN_STMT
  Fsafe_81 = 0;
  # DEBUG Fsafe => Fsafe_81
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Rate_82 = 0;
  # DEBUG Rate => Rate_82
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config_83(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config_83(D)->SelectorName;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  _4 = (int) _3;
  CgmPcfsBase_85 = Clock_Ip_apxCgmPcfs[_4];
  # DEBUG CgmPcfsBase => CgmPcfsBase_85
  # DEBUG BEGIN_STMT
  _5 = Config_83(D)->Name;
  _6 = (int) _5;
  _7 = Clock_Ip_au8ClockFeatures[_6][7];
  HwIndex_86 = (uint32) _7;
  # DEBUG HwIndex => HwIndex_86
  # DEBUG BEGIN_STMT
  _8 = HashPfs[CfgIndex_87(D)];
  _9 = Config_83(D)->ClockSourceFrequency;
  _10 = Config_83(D)->MaxAllowableIDDchange;
  _11 = _9 ^ _10;
  _12 = Config_83(D)->Name;
  _13 = (long unsigned int) _12;
  _14 = _11 ^ _13;
  _15 = Config_83(D)->SelectorName;
  _16 = (long unsigned int) _15;
  _17 = _14 ^ _16;
  _18 = Config_83(D)->StepDuration;
  _19 = _17 ^ _18;
  if (_8 != _19)
    goto <bb 4>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _20 = Config_83(D)->ClockSourceFrequency;
  _21 = Config_83(D)->MaxAllowableIDDchange;
  _22 = _20 ^ _21;
  _23 = Config_83(D)->Name;
  _24 = (long unsigned int) _23;
  _25 = _22 ^ _24;
  _26 = Config_83(D)->SelectorName;
  _27 = (long unsigned int) _26;
  _28 = _25 ^ _27;
  _29 = Config_83(D)->StepDuration;
  _30 = _28 ^ _29;
  HashPfs[CfgIndex_87(D)] = _30;
  # DEBUG BEGIN_STMT
  _31 = Config_83(D)->ClockSourceFrequency;
  Finput_89 = _31 / 1000000;
  # DEBUG Finput => Finput_89
  # DEBUG BEGIN_STMT
  Clock_Ip_pxConfig.0_32 = Clock_Ip_pxConfig;
  _33 = Clock_Ip_pxConfig.0_32->ConfiguredFrequencies;
  _34 = Clock_Ip_FreqIds[1];
  _35 = (int) _34;
  _36 = (*_33)[_35].ConfiguredFrequencyValue;
  Fsafe_90 = _36 / 1000000;
  # DEBUG Fsafe => Fsafe_90
  # DEBUG BEGIN_STMT
  _37 = Config_83(D)->MaxAllowableIDDchange;
  _38 = Config_83(D)->StepDuration;
  _39 = _37 * _38;
  _40 = _39 * 100000;
  _41 = Finput_89 * 2360;
  AmaxBrut_91 = _40 / _41;
  # DEBUG AmaxBrut => AmaxBrut_91
  # DEBUG BEGIN_STMT
  Rate_92 = AmaxBrut_91;
  # DEBUG Rate => Rate_92
  # DEBUG BEGIN_STMT
  _42 = 0;
  if (AmaxBrut_91 < _42)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Rate_97 = 0;
  # DEBUG Rate => Rate_97
  goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _43 = 100;
  if (AmaxBrut_91 > _43)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Rate_96 = 1000;
  # DEBUG Rate => Rate_96
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Index_93 = 1;
  # DEBUG Index => Index_93
  goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _44 = Index_72 + 4294967295;
  _45 = AMax[_44];
  if (AmaxBrut_91 > _45)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Rate_94 = PcfsRate[Index_72];
  # DEBUG Rate => Rate_94

  <bb 11> :
  # Rate_69 = PHI <Rate_70(9), Rate_94(10)>
  # DEBUG Rate => Rate_69
  # DEBUG BEGIN_STMT
  Index_95 = Index_72 + 1;
  # DEBUG Index => Index_95

  <bb 12> :
  # Rate_70 = PHI <Rate_92(8), Rate_69(11)>
  # Index_72 = PHI <Index_93(8), Index_95(11)>
  # DEBUG Index => Index_72
  # DEBUG Rate => Rate_70
  # DEBUG BEGIN_STMT
  if (Index_72 <= 5)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # Rate_71 = PHI <Rate_97(5), Rate_96(7), Rate_70(12)>
  # DEBUG Rate => Rate_71
  # DEBUG BEGIN_STMT
  _46 = Finput_89 * 2048000;
  _47 = Fsafe_90 * Rate_71;
  _48 = _46 / _47;
  _49 = 2048000 / Rate_71;
  _50 = _48 - _49;
  Var1_98 = _50 + 256;
  # DEBUG Var1 => Var1_98
  # DEBUG BEGIN_STMT
  Var2_99 = 1073741824;
  # DEBUG Var2 => Var2_99
  # DEBUG BEGIN_STMT
  Var3_100 = 0;
  # DEBUG Var3 => Var3_100
  # DEBUG BEGIN_STMT
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Var2_115 = Var2_75 >> 2;
  # DEBUG Var2 => Var2_115

  <bb 15> :
  # Var2_75 = PHI <Var2_99(13), Var2_115(14)>
  # DEBUG Var2 => Var2_75
  # DEBUG BEGIN_STMT
  if (Var2_75 > Var1_98)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _51 = Var3_78 + Var2_76;
  if (Var1_74 >= _51)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  _52 = Var3_78 + Var2_76;
  Var1_111 = Var1_74 - _52;
  # DEBUG Var1 => Var1_111
  # DEBUG BEGIN_STMT
  _53 = Var2_76 << 1;
  Var3_112 = Var3_78 + _53;
  # DEBUG Var3 => Var3_112

  <bb 18> :
  # Var1_73 = PHI <Var1_74(16), Var1_111(17)>
  # Var3_77 = PHI <Var3_78(16), Var3_112(17)>
  # DEBUG Var3 => Var3_77
  # DEBUG Var1 => Var1_73
  # DEBUG BEGIN_STMT
  Var3_113 = Var3_77 >> 1;
  # DEBUG Var3 => Var3_113
  # DEBUG BEGIN_STMT
  Var2_114 = Var2_76 >> 2;
  # DEBUG Var2 => Var2_114

  <bb 19> :
  # Var1_74 = PHI <Var1_98(15), Var1_73(18)>
  # Var2_76 = PHI <Var2_75(15), Var2_114(18)>
  # Var3_78 = PHI <Var3_100(15), Var3_113(18)>
  # DEBUG Var3 => Var3_78
  # DEBUG Var2 => Var2_76
  # DEBUG Var1 => Var1_74
  # DEBUG BEGIN_STMT
  if (Var2_76 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _54 = Var3_78 << 2;
  _55 = _54 + 191;
  K_101 = _55 >> 7;
  # DEBUG K => K_101
  # DEBUG BEGIN_STMT
  _56 = Config_83(D)->StepDuration;
  Sdur_102 = Fsafe_90 * _56;
  # DEBUG Sdur => Sdur_102
  # DEBUG BEGIN_STMT
  DivcInit_103 = Rate_71 * K_101;
  # DEBUG DivcInit => DivcInit_103
  # DEBUG BEGIN_STMT
  DivcRate_104 = Rate_71;
  # DEBUG DivcRate => DivcRate_104
  # DEBUG BEGIN_STMT
  _57 = Rate_71 * K_101;
  _58 = K_101 + 1;
  _59 = _57 * _58;
  _60 = _59 >> 1;
  DivStartValue_105 = _60 + 999;
  # DEBUG DivStartValue => DivStartValue_105
  # DEBUG BEGIN_STMT
  _61 = Finput_89 * 1000;
  _62 = _61 / Fsafe_90;
  DivEndValue_106 = _62 + 4294967295;
  # DEBUG DivEndValue => DivEndValue_106
  # DEBUG BEGIN_STMT
  _63 = Sdur_102 & 65535;
  CgmPcfsBase_85->PCFS_SDUR ={v} _63;
  # DEBUG BEGIN_STMT
  _64 = DivcRate_104 & 255;
  _65 = DivcInit_103 << 16;
  _66 = _64 | _65;
  CgmPcfsBase_85->PCFS[HwIndex_86].DIVC ={v} _66;
  # DEBUG BEGIN_STMT
  _67 = DivEndValue_106 & 1048575;
  CgmPcfsBase_85->PCFS[HwIndex_86].DIVE ={v} _67;
  # DEBUG BEGIN_STMT
  _68 = DivStartValue_105 & 1048575;
  CgmPcfsBase_85->PCFS[HwIndex_86].DIVS ={v} _68;

  <bb 21> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_ProgressiveFrequencyClockSwitchEmpty (const struct Clock_Ip_PcfsConfigType * Config, uint32 Index)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


