Histogram:

========== IPA-profile speculative targets: ==========

Summary for node Power_Ip_PrepareSocStandby.part.0/30:

Summary for node Power_Ip_DisableSleepOnExit/9:

Summary for node Power_Ip_EnableSleepOnExit/8:

Summary for node Power_Ip_InstallNotificationsCallback/7:

Summary for node Power_Ip_Init/6:

Summary for node Power_Ip_GetResetRawValue/5:

Summary for node Power_Ip_GetResetReason/4:

Summary for node Power_Ip_GetPreviousMode/3:

Summary for node Power_Ip_SetMode/2:

Summary for node Power_Ip_PrepareSocStandby/1:


Power_Ip_PrepareSocStandby.part.0 ()
{
  const struct Power_Ip_ModeConfigType * ModeConfigPtr;

  <bb 4> [local count: 1073741824]:
  # DEBUG D#2 s=> ModeConfigPtr
  # DEBUG ModeConfigPtr => D#2

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (1, 7);

  <bb 3> [local count: 1073741824]:
  return;

}


Power_Ip_DisableSleepOnExit ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_CM7_DisableSleepOnExit ();
  return;

}


Power_Ip_EnableSleepOnExit ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_CM7_EnableSleepOnExit ();
  return;

}


Power_Ip_InstallNotificationsCallback (void (*Power_Ip_ReportErrorsCallbackType) (Power_Ip_ReportErrorType, uint8) ReportErrorsCallback)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Power_Ip_pfReportErrorsCallback = ReportErrorsCallback_2(D);
  return;

}


Power_Ip_Init (const struct Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
  const struct Power_Ip_MC_RGM_ConfigType * _1;
  const struct Power_Ip_PMC_ConfigType * _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = HwIPsConfigPtr_4(D)->McRgmConfigPtr;
  Power_Ip_MC_RGM_ResetInit (_1);
  # DEBUG BEGIN_STMT
  _2 = HwIPsConfigPtr_4(D)->PMCConfigPtr;
  Power_Ip_PMC_PowerInit (_2);
  # DEBUG BEGIN_STMT
  Power_Ip_DCM_GPR_GlobalPadkeepingConfig (1);
  # DEBUG BEGIN_STMT
  return;

}


Power_Ip_GetResetRawValue ()
{
  Power_Ip_RawResetType ResetReason;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetReason_3 = Power_Ip_MC_RGM_GetResetRawValue ();
  # DEBUG ResetReason => ResetReason_3
  # DEBUG BEGIN_STMT
  return ResetReason_3;

}


Power_Ip_GetResetReason ()
{
  Power_Ip_PowerModeType PreviousMode;
  Power_Ip_ResetType ResetReason;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ResetReason => 31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Power_Ip_MC_RGM_ResetDuringStandby ();
  if (_1 != 0)
    goto <bb 5>; [52.23%]
  else
    goto <bb 3>; [47.77%]

  <bb 3> [local count: 512926472]:
  # DEBUG BEGIN_STMT
  PreviousMode_7 = Power_Ip_MC_ME_GetPreviousMode ();
  # DEBUG PreviousMode => PreviousMode_7
  # DEBUG BEGIN_STMT
  if (PreviousMode_7 == 15)
    goto <bb 5>; [36.03%]
  else
    goto <bb 4>; [63.97%]

  <bb 4> [local count: 328119066]:
  # DEBUG BEGIN_STMT
  ResetReason_9 = Power_Ip_MC_RGM_GetResetReason ();
  # DEBUG ResetReason => ResetReason_9

  <bb 5> [local count: 1073741824]:
  # ResetReason_2 = PHI <28(2), 28(3), ResetReason_9(4)>
  # DEBUG ResetReason => ResetReason_2
  # DEBUG BEGIN_STMT
  return ResetReason_2;

}


Power_Ip_GetPreviousMode ()
{
  Power_Ip_PowerModeType PowerPrevMode;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PowerPrevMode_3 = Power_Ip_MC_ME_GetPreviousMode ();
  # DEBUG PowerPrevMode => PowerPrevMode_3
  # DEBUG BEGIN_STMT
  return PowerPrevMode_3;

}


Power_Ip_SetMode (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  Power_Ip_PowerModeType PowerMode;
  const struct Power_Ip_MC_ME_ModeConfigType * _1;
  const struct Power_Ip_MC_ME_ModeConfigType * _2;
  const struct Power_Ip_MC_ME_ModeConfigType * _3;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PowerMode_7 = ModeConfigPtr_6(D)->PowerMode;
  # DEBUG PowerMode => PowerMode_7
  # DEBUG BEGIN_STMT
  _1 = ModeConfigPtr_6(D)->McMeModeConfigPtr;
  Power_Ip_MC_ME_EnablePartitionClock (_1);
  # DEBUG BEGIN_STMT
  _2 = ModeConfigPtr_6(D)->McMeModeConfigPtr;
  Power_Ip_MC_ME_ConfigCoreCOFBClock (_2);
  # DEBUG BEGIN_STMT
  _3 = ModeConfigPtr_6(D)->McMeModeConfigPtr;
  Power_Ip_MC_ME_DisablePartitionClock (_3);
  # DEBUG BEGIN_STMT
  if (PowerMode_7 <= 1)
    goto <bb 3>; [25.50%]
  else
    goto <bb 4>; [74.50%]

  <bb 3> [local count: 273804168]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_SocTriggerResetEvent (PowerMode_7);
  goto <bb 15>; [100.00%]

  <bb 4> [local count: 799937656]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 13)
    goto <bb 5>; [20.24%]
  else
    goto <bb 6>; [79.76%]

  <bb 5> [local count: 161907381]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_CoreStandbyEntry (ModeConfigPtr_6(D));
  goto <bb 15>; [100.00%]

  <bb 6> [local count: 638030275]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 14)
    goto <bb 8>; [20.24%]
  else
    goto <bb 7>; [79.76%]

  <bb 7> [local count: 508892947]:
  if (PowerMode_7 == 17)
    goto <bb 8>; [34.00%]
  else
    goto <bb 9>; [66.00%]

  <bb 8> [local count: 302160931]:
  # DEBUG BEGIN_STMT
  Power_Ip_PrepareSocStandby (ModeConfigPtr_6(D));
  goto <bb 15>; [100.00%]

  <bb 9> [local count: 335869344]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 15)
    goto <bb 11>; [20.24%]
  else
    goto <bb 10>; [79.76%]

  <bb 10> [local count: 267889389]:
  if (PowerMode_7 == 18)
    goto <bb 11>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 11> [local count: 159062348]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_SocStandbyEntry (ModeConfigPtr_6(D));
  goto <bb 15>; [100.00%]

  <bb 12> [local count: 176806996]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 16)
    goto <bb 14>; [20.24%]
  else
    goto <bb 13>; [79.76%]

  <bb 13> [local count: 141021260]:
  if (PowerMode_7 == 19)
    goto <bb 14>; [34.00%]
  else
    goto <bb 15>; [66.00%]

  <bb 14> [local count: 83732965]:
  # DEBUG BEGIN_STMT
  Power_Ip_PrepareSocStandby (ModeConfigPtr_6(D));
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_SocStandbyEntry (ModeConfigPtr_6(D));

  <bb 15> [local count: 1073741824]:
  return;

}


Power_Ip_PrepareSocStandby (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  const struct Power_Ip_DCM_GPR_ConfigType * _1;
  const struct Power_Ip_DCM_GPR_ConfigType * _2;
  _Bool _3;
  _Bool _5;
  _Bool _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = ModeConfigPtr_10(D)->DcmGprConfigPtr;
  Power_Ip_DCM_GPR_Config (_1);
  # DEBUG BEGIN_STMT
  _2 = ModeConfigPtr_10(D)->DcmGprConfigPtr;
  _3 = _2->GlobalPadkeeping;
  if (_3 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 3> [local count: 536870913]:
  _5 = _2->DcmGprUnderMcuControl;
  if (_5 != 0)
    goto <bb 4>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 4> [local count: 177167400]:
  # DEBUG BEGIN_STMT
  Power_Ip_DCM_GPR_GlobalPadkeepingConfig (0);

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _6 = Power_Ip_FLASH_HighVoltageOperationOngoing ();
  if (_6 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 6> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Power_Ip_PMC_PrepareLowPowerEntry ();
  goto <bb 8>; [100.00%]

  <bb 7> [local count: 536870912]:
  # DEBUG D#1 => ModeConfigPtr_10(D)
  Power_Ip_PrepareSocStandby.part.0 ();

  <bb 8> [local count: 1073741824]:
  return;

}


