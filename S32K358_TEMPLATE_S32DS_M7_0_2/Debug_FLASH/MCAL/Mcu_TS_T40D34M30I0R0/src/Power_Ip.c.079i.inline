IPA function summary for Power_Ip_PrepareSocStandby.part.0/30 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       3
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_ReportPowerErrors/21 function body not available
      freq:1.00 loop depth: 0 size: 3 time: 12
       op0 is compile time invariant
       op1 is compile time invariant

IPA function summary for Power_Ip_DisableSleepOnExit/9 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_CM7_DisableSleepOnExit/29 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10

IPA function summary for Power_Ip_EnableSleepOnExit/8 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_CM7_EnableSleepOnExit/28 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10

IPA function summary for Power_Ip_InstallNotificationsCallback/7 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Power_Ip_Init/6 inlinable
  global time:     37.000000
  self size:       11
  global size:     11
  min size:       7
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    Power_Ip_DCM_GPR_GlobalPadkeepingConfig/18 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
       op0 is compile time invariant
    Power_Ip_PMC_PowerInit/27 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_RGM_ResetInit/26 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_GetResetRawValue/5 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_RGM_GetResetRawValue/25 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_GetResetReason/4 inlinable
  global time:     24.571532
  self size:       13
  global size:     13
  min size:       10
  self stack:      0
  global stack:    0
    size:4.000000, time:2.955400
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_RGM_GetResetReason/24 function body not available
      freq:0.31 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_ME_GetPreviousMode/22 function body not available
      freq:0.48 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_RGM_ResetDuringStandby/23 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_GetPreviousMode/3 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_ME_GetPreviousMode/22 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_SetMode/2 inlinable
  global time:     57.247206
  self size:       41
  global size:     41
  min size:       7
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:2.000000, time:1.490000,  executed if:(op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] > 1)
    size:2.000000, time:1.188424,  executed if:(op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.947887,  executed if:(op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.625605,  executed if:(op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.498983,  executed if:(op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.329329,  executed if:(op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.262673,  executed if:(op0[ref offset: 32] != 16) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 16) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
  calls:
    Power_Ip_MC_ME_SocStandbyEntry/16 function body not available
      freq:0.08 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] == 16 || op0[ref offset: 32] == 19) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_PrepareSocStandby/1 function not considered for inlining
      freq:0.08 loop depth: 0 size: 2 time: 11 callee size:10 stack: 0 predicate: (op0[ref offset: 32] == 16 || op0[ref offset: 32] == 19) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_MC_ME_SocStandbyEntry/16 function body not available
      freq:0.15 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] == 15 || op0[ref offset: 32] == 18) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_PrepareSocStandby/1 function not considered for inlining
      freq:0.28 loop depth: 0 size: 2 time: 11 callee size:10 stack: 0 predicate: (op0[ref offset: 32] == 14 || op0[ref offset: 32] == 17) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_MC_ME_CoreStandbyEntry/15 function body not available
      freq:0.15 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] == 13) && (op0[ref offset: 32] > 1)
    Power_Ip_MC_ME_SocTriggerResetEvent/14 function body not available
      freq:0.26 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] <= 1)
    Power_Ip_MC_ME_DisablePartitionClock/13 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_ME_ConfigCoreCOFBClock/12 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_ME_EnablePartitionClock/11 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_PrepareSocStandby/1 inlinable
  global time:     44.315000
  self size:       21
  global size:     21
  min size:       17
  self stack:      0
  global stack:    0
    size:8.500000, time:7.000000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 96] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 96] changed)
  calls:
    Power_Ip_PrepareSocStandby.part.0/30 function not considered for inlining
      freq:0.50 loop depth: 0 size: 1 time: 10 callee size: 3 stack: 0
    Power_Ip_PMC_PrepareLowPowerEntry/20 function body not available
      freq:0.50 loop depth: 0 size: 1 time: 10
    Power_Ip_FLASH_HighVoltageOperationOngoing/19 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_DCM_GPR_GlobalPadkeepingConfig/18 function body not available
      freq:0.16 loop depth: 0 size: 2 time: 11
       op0 is compile time invariant
    Power_Ip_DCM_GPR_Config/17 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11


Flattening functions:
Overall time estimate: 230.133737 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in Power_Ip_PrepareSocStandby.part.0/30.
Enqueueing calls in Power_Ip_DisableSleepOnExit/9.
Enqueueing calls in Power_Ip_EnableSleepOnExit/8.
Enqueueing calls in Power_Ip_InstallNotificationsCallback/7.
Enqueueing calls in Power_Ip_Init/6.
Enqueueing calls in Power_Ip_GetResetRawValue/5.
Enqueueing calls in Power_Ip_GetResetReason/4.
Enqueueing calls in Power_Ip_GetPreviousMode/3.
Enqueueing calls in Power_Ip_SetMode/2.
Enqueueing calls in Power_Ip_PrepareSocStandby/1.

Considering Power_Ip_PrepareSocStandby.part.0/30 with 6 size
 to be inlined into Power_Ip_PrepareSocStandby/1 in unknown:0
 Estimated badness is -0.521739, frequency 0.50.
node context cache: 2 hits, 0 misses, 3 initializations

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 217.133737 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :       22 calls, 15.580193 freq, 0 count
--param max-inline-insns-auto limit reached       :        2 calls, 0.359392 freq, 0 count
IPA function summary for Power_Ip_DisableSleepOnExit/9 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_CM7_DisableSleepOnExit/29 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10

IPA function summary for Power_Ip_EnableSleepOnExit/8 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_CM7_EnableSleepOnExit/28 function body not available
      freq:1.00 loop depth: 0 size: 1 time: 10

IPA function summary for Power_Ip_InstallNotificationsCallback/7 inlinable
  global time:     3.000000
  self size:       4
  global size:     4
  min size:       1
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Power_Ip_Init/6 inlinable
  global time:     37.000000
  self size:       11
  global size:     11
  min size:       7
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    Power_Ip_DCM_GPR_GlobalPadkeepingConfig/18 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
       op0 is compile time invariant
    Power_Ip_PMC_PowerInit/27 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_RGM_ResetInit/26 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_GetResetRawValue/5 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_RGM_GetResetRawValue/25 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_GetResetReason/4 inlinable
  global time:     24.571532
  self size:       13
  global size:     13
  min size:       10
  self stack:      0
  global stack:    0
    size:4.000000, time:2.955400
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_RGM_GetResetReason/24 function body not available
      freq:0.31 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_ME_GetPreviousMode/22 function body not available
      freq:0.48 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_RGM_ResetDuringStandby/23 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_GetPreviousMode/3 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    Power_Ip_MC_ME_GetPreviousMode/22 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_SetMode/2 inlinable
  global time:     57.247206
  self size:       41
  global size:     41
  min size:       7
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:4.000000, time:3.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:2.000000, time:1.490000,  executed if:(op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] > 1)
    size:2.000000, time:1.188424,  executed if:(op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.947887,  executed if:(op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.625605,  executed if:(op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.498983,  executed if:(op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.329329,  executed if:(op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    size:2.000000, time:0.262673,  executed if:(op0[ref offset: 32] != 16) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1),  nonconst if:(op0[ref offset: 32] changed) && (op0[ref offset: 32] != 16) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
  calls:
    Power_Ip_MC_ME_SocStandbyEntry/16 function body not available
      freq:0.08 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] == 16 || op0[ref offset: 32] == 19) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_PrepareSocStandby/1 --param max-inline-insns-auto limit reached
      freq:0.08 loop depth: 0 size: 2 time: 11 callee size:11 stack: 0 predicate: (op0[ref offset: 32] == 16 || op0[ref offset: 32] == 19) && (op0[ref offset: 32] != 18) && (op0[ref offset: 32] != 15) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_MC_ME_SocStandbyEntry/16 function body not available
      freq:0.15 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] == 15 || op0[ref offset: 32] == 18) && (op0[ref offset: 32] != 17) && (op0[ref offset: 32] != 14) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_PrepareSocStandby/1 --param max-inline-insns-auto limit reached
      freq:0.28 loop depth: 0 size: 2 time: 11 callee size:11 stack: 0 predicate: (op0[ref offset: 32] == 14 || op0[ref offset: 32] == 17) && (op0[ref offset: 32] != 13) && (op0[ref offset: 32] > 1)
    Power_Ip_MC_ME_CoreStandbyEntry/15 function body not available
      freq:0.15 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] == 13) && (op0[ref offset: 32] > 1)
    Power_Ip_MC_ME_SocTriggerResetEvent/14 function body not available
      freq:0.26 loop depth: 0 size: 2 time: 11 predicate: (op0[ref offset: 32] <= 1)
    Power_Ip_MC_ME_DisablePartitionClock/13 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_ME_ConfigCoreCOFBClock/12 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_MC_ME_EnablePartitionClock/11 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

IPA function summary for Power_Ip_PrepareSocStandby/1 inlinable
  global time:     45.315000
  self size:       21
  global size:     23
  min size:       19
  self stack:      0
  global stack:    0
  estimated growth:9
    size:8.500000, time:7.000000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 96] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 96] changed)
  calls:
    Power_Ip_PrepareSocStandby.part.0/30 inlined
      freq:0.50
      Stack frame offset 0, callee self size 0
      Power_Ip_ReportPowerErrors/21 function body not available
        freq:0.50 loop depth: 0 size: 3 time: 12
         op0 is compile time invariant
         op1 is compile time invariant
    Power_Ip_PMC_PrepareLowPowerEntry/20 function body not available
      freq:0.50 loop depth: 0 size: 1 time: 10
    Power_Ip_FLASH_HighVoltageOperationOngoing/19 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11
    Power_Ip_DCM_GPR_GlobalPadkeepingConfig/18 function body not available
      freq:0.16 loop depth: 0 size: 2 time: 11
       op0 is compile time invariant
    Power_Ip_DCM_GPR_Config/17 function body not available
      freq:1.00 loop depth: 0 size: 2 time: 11

Symbol table:

Power_Ip_PrepareSocStandby.part.0/30 (Power_Ip_PrepareSocStandby.part.0) @064a32a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function Power_Ip_PrepareSocStandby.part.0/30 is inline copy in Power_Ip_PrepareSocStandby/1
  Availability: local
  Function flags: count:536870912 (estimated locally) body local split_part optimize_size
  Called by: Power_Ip_PrepareSocStandby/1 (inlined) (536870912 (estimated locally),0.50 per call) 
  Calls: Power_Ip_ReportPowerErrors/21 (536870912 (estimated locally),0.50 per call) 
Power_Ip_CM7_DisableSleepOnExit/29 (Power_Ip_CM7_DisableSleepOnExit) @06492ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_DisableSleepOnExit/9 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_CM7_EnableSleepOnExit/28 (Power_Ip_CM7_EnableSleepOnExit) @06492d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_EnableSleepOnExit/8 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_PMC_PowerInit/27 (Power_Ip_PMC_PowerInit) @06492a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_Init/6 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_RGM_ResetInit/26 (Power_Ip_MC_RGM_ResetInit) @064929a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_Init/6 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_RGM_GetResetRawValue/25 (Power_Ip_MC_RGM_GetResetRawValue) @064927e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_GetResetRawValue/5 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_RGM_GetResetReason/24 (Power_Ip_MC_RGM_GetResetReason) @06492620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_GetResetReason/4 (328119066 (estimated locally),0.31 per call) 
  Calls: 
Power_Ip_MC_RGM_ResetDuringStandby/23 (Power_Ip_MC_RGM_ResetDuringStandby) @06492540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_GetResetReason/4 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_ME_GetPreviousMode/22 (Power_Ip_MC_ME_GetPreviousMode) @06492380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_GetResetReason/4 (512926472 (estimated locally),0.48 per call) Power_Ip_GetPreviousMode/3 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_ReportPowerErrors/21 (Power_Ip_ReportPowerErrors) @064921c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_PrepareSocStandby.part.0/30 (536870912 (estimated locally),0.50 per call) 
  Calls: 
Power_Ip_PMC_PrepareLowPowerEntry/20 (Power_Ip_PMC_PrepareLowPowerEntry) @064920e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_PrepareSocStandby/1 (536870913 (estimated locally),0.50 per call) 
  Calls: 
Power_Ip_FLASH_HighVoltageOperationOngoing/19 (Power_Ip_FLASH_HighVoltageOperationOngoing) @06492000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_PrepareSocStandby/1 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_DCM_GPR_GlobalPadkeepingConfig/18 (Power_Ip_DCM_GPR_GlobalPadkeepingConfig) @0648a000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_Init/6 (1073741824 (estimated locally),1.00 per call) Power_Ip_PrepareSocStandby/1 (177167400 (estimated locally),0.16 per call) 
  Calls: 
Power_Ip_DCM_GPR_Config/17 (Power_Ip_DCM_GPR_Config) @0648aee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_PrepareSocStandby/1 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_ME_SocStandbyEntry/16 (Power_Ip_MC_ME_SocStandbyEntry) @0648ad20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_SetMode/2 (83732965 (estimated locally),0.08 per call) Power_Ip_SetMode/2 (159062348 (estimated locally),0.15 per call) 
  Calls: 
Power_Ip_MC_ME_CoreStandbyEntry/15 (Power_Ip_MC_ME_CoreStandbyEntry) @0648ac40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_SetMode/2 (161907381 (estimated locally),0.15 per call) 
  Calls: 
Power_Ip_MC_ME_SocTriggerResetEvent/14 (Power_Ip_MC_ME_SocTriggerResetEvent) @0648ab60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_SetMode/2 (273804168 (estimated locally),0.26 per call) 
  Calls: 
Power_Ip_MC_ME_DisablePartitionClock/13 (Power_Ip_MC_ME_DisablePartitionClock) @0648aa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_SetMode/2 (1073741823 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_ME_ConfigCoreCOFBClock/12 (Power_Ip_MC_ME_ConfigCoreCOFBClock) @0648a9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_SetMode/2 (1073741823 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_MC_ME_EnablePartitionClock/11 (Power_Ip_MC_ME_EnablePartitionClock) @0648a8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Power_Ip_SetMode/2 (1073741823 (estimated locally),1.00 per call) 
  Calls: 
Power_Ip_ReportPowerErrorsEmptyCallback/10 (Power_Ip_ReportPowerErrorsEmptyCallback) @0648a460
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: Power_Ip_pfReportErrorsCallback/0 (addr) 
  Availability: not_available
  Function flags: optimize_size
  Called by: 
  Calls: 
Power_Ip_DisableSleepOnExit/9 (Power_Ip_DisableSleepOnExit) @0648a1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_CM7_DisableSleepOnExit/29 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_EnableSleepOnExit/8 (Power_Ip_EnableSleepOnExit) @06481ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_CM7_EnableSleepOnExit/28 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_InstallNotificationsCallback/7 (Power_Ip_InstallNotificationsCallback) @064819a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Power_Ip_pfReportErrorsCallback/0 (write) 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Power_Ip_Init/6 (Power_Ip_Init) @06481460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_DCM_GPR_GlobalPadkeepingConfig/18 (1073741824 (estimated locally),1.00 per call) Power_Ip_PMC_PowerInit/27 (1073741824 (estimated locally),1.00 per call) Power_Ip_MC_RGM_ResetInit/26 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_GetResetRawValue/5 (Power_Ip_GetResetRawValue) @06481e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_RGM_GetResetRawValue/25 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_GetResetReason/4 (Power_Ip_GetResetReason) @06481b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_RGM_GetResetReason/24 (328119066 (estimated locally),0.31 per call) Power_Ip_MC_ME_GetPreviousMode/22 (512926472 (estimated locally),0.48 per call) Power_Ip_MC_RGM_ResetDuringStandby/23 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_GetPreviousMode/3 (Power_Ip_GetPreviousMode) @064818c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_ME_GetPreviousMode/22 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_SetMode/2 (Power_Ip_SetMode) @06481620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:1073741823 (estimated locally) body optimize_size
  Called by: 
  Calls: Power_Ip_MC_ME_SocStandbyEntry/16 (83732965 (estimated locally),0.08 per call) Power_Ip_PrepareSocStandby/1 (83732965 (estimated locally),0.08 per call) Power_Ip_MC_ME_SocStandbyEntry/16 (159062348 (estimated locally),0.15 per call) Power_Ip_PrepareSocStandby/1 (302160931 (estimated locally),0.28 per call) Power_Ip_MC_ME_CoreStandbyEntry/15 (161907381 (estimated locally),0.15 per call) Power_Ip_MC_ME_SocTriggerResetEvent/14 (273804168 (estimated locally),0.26 per call) Power_Ip_MC_ME_DisablePartitionClock/13 (1073741823 (estimated locally),1.00 per call) Power_Ip_MC_ME_ConfigCoreCOFBClock/12 (1073741823 (estimated locally),1.00 per call) Power_Ip_MC_ME_EnablePartitionClock/11 (1073741823 (estimated locally),1.00 per call) 
Power_Ip_PrepareSocStandby/1 (Power_Ip_PrepareSocStandby) @06481380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: Power_Ip_SetMode/2 (83732965 (estimated locally),0.08 per call) Power_Ip_SetMode/2 (302160931 (estimated locally),0.28 per call) 
  Calls: Power_Ip_PrepareSocStandby.part.0/30 (inlined) (536870912 (estimated locally),0.50 per call) Power_Ip_PMC_PrepareLowPowerEntry/20 (536870913 (estimated locally),0.50 per call) Power_Ip_FLASH_HighVoltageOperationOngoing/19 (1073741824 (estimated locally),1.00 per call) Power_Ip_DCM_GPR_GlobalPadkeepingConfig/18 (177167400 (estimated locally),0.16 per call) Power_Ip_DCM_GPR_Config/17 (1073741824 (estimated locally),1.00 per call) 
Power_Ip_pfReportErrorsCallback/0 (Power_Ip_pfReportErrorsCallback) @064803a8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Power_Ip_ReportPowerErrorsEmptyCallback/10 (addr) 
  Referring: Power_Ip_InstallNotificationsCallback/7 (write) 
  Availability: available
  Varpool flags: initialized

;; Function Power_Ip_PrepareSocStandby (Power_Ip_PrepareSocStandby, funcdef_no=0, decl_uid=6414, cgraph_uid=1, symbol_order=1)


Symbols to be put in SSA form
{ D.6487 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 13
Number of blocks to update: 12 ( 92%)


Removing basic block 7
Removing basic block 9
Removing basic block 10
Merging blocks 11 and 12
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }
Power_Ip_PrepareSocStandby (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  const struct Power_Ip_DCM_GPR_ConfigType * _1;
  const struct Power_Ip_DCM_GPR_ConfigType * _2;
  _Bool _3;
  _Bool _5;
  _Bool _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = ModeConfigPtr_10(D)->DcmGprConfigPtr;
  Power_Ip_DCM_GPR_Config (_1);
  # DEBUG BEGIN_STMT
  _2 = ModeConfigPtr_10(D)->DcmGprConfigPtr;
  _3 = _2->GlobalPadkeeping;
  if (_3 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 3> [local count: 536870913]:
  _5 = _2->DcmGprUnderMcuControl;
  if (_5 != 0)
    goto <bb 4>; [33.00%]
  else
    goto <bb 5>; [67.00%]

  <bb 4> [local count: 177167400]:
  # DEBUG BEGIN_STMT
  Power_Ip_DCM_GPR_GlobalPadkeepingConfig (0);

  <bb 5> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _6 = Power_Ip_FLASH_HighVoltageOperationOngoing ();
  if (_6 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 6>; [50.00%]

  <bb 6> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  Power_Ip_PMC_PrepareLowPowerEntry ();
  goto <bb 8>; [100.00%]

  <bb 7> [local count: 536870913]:
  # DEBUG D#1 => ModeConfigPtr_10(D)
  # DEBUG INLINE_ENTRY Power_Ip_PrepareSocStandby
  # DEBUG D#2 => D#1
  # DEBUG ModeConfigPtr => D#2
  # DEBUG BEGIN_STMT
  Power_Ip_ReportPowerErrors (1, 7);

  <bb 8> [local count: 1073741824]:
  # DEBUG ModeConfigPtr => NULL
  return;

}



;; Function Power_Ip_SetMode (Power_Ip_SetMode, funcdef_no=1, decl_uid=6350, cgraph_uid=2, symbol_order=2)

Power_Ip_SetMode (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  Power_Ip_PowerModeType PowerMode;
  const struct Power_Ip_MC_ME_ModeConfigType * _1;
  const struct Power_Ip_MC_ME_ModeConfigType * _2;
  const struct Power_Ip_MC_ME_ModeConfigType * _3;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PowerMode_7 = ModeConfigPtr_6(D)->PowerMode;
  # DEBUG PowerMode => PowerMode_7
  # DEBUG BEGIN_STMT
  _1 = ModeConfigPtr_6(D)->McMeModeConfigPtr;
  Power_Ip_MC_ME_EnablePartitionClock (_1);
  # DEBUG BEGIN_STMT
  _2 = ModeConfigPtr_6(D)->McMeModeConfigPtr;
  Power_Ip_MC_ME_ConfigCoreCOFBClock (_2);
  # DEBUG BEGIN_STMT
  _3 = ModeConfigPtr_6(D)->McMeModeConfigPtr;
  Power_Ip_MC_ME_DisablePartitionClock (_3);
  # DEBUG BEGIN_STMT
  if (PowerMode_7 <= 1)
    goto <bb 3>; [25.50%]
  else
    goto <bb 4>; [74.50%]

  <bb 3> [local count: 273804168]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_SocTriggerResetEvent (PowerMode_7);
  goto <bb 15>; [100.00%]

  <bb 4> [local count: 799937656]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 13)
    goto <bb 5>; [20.24%]
  else
    goto <bb 6>; [79.76%]

  <bb 5> [local count: 161907381]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_CoreStandbyEntry (ModeConfigPtr_6(D));
  goto <bb 15>; [100.00%]

  <bb 6> [local count: 638030275]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 14)
    goto <bb 8>; [20.24%]
  else
    goto <bb 7>; [79.76%]

  <bb 7> [local count: 508892947]:
  if (PowerMode_7 == 17)
    goto <bb 8>; [34.00%]
  else
    goto <bb 9>; [66.00%]

  <bb 8> [local count: 302160931]:
  # DEBUG BEGIN_STMT
  Power_Ip_PrepareSocStandby (ModeConfigPtr_6(D));
  goto <bb 15>; [100.00%]

  <bb 9> [local count: 335869344]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 15)
    goto <bb 11>; [20.24%]
  else
    goto <bb 10>; [79.76%]

  <bb 10> [local count: 267889389]:
  if (PowerMode_7 == 18)
    goto <bb 11>; [34.00%]
  else
    goto <bb 12>; [66.00%]

  <bb 11> [local count: 159062348]:
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_SocStandbyEntry (ModeConfigPtr_6(D));
  goto <bb 15>; [100.00%]

  <bb 12> [local count: 176806996]:
  # DEBUG BEGIN_STMT
  if (PowerMode_7 == 16)
    goto <bb 14>; [20.24%]
  else
    goto <bb 13>; [79.76%]

  <bb 13> [local count: 141021260]:
  if (PowerMode_7 == 19)
    goto <bb 14>; [34.00%]
  else
    goto <bb 15>; [66.00%]

  <bb 14> [local count: 83732965]:
  # DEBUG BEGIN_STMT
  Power_Ip_PrepareSocStandby (ModeConfigPtr_6(D));
  # DEBUG BEGIN_STMT
  Power_Ip_MC_ME_SocStandbyEntry (ModeConfigPtr_6(D));

  <bb 15> [local count: 1073741824]:
  return;

}



;; Function Power_Ip_GetPreviousMode (Power_Ip_GetPreviousMode, funcdef_no=2, decl_uid=6352, cgraph_uid=3, symbol_order=3)

Power_Ip_GetPreviousMode ()
{
  Power_Ip_PowerModeType PowerPrevMode;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  PowerPrevMode_3 = Power_Ip_MC_ME_GetPreviousMode ();
  # DEBUG PowerPrevMode => PowerPrevMode_3
  # DEBUG BEGIN_STMT
  return PowerPrevMode_3;

}



;; Function Power_Ip_GetResetReason (Power_Ip_GetResetReason, funcdef_no=3, decl_uid=6354, cgraph_uid=4, symbol_order=4)

Power_Ip_GetResetReason ()
{
  Power_Ip_PowerModeType PreviousMode;
  Power_Ip_ResetType ResetReason;
  unsigned char _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ResetReason => 31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Power_Ip_MC_RGM_ResetDuringStandby ();
  if (_1 != 0)
    goto <bb 5>; [52.23%]
  else
    goto <bb 3>; [47.77%]

  <bb 3> [local count: 512926472]:
  # DEBUG BEGIN_STMT
  PreviousMode_7 = Power_Ip_MC_ME_GetPreviousMode ();
  # DEBUG PreviousMode => PreviousMode_7
  # DEBUG BEGIN_STMT
  if (PreviousMode_7 == 15)
    goto <bb 5>; [36.03%]
  else
    goto <bb 4>; [63.97%]

  <bb 4> [local count: 328119066]:
  # DEBUG BEGIN_STMT
  ResetReason_9 = Power_Ip_MC_RGM_GetResetReason ();
  # DEBUG ResetReason => ResetReason_9

  <bb 5> [local count: 1073741824]:
  # ResetReason_2 = PHI <28(2), 28(3), ResetReason_9(4)>
  # DEBUG ResetReason => ResetReason_2
  # DEBUG BEGIN_STMT
  return ResetReason_2;

}



;; Function Power_Ip_GetResetRawValue (Power_Ip_GetResetRawValue, funcdef_no=4, decl_uid=6356, cgraph_uid=5, symbol_order=5)

Power_Ip_GetResetRawValue ()
{
  Power_Ip_RawResetType ResetReason;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ResetReason_3 = Power_Ip_MC_RGM_GetResetRawValue ();
  # DEBUG ResetReason => ResetReason_3
  # DEBUG BEGIN_STMT
  return ResetReason_3;

}



;; Function Power_Ip_Init (Power_Ip_Init, funcdef_no=5, decl_uid=6348, cgraph_uid=6, symbol_order=6)

Power_Ip_Init (const struct Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
  const struct Power_Ip_MC_RGM_ConfigType * _1;
  const struct Power_Ip_PMC_ConfigType * _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = HwIPsConfigPtr_4(D)->McRgmConfigPtr;
  Power_Ip_MC_RGM_ResetInit (_1);
  # DEBUG BEGIN_STMT
  _2 = HwIPsConfigPtr_4(D)->PMCConfigPtr;
  Power_Ip_PMC_PowerInit (_2);
  # DEBUG BEGIN_STMT
  Power_Ip_DCM_GPR_GlobalPadkeepingConfig (1);
  # DEBUG BEGIN_STMT
  return;

}



;; Function Power_Ip_InstallNotificationsCallback (Power_Ip_InstallNotificationsCallback, funcdef_no=6, decl_uid=6358, cgraph_uid=7, symbol_order=7)

Power_Ip_InstallNotificationsCallback (void (*Power_Ip_ReportErrorsCallbackType) (Power_Ip_ReportErrorType, uint8) ReportErrorsCallback)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Power_Ip_pfReportErrorsCallback = ReportErrorsCallback_2(D);
  return;

}



;; Function Power_Ip_EnableSleepOnExit (Power_Ip_EnableSleepOnExit, funcdef_no=7, decl_uid=6360, cgraph_uid=8, symbol_order=8)

Power_Ip_EnableSleepOnExit ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_CM7_EnableSleepOnExit ();
  return;

}



;; Function Power_Ip_DisableSleepOnExit (Power_Ip_DisableSleepOnExit, funcdef_no=8, decl_uid=6362, cgraph_uid=9, symbol_order=9)

Power_Ip_DisableSleepOnExit ()
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Power_Ip_CM7_DisableSleepOnExit ();
  return;

}


