Clock_Ip_SetPllPlldvOdiv2Output (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerValue;
  uint32 RegValue;
  uint32 Instance;
  const long unsigned int iftmp.0;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Value;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = Config->Value;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0 = 1;

  <bb 6> :
  DividerValue = iftmp.0;
  # DEBUG BEGIN_STMT
  _5 = Clock_Ip_apxPll[Instance].PllInstance;
  RegValue = _5->PLLDV;
  # DEBUG BEGIN_STMT
  RegValue = RegValue & 2181038079;
  # DEBUG BEGIN_STMT
  _6 = DividerValue << 25;
  _7 = _6 & 2113929216;
  RegValue = RegValue | _7;
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxPll[Instance].PllInstance;
  _8->PLLDV = RegValue;

  <bb 7> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_SetPllPll0divDeDivOutput (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  uint32 DividerIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][5];
  DividerIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _7 = Config->Value;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = Clock_Ip_apxPll[Instance].PllInstance;
  RegValue = _8->PLLODIV[DividerIndex];
  # DEBUG BEGIN_STMT
  RegValue = RegValue | 2147483648;
  # DEBUG BEGIN_STMT
  RegValue = RegValue & 4278255615;
  # DEBUG BEGIN_STMT
  _9 = Config->Value;
  _10 = _9 + 4294967295;
  _11 = _10 << 16;
  _12 = _11 & 16711680;
  RegValue = RegValue | _12;
  # DEBUG BEGIN_STMT
  _13 = Clock_Ip_apxPll[Instance].PllInstance;
  _13->PLLODIV[DividerIndex] = RegValue;

  <bb 5> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return;

}


Clock_Ip_SetCgmXDeDivStatWithoutPhase (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 DividerShift;
  uint32 DividerMask;
  uint32 DividerIndex;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutOccurred = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = Config->Name;
  _2 = (int) _1;
  _3 = Clock_Ip_au8ClockFeatures[_2][0];
  Instance = (uint32) _3;
  # DEBUG BEGIN_STMT
  _4 = Config->Name;
  _5 = (int) _4;
  _6 = Clock_Ip_au8ClockFeatures[_5][4];
  SelectorIndex = (uint32) _6;
  # DEBUG BEGIN_STMT
  _7 = Config->Name;
  _8 = (int) _7;
  _9 = Clock_Ip_au8ClockFeatures[_8][5];
  DividerIndex = (uint32) _9;
  # DEBUG BEGIN_STMT
  _10 = Config->Name;
  _11 = (int) _10;
  _12 = Clock_Ip_au8ClockFeatures[_11][2];
  _13 = (int) _12;
  DividerMask = Clock_Ip_axFeatureExtensions[_13].DividerValueMask;
  # DEBUG BEGIN_STMT
  _14 = Config->Name;
  _15 = (int) _14;
  _16 = Clock_Ip_au8ClockFeatures[_15][2];
  _17 = (int) _16;
  DividerShift = Clock_Ip_axFeatureExtensions[_17].DividerValueShift;
  # DEBUG BEGIN_STMT
  _18 = Config->Value;
  if (_18 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _19 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _19->Divider[DividerIndex];
  # DEBUG BEGIN_STMT
  _20 = ~DividerMask;
  RegValue = RegValue & _20;
  # DEBUG BEGIN_STMT
  _21 = Config->Value;
  _22 = _21 + 4294967295;
  _23 = _22 << DividerShift;
  _24 = DividerMask & _23;
  RegValue = RegValue | _24;
  # DEBUG BEGIN_STMT
  _25 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _25->Divider[DividerIndex] = RegValue;

  <bb 5> :
  # DEBUG BEGIN_STMT
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 6> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _26 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _27 = _26->MUX_DIV_UPD_STAT;
  DividerStatus = _27 & 1;
  # DEBUG BEGIN_STMT
  TimeoutTicks.1_28 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_28);
  # DEBUG BEGIN_STMT
  if (DividerStatus == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _29 = ~TimeoutOccurred;
  if (_29 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _30 = ~TimeoutOccurred;
  if (_30 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _31 = Config->Value;
  if (_31 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _32 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _33 = _32->Divider[DividerIndex];
  _34 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _35 = _33 | 2147483648;
  _34->Divider[DividerIndex] = _35;
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _36 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _37 = _36->Divider[DividerIndex];
  _38 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _39 = _37 & 2147483647;
  _38->Divider[DividerIndex] = _39;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _40 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _40);

  <bb 13> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_Callback_DividerEmpty (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  return;

}


