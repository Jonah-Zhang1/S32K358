
Marking local functions: Pit_Ip_ProcessCommonInterrupt/19 Pit_Ip_GetInterruptEnableFlag/18 Pit_Ip_GetLowerLifetimerValue/17 Pit_Ip_GetUpperLifetimerValue/16 Pit_Ip_ClearInterruptStatusFlag/15 Pit_Ip_SetEnableInterruptFlag/14 Pit_Ip_GetCounterValue/13 Pit_Ip_SetCounterValue/12 Pit_Ip_IsChannelRunning/11 Pit_Ip_Reset/10 Pit_Ip_SetChainMode/9 Pit_Ip_SetDebugMode/8 Pit_Ip_EnableTimer/7 Pit_Ip_EnableModule/6 Pit_Ip_GetInterruptStatusFlag/0


Marking externally visible functions: PIT_0_ISR/31 Pit_Ip_GetLifetimeTimer/30 Pit_Ip_SetLifetimeTimer/29 Pit_Ip_ChangeNextTimeoutValue/28 Pit_Ip_DisableChannelInterrupt/27 Pit_Ip_EnableChannelInterrupt/26 Pit_Ip_GetCurrentTimer/25 Pit_Ip_StopChannel/24 Pit_Ip_StartChannel/23 Pit_Ip_Deinit/22 Pit_Ip_InitChannel/21 Pit_Ip_Init/20 Pit_Ip_GetLoadValue/5


Marking externally visible variables: pitBase/3 Pit_Ip_u32OldTargetValue/2


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03/39 (SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03) @06e6a8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_ProcessCommonInterrupt/19 
  Calls: 
SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03/38 (SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03) @06e6a7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_ProcessCommonInterrupt/19 
  Calls: 
SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01/37 (SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01) @06e6a2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_SetChainMode/9 
  Calls: 
SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01/36 (SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01) @06e6a1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_SetChainMode/9 
  Calls: 
SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02/35 (SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02) @06dda380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_SetEnableInterruptFlag/14 
  Calls: 
SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02/34 (SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02) @06dda2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_SetEnableInterruptFlag/14 
  Calls: 
SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00/33 (SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00) @06dda0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_EnableTimer/7 
  Calls: 
SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00/32 (SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00) @06dda000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Pit_Ip_EnableTimer/7 
  Calls: 
PIT_0_ISR/31 (PIT_0_ISR) @06dd47e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_ProcessCommonInterrupt/19 
Pit_Ip_GetLifetimeTimer/30 (Pit_Ip_GetLifetimeTimer) @06dd4540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_GetLowerLifetimerValue/17 Pit_Ip_GetUpperLifetimerValue/16 
Pit_Ip_SetLifetimeTimer/29 (Pit_Ip_SetLifetimeTimer) @06dd42a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_EnableTimer/7 Pit_Ip_SetCounterValue/12 Pit_Ip_EnableTimer/7 Pit_Ip_SetChainMode/9 Pit_Ip_SetEnableInterruptFlag/14 Pit_Ip_SetCounterValue/12 
Pit_Ip_ChangeNextTimeoutValue/28 (Pit_Ip_ChangeNextTimeoutValue) @06dd4000
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Pit_Ip_bIsChangedTimeout/1 (read) Pit_Ip_u32OldTargetValue/2 (write) Pit_Ip_bIsChangedTimeout/1 (write) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_SetCounterValue/12 Pit_Ip_GetLoadValue/5 
Pit_Ip_DisableChannelInterrupt/27 (Pit_Ip_DisableChannelInterrupt) @06dc9b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_ClearInterruptStatusFlag/15 Pit_Ip_SetEnableInterruptFlag/14 
Pit_Ip_EnableChannelInterrupt/26 (Pit_Ip_EnableChannelInterrupt) @06dc9620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_SetEnableInterruptFlag/14 Pit_Ip_ClearInterruptStatusFlag/15 
Pit_Ip_GetCurrentTimer/25 (Pit_Ip_GetCurrentTimer) @06dc90e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_GetCounterValue/13 
Pit_Ip_StopChannel/24 (Pit_Ip_StopChannel) @06dc9d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Pit_Ip_ProcessCommonInterrupt/19 
  Calls: Pit_Ip_ClearInterruptStatusFlag/15 Pit_Ip_EnableTimer/7 
Pit_Ip_StartChannel/23 (Pit_Ip_StartChannel) @06dc9a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Pit_Ip_bIsChangedTimeout/1 (write) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_EnableTimer/7 Pit_Ip_SetCounterValue/12 Pit_Ip_IsChannelRunning/11 
Pit_Ip_Deinit/22 (Pit_Ip_Deinit) @06dc97e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_Reset/10 
Pit_Ip_InitChannel/21 (Pit_Ip_InitChannel) @06dc9540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Pit_Ip_u32ChState/4 (write) Pit_Ip_u32ChState/4 (write) Pit_Ip_u32ChState/4 (write) Pit_Ip_u32ChState/4 (write) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_ClearInterruptStatusFlag/15 Pit_Ip_SetEnableInterruptFlag/14 Pit_Ip_EnableTimer/7 
Pit_Ip_Init/20 (Pit_Ip_Init) @06dc92a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Pit_Ip_SetDebugMode/8 Pit_Ip_EnableModule/6 
Pit_Ip_ProcessCommonInterrupt/19 (Pit_Ip_ProcessCommonInterrupt) @06dc9000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Pit_Ip_u32ChState/4 (read) Pit_Ip_u32ChState/4 (read) Pit_Ip_u32ChState/4 (read) Pit_Ip_u32ChState/4 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: PIT_0_ISR/31 
  Calls: Pit_Ip_StopChannel/24 SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03/39 Pit_Ip_ClearInterruptStatusFlag/15 Pit_Ip_GetInterruptStatusFlag/0 Pit_Ip_GetInterruptEnableFlag/18 SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03/38 
   Indirect call Num speculative call targets: 0
Pit_Ip_GetInterruptEnableFlag/18 (Pit_Ip_GetInterruptEnableFlag) @06dc2b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_ProcessCommonInterrupt/19 
  Calls: 
Pit_Ip_GetLowerLifetimerValue/17 (Pit_Ip_GetLowerLifetimerValue) @06dc2620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_GetLifetimeTimer/30 
  Calls: 
Pit_Ip_GetUpperLifetimerValue/16 (Pit_Ip_GetUpperLifetimerValue) @06dc20e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_GetLifetimeTimer/30 
  Calls: 
Pit_Ip_ClearInterruptStatusFlag/15 (Pit_Ip_ClearInterruptStatusFlag) @06dc2d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_ProcessCommonInterrupt/19 Pit_Ip_DisableChannelInterrupt/27 Pit_Ip_EnableChannelInterrupt/26 Pit_Ip_StopChannel/24 Pit_Ip_InitChannel/21 
  Calls: 
Pit_Ip_SetEnableInterruptFlag/14 (Pit_Ip_SetEnableInterruptFlag) @06dc2a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_SetLifetimeTimer/29 Pit_Ip_DisableChannelInterrupt/27 Pit_Ip_EnableChannelInterrupt/26 Pit_Ip_InitChannel/21 
  Calls: SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02/35 SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02/34 
Pit_Ip_GetCounterValue/13 (Pit_Ip_GetCounterValue) @06dc27e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_GetCurrentTimer/25 
  Calls: 
Pit_Ip_SetCounterValue/12 (Pit_Ip_SetCounterValue) @06dc2540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_SetLifetimeTimer/29 Pit_Ip_SetLifetimeTimer/29 Pit_Ip_ChangeNextTimeoutValue/28 Pit_Ip_StartChannel/23 
  Calls: 
Pit_Ip_IsChannelRunning/11 (Pit_Ip_IsChannelRunning) @06dc22a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_StartChannel/23 
  Calls: 
Pit_Ip_Reset/10 (Pit_Ip_Reset) @06dc2000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_Deinit/22 
  Calls: 
Pit_Ip_SetChainMode/9 (Pit_Ip_SetChainMode) @06dc01c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_SetLifetimeTimer/29 
  Calls: SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01/37 SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01/36 
Pit_Ip_SetDebugMode/8 (Pit_Ip_SetDebugMode) @06d96e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_Init/20 
  Calls: 
Pit_Ip_EnableTimer/7 (Pit_Ip_EnableTimer) @06d968c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_SetLifetimeTimer/29 Pit_Ip_SetLifetimeTimer/29 Pit_Ip_StopChannel/24 Pit_Ip_StartChannel/23 Pit_Ip_InitChannel/21 
  Calls: SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00/33 SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00/32 
Pit_Ip_EnableModule/6 (Pit_Ip_EnableModule) @06d96d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_Init/20 
  Calls: 
Pit_Ip_GetLoadValue/5 (Pit_Ip_GetLoadValue) @06d96a80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: pitBase/3 (read) 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: Pit_Ip_ChangeNextTimeoutValue/28 
  Calls: 
Pit_Ip_u32ChState/4 (Pit_Ip_u32ChState) @06d942d0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Pit_Ip_InitChannel/21 (write) Pit_Ip_InitChannel/21 (write) Pit_Ip_InitChannel/21 (write) Pit_Ip_InitChannel/21 (write) Pit_Ip_ProcessCommonInterrupt/19 (read) Pit_Ip_ProcessCommonInterrupt/19 (read) Pit_Ip_ProcessCommonInterrupt/19 (read) Pit_Ip_ProcessCommonInterrupt/19 (read) 
  Availability: available
  Varpool flags: initialized
pitBase/3 (pitBase) @06d90678
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Pit_Ip_GetLoadValue/5 (read) Pit_Ip_EnableModule/6 (read) Pit_Ip_EnableModule/6 (read) Pit_Ip_SetDebugMode/8 (read) Pit_Ip_SetDebugMode/8 (read) Pit_Ip_SetDebugMode/8 (read) Pit_Ip_SetDebugMode/8 (read) Pit_Ip_EnableTimer/7 (read) Pit_Ip_EnableTimer/7 (read) Pit_Ip_EnableTimer/7 (read) Pit_Ip_EnableTimer/7 (read) Pit_Ip_SetEnableInterruptFlag/14 (read) Pit_Ip_SetEnableInterruptFlag/14 (read) Pit_Ip_SetEnableInterruptFlag/14 (read) Pit_Ip_SetEnableInterruptFlag/14 (read) Pit_Ip_ClearInterruptStatusFlag/15 (read) Pit_Ip_ClearInterruptStatusFlag/15 (read) Pit_Ip_Reset/10 (read) Pit_Ip_Reset/10 (read) Pit_Ip_Reset/10 (read) Pit_Ip_Reset/10 (read) Pit_Ip_Reset/10 (read) Pit_Ip_Reset/10 (read) Pit_Ip_Reset/10 (read) Pit_Ip_IsChannelRunning/11 (read) Pit_Ip_SetCounterValue/12 (read) Pit_Ip_GetCounterValue/13 (read) Pit_Ip_SetChainMode/9 (read) Pit_Ip_SetChainMode/9 (read) Pit_Ip_SetChainMode/9 (read) Pit_Ip_SetChainMode/9 (read) Pit_Ip_GetUpperLifetimerValue/16 (read) Pit_Ip_GetLowerLifetimerValue/17 (read) Pit_Ip_GetInterruptEnableFlag/18 (read) Pit_Ip_GetInterruptStatusFlag/0 (read) Pit_Ip_GetInterruptStatusFlag/0 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Pit_Ip_u32OldTargetValue/2 (Pit_Ip_u32OldTargetValue) @06d905e8
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: Pit_Ip_ChangeNextTimeoutValue/28 (write) 
  Availability: available
  Varpool flags:
Pit_Ip_bIsChangedTimeout/1 (Pit_Ip_bIsChangedTimeout) @06d905a0
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: Pit_Ip_StartChannel/23 (write) Pit_Ip_ChangeNextTimeoutValue/28 (read) Pit_Ip_ChangeNextTimeoutValue/28 (write) 
  Availability: available
  Varpool flags:
Pit_Ip_GetInterruptStatusFlag/0 (Pit_Ip_GetInterruptStatusFlag) @06c9e000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: pitBase/3 (read) pitBase/3 (read) 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Pit_Ip_ProcessCommonInterrupt/19 
  Calls: 
PIT_0_ISR ()
{
  uint8 channel;
  uint8 instance;

  <bb 2> :
  # DEBUG BEGIN_STMT
  instance = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  channel = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Pit_Ip_ProcessCommonInterrupt (instance, channel);
  # DEBUG BEGIN_STMT
  channel.2_1 = channel;
  channel = channel.2_1 + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (channel <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Pit_Ip_GetLifetimeTimer (uint8 instance)
{
  uint32 valueL;
  uint32 valueH;
  uint64 lifeTimeValue;
  uint64 D.6495;

  <bb 2> :
  # DEBUG BEGIN_STMT
  lifeTimeValue = 0;
  # DEBUG BEGIN_STMT
  valueH = 0;
  # DEBUG BEGIN_STMT
  valueL = 0;
  # DEBUG BEGIN_STMT
  valueH = Pit_Ip_GetUpperLifetimerValue (instance);
  # DEBUG BEGIN_STMT
  valueL = Pit_Ip_GetLowerLifetimerValue (instance);
  # DEBUG BEGIN_STMT
  _1 = (long long unsigned int) valueH;
  _2 = _1 << 32;
  _3 = (long long unsigned int) valueL;
  lifeTimeValue = _2 + _3;
  # DEBUG BEGIN_STMT
  D.6495 = lifeTimeValue;
  return D.6495;

}


Pit_Ip_SetLifetimeTimer (uint8 instance)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Pit_Ip_SetCounterValue (instance, 1, 4294967295);
  # DEBUG BEGIN_STMT
  Pit_Ip_SetEnableInterruptFlag (instance, 1, 0);
  # DEBUG BEGIN_STMT
  Pit_Ip_SetChainMode (instance, 1, 1);
  # DEBUG BEGIN_STMT
  Pit_Ip_EnableTimer (instance, 1, 1);
  # DEBUG BEGIN_STMT
  Pit_Ip_SetCounterValue (instance, 0, 4294967295);
  # DEBUG BEGIN_STMT
  Pit_Ip_EnableTimer (instance, 0, 1);
  return;

}


Pit_Ip_ChangeNextTimeoutValue (uint8 instance, uint8 channel, uint32 value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Pit_Ip_bIsChangedTimeout.1_1 = Pit_Ip_bIsChangedTimeout;
  _2 = ~Pit_Ip_bIsChangedTimeout.1_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = Pit_Ip_GetLoadValue (instance, channel);
  _4 = _3 + 1;
  Pit_Ip_u32OldTargetValue = _4;
  # DEBUG BEGIN_STMT
  Pit_Ip_bIsChangedTimeout = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = value + 4294967295;
  Pit_Ip_SetCounterValue (instance, channel, _5);
  return;

}


Pit_Ip_DisableChannelInterrupt (uint8 instance, uint8 channel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Pit_Ip_SetEnableInterruptFlag (instance, channel, 0);
  # DEBUG BEGIN_STMT
  Pit_Ip_ClearInterruptStatusFlag (instance, channel);
  return;

}


Pit_Ip_EnableChannelInterrupt (uint8 instance, uint8 channel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Pit_Ip_ClearInterruptStatusFlag (instance, channel);
  # DEBUG BEGIN_STMT
  Pit_Ip_SetEnableInterruptFlag (instance, channel, 1);
  return;

}


Pit_Ip_GetCurrentTimer (uint8 instance, uint8 channel)
{
  uint64 counterValue;
  uint64 D.6485;

  <bb 2> :
  # DEBUG BEGIN_STMT
  counterValue = 0;
  # DEBUG BEGIN_STMT
  _1 = Pit_Ip_GetCounterValue (instance, channel);
  counterValue = (uint64) _1;
  # DEBUG BEGIN_STMT
  D.6485 = counterValue;
  return D.6485;

}


Pit_Ip_StopChannel (uint8 instance, uint8 channel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Pit_Ip_EnableTimer (instance, channel, 0);
  # DEBUG BEGIN_STMT
  Pit_Ip_ClearInterruptStatusFlag (instance, channel);
  return;

}


Pit_Ip_StartChannel (uint8 instance, uint8 channel, uint32 countValue)
{
  Pit_Ip_StatusType status;
  boolean isRunning;
  Pit_Ip_StatusType D.6481;

  <bb 2> :
  # DEBUG BEGIN_STMT
  isRunning = 0;
  # DEBUG BEGIN_STMT
  status = 1;
  # DEBUG BEGIN_STMT
  isRunning = Pit_Ip_IsChannelRunning (instance, channel);
  # DEBUG BEGIN_STMT
  _1 = ~isRunning;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = countValue + 4294967295;
  Pit_Ip_SetCounterValue (instance, channel, _2);
  # DEBUG BEGIN_STMT
  Pit_Ip_bIsChangedTimeout = 0;
  # DEBUG BEGIN_STMT
  Pit_Ip_EnableTimer (instance, channel, 1);
  # DEBUG BEGIN_STMT
  status = 0;

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.6481 = status;
  return D.6481;

}


Pit_Ip_Deinit (uint8 instance)
{
  boolean mdisBitExists;
  boolean rtiChannelExists;
  uint8 channelNum;

  <bb 2> :
  # DEBUG BEGIN_STMT
  channelNum = 0;
  # DEBUG BEGIN_STMT
  rtiChannelExists = 0;
  # DEBUG BEGIN_STMT
  mdisBitExists = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  switch (_1) <default: <L5> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  channelNum = 5;
  # DEBUG BEGIN_STMT
  rtiChannelExists = 1;
  # DEBUG BEGIN_STMT
  mdisBitExists = 1;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  channelNum = 4;
  # DEBUG BEGIN_STMT
  mdisBitExists = 1;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  channelNum = 4;
  # DEBUG BEGIN_STMT
  mdisBitExists = 1;
  # DEBUG BEGIN_STMT

  <bb 6> :
<L5>:
  # DEBUG BEGIN_STMT
  Pit_Ip_Reset (instance, channelNum, rtiChannelExists, mdisBitExists);
  return;

}


Pit_Ip_InitChannel (uint8 instance, const struct Pit_Ip_ChannelConfigType * chnlConfig)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = chnlConfig->hwChannel;
  Pit_Ip_EnableTimer (instance, _1, 0);
  # DEBUG BEGIN_STMT
  _2 = chnlConfig->hwChannel;
  Pit_Ip_SetEnableInterruptFlag (instance, _2, 0);
  # DEBUG BEGIN_STMT
  _3 = chnlConfig->hwChannel;
  Pit_Ip_ClearInterruptStatusFlag (instance, _3);
  # DEBUG BEGIN_STMT
  _4 = (int) instance;
  _5 = chnlConfig->hwChannel;
  _6 = (int) _5;
  Pit_Ip_u32ChState[_4][_6].chInit = 1;
  # DEBUG BEGIN_STMT
  _7 = (int) instance;
  _8 = chnlConfig->hwChannel;
  _9 = (int) _8;
  _10 = chnlConfig->callback;
  Pit_Ip_u32ChState[_7][_9].callback = _10;
  # DEBUG BEGIN_STMT
  _11 = (int) instance;
  _12 = chnlConfig->hwChannel;
  _13 = (int) _12;
  _14 = chnlConfig->callbackParam;
  Pit_Ip_u32ChState[_11][_13].callbackParam = _14;
  # DEBUG BEGIN_STMT
  _15 = (int) instance;
  _16 = chnlConfig->hwChannel;
  _17 = (int) _16;
  _18 = chnlConfig->channelMode;
  Pit_Ip_u32ChState[_15][_17].channelMode = _18;
  return;

}


Pit_Ip_Init (uint8 instance, const struct Pit_Ip_InstanceConfigType * config)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = config->enableStandardTimers;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Pit_Ip_EnableModule (instance, 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  _2 = config->stopRunInDebug;
  Pit_Ip_SetDebugMode (instance, _2);
  return;

}


Pit_Ip_ProcessCommonInterrupt (uint8 instance, uint8 channel)
{
  Pit_Ip_ChannelModeType channelMode;
  uint8 callbackParam;
  void (*Pit_Ip_CallbackType) (uint8) callback;
  boolean chInit;
  boolean HasChEvOccurred;
  boolean IsChEvEnabled;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (instance <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  if (channel <= 3)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  IsChEvEnabled = Pit_Ip_GetInterruptEnableFlag (instance, channel);
  # DEBUG BEGIN_STMT
  HasChEvOccurred = Pit_Ip_GetInterruptStatusFlag (instance, channel);
  # DEBUG BEGIN_STMT
  if (IsChEvEnabled != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (HasChEvOccurred != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  Pit_Ip_ClearInterruptStatusFlag (instance, channel);

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  if (IsChEvEnabled != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 8> :
  if (HasChEvOccurred != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = (int) channel;
  chInit = Pit_Ip_u32ChState[_1][_2].chInit;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  _4 = (int) channel;
  callback = Pit_Ip_u32ChState[_3][_4].callback;
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  _6 = (int) channel;
  channelMode = Pit_Ip_u32ChState[_5][_6].channelMode;
  # DEBUG BEGIN_STMT
  _7 = (int) instance;
  _8 = (int) channel;
  callbackParam = Pit_Ip_u32ChState[_7][_8].callbackParam;
  # DEBUG BEGIN_STMT
  if (channelMode == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Pit_Ip_StopChannel (instance, channel);

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (chInit != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (callback != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  callback (callbackParam);

  <bb 14> :
  return;

}


Pit_Ip_GetInterruptEnableFlag (uint8 instance, uint8 channel)
{
  boolean returnFlag;
  boolean D.6519;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  _4 = _2->TIMER[_3].TCTRL;
  _5 = _4 & 2;
  returnFlag = _5 != 0;
  # DEBUG BEGIN_STMT
  D.6519 = returnFlag;
  return D.6519;

}


Pit_Ip_GetLowerLifetimerValue (uint8 instance)
{
  uint32 lowerValue;
  uint32 D.6499;

  <bb 2> :
  # DEBUG BEGIN_STMT
  lowerValue = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  lowerValue = _2->LTMR64L;
  # DEBUG BEGIN_STMT
  D.6499 = lowerValue;
  return D.6499;

}


Pit_Ip_GetUpperLifetimerValue (uint8 instance)
{
  uint32 upperValue;
  uint32 D.6497;

  <bb 2> :
  # DEBUG BEGIN_STMT
  upperValue = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  upperValue = _2->LTMR64H;
  # DEBUG BEGIN_STMT
  D.6497 = upperValue;
  return D.6497;

}


Pit_Ip_ClearInterruptStatusFlag (uint8 instance, uint8 channel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  _4 = _2->TIMER[_3].TFLG;
  _5 = (int) instance;
  _6 = pitBase[_5];
  _7 = (int) channel;
  _8 = _4 | 1;
  _6->TIMER[_7].TFLG = _8;
  return;

}


Pit_Ip_SetEnableInterruptFlag (uint8 instance, uint8 channel, boolean enable)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_02 ();
  # DEBUG BEGIN_STMT
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  _4 = _2->TIMER[_3].TCTRL;
  _5 = (int) instance;
  _6 = pitBase[_5];
  _7 = (int) channel;
  _8 = _4 | 2;
  _6->TIMER[_7].TCTRL = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = (int) instance;
  _10 = pitBase[_9];
  _11 = (int) channel;
  _12 = _10->TIMER[_11].TCTRL;
  _13 = (int) instance;
  _14 = pitBase[_13];
  _15 = (int) channel;
  _16 = _12 & 4294967293;
  _14->TIMER[_15].TCTRL = _16;

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_02 ();
  return;

}


Pit_Ip_GetCounterValue (uint8 instance, uint8 channel)
{
  uint32 counterValue;
  uint32 D.6487;

  <bb 2> :
  # DEBUG BEGIN_STMT
  counterValue = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  counterValue = _2->TIMER[_3].CVAL;
  # DEBUG BEGIN_STMT
  D.6487 = counterValue;
  return D.6487;

}


Pit_Ip_SetCounterValue (uint8 instance, uint8 channel, uint32 value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  _2->TIMER[_3].LDVAL = value;
  return;

}


Pit_Ip_IsChannelRunning (uint8 instance, uint8 channel)
{
  boolean isRunning;
  boolean D.6483;

  <bb 2> :
  # DEBUG BEGIN_STMT
  isRunning = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  _4 = _2->TIMER[_3].TCTRL;
  _5 = _4 & 1;
  isRunning = _5 == 1;
  # DEBUG BEGIN_STMT
  D.6483 = isRunning;
  return D.6483;

}


Pit_Ip_Reset (uint8 instance, uint8 channelNum, boolean available, boolean bitExists)
{
  uint8 i;
  uint8 channelIndex;
  uint32 mask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  mask = 0;
  # DEBUG BEGIN_STMT
  channelIndex = channelNum;
  # DEBUG BEGIN_STMT
  if (available != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  channelIndex = channelIndex + 255;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _2->RTI_TCTRL = 0;
  # DEBUG BEGIN_STMT
  _3 = (int) instance;
  _4 = pitBase[_3];
  _4->RTI_LDVAL = 0;
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  _6 = pitBase[_5];
  _6->RTI_TFLG = 1;
  # DEBUG BEGIN_STMT
  _7 = ~bitExists;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  mask = 4;
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  mask = 6;
  goto <bb 9>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = ~bitExists;
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  mask = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  mask = 2;

  <bb 9> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _9 = (int) instance;
  _10 = pitBase[_9];
  _11 = (int) i;
  _10->TIMER[_11].TCTRL = 0;
  # DEBUG BEGIN_STMT
  _12 = (int) instance;
  _13 = pitBase[_12];
  _14 = (int) i;
  _13->TIMER[_14].LDVAL = 0;
  # DEBUG BEGIN_STMT
  _15 = (int) instance;
  _16 = pitBase[_15];
  _17 = (int) i;
  _16->TIMER[_17].TFLG = 1;
  # DEBUG BEGIN_STMT
  i.0_18 = i;
  i = i.0_18 + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (i < channelIndex)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _19 = (int) instance;
  _20 = pitBase[_19];
  _20->MCR = mask;
  return;

}


Pit_Ip_SetChainMode (uint8 instance, uint8 channel, boolean enable)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_01 ();
  # DEBUG BEGIN_STMT
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (channel != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  _4 = _2->TIMER[_3].TCTRL;
  _5 = (int) instance;
  _6 = pitBase[_5];
  _7 = (int) channel;
  _8 = _4 | 4;
  _6->TIMER[_7].TCTRL = _8;
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (int) instance;
  _10 = pitBase[_9];
  _11 = (int) channel;
  _12 = _10->TIMER[_11].TCTRL;
  _13 = (int) instance;
  _14 = pitBase[_13];
  _15 = (int) channel;
  _16 = _12 & 4294967291;
  _14->TIMER[_15].TCTRL = _16;

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_01 ();
  return;

}


Pit_Ip_SetDebugMode (uint8 instance, boolean stopRun)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (stopRun != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = _2->MCR;
  _4 = (int) instance;
  _5 = pitBase[_4];
  _6 = _3 | 1;
  _5->MCR = _6;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = (int) instance;
  _8 = pitBase[_7];
  _9 = _8->MCR;
  _10 = (int) instance;
  _11 = pitBase[_10];
  _12 = _9 & 4294967294;
  _11->MCR = _12;

  <bb 5> :
  return;

}


Pit_Ip_EnableTimer (uint8 instance, uint8 channel, boolean enable)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Gpt_GPT_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  _4 = _2->TIMER[_3].TCTRL;
  _5 = (int) instance;
  _6 = pitBase[_5];
  _7 = (int) channel;
  _8 = _4 | 1;
  _6->TIMER[_7].TCTRL = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _9 = (int) instance;
  _10 = pitBase[_9];
  _11 = (int) channel;
  _12 = _10->TIMER[_11].TCTRL;
  _13 = (int) instance;
  _14 = pitBase[_13];
  _15 = (int) channel;
  _16 = _12 & 4294967294;
  _14->TIMER[_15].TCTRL = _16;

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Gpt_GPT_EXCLUSIVE_AREA_00 ();
  return;

}


Pit_Ip_EnableModule (uint8 instance, uint8 timerType)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (timerType == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = _2->MCR;
  _4 = (int) instance;
  _5 = pitBase[_4];
  _6 = _3 & 4294967293;
  _5->MCR = _6;

  <bb 4> :
  return;

}


Pit_Ip_GetLoadValue (uint8 instance, uint8 channel)
{
  uint32 periodValue;
  uint32 D.6454;

  <bb 2> :
  # DEBUG BEGIN_STMT
  periodValue = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = (int) channel;
  periodValue = _2->TIMER[_3].LDVAL;
  # DEBUG BEGIN_STMT
  D.6454 = periodValue;
  return D.6454;

}


Pit_Ip_GetInterruptStatusFlag (uint8 instance, uint8 channel)
{
  boolean returnFlag;
  boolean D.6524;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (channel == 4)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance;
  _2 = pitBase[_1];
  _3 = _2->RTI_TFLG;
  _4 = _3 & 1;
  returnFlag = _4 != 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (int) instance;
  _6 = pitBase[_5];
  _7 = (int) channel;
  _8 = _6->TIMER[_7].TFLG;
  _9 = _8 & 1;
  returnFlag = _9 != 0;

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.6524 = returnFlag;
  return D.6524;

}


