IntCtrl_Ip_GenerateDirectedCpuInterrupt (IRQn_Type eIrqNumber, IntCtrl_Ip_IrqTargetType eCpuTarget)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  IntCtrl_Ip_GenerateDirectedCpuInterruptPrivileged (eIrqNumber, eCpuTarget);
  return;

}


IntCtrl_Ip_GetDirectedCpuInterrupt (IRQn_Type eIrqNumber)
{
  boolean D.6277;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = IntCtrl_Ip_GetDirectedCpuInterruptPrivileged (eIrqNumber);
  D.6277 = _1 != 0;
  return D.6277;

}


IntCtrl_Ip_ClearDirectedCpuInterrupt (IRQn_Type eIrqNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  IntCtrl_Ip_ClearDirectedCpuInterruptPrivileged (eIrqNumber);
  return;

}


IntCtrl_Ip_ClearPending (IRQn_Type eIrqNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  IntCtrl_Ip_ClearPendingPrivileged (eIrqNumber);
  return;

}


IntCtrl_Ip_GetPriority (IRQn_Type eIrqNumber)
{
  uint8 D.6275;

  <bb 2> :
  # DEBUG BEGIN_STMT
  D.6275 = IntCtrl_Ip_GetPriorityPrivileged (eIrqNumber);
  return D.6275;

}


IntCtrl_Ip_SetPriority (IRQn_Type eIrqNumber, uint8 u8Priority)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  IntCtrl_Ip_SetPriorityPrivileged (eIrqNumber, u8Priority);
  return;

}


IntCtrl_Ip_DisableIrq (IRQn_Type eIrqNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  IntCtrl_Ip_DisableIrqPrivileged (eIrqNumber);
  return;

}


IntCtrl_Ip_EnableIrq (IRQn_Type eIrqNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  IntCtrl_Ip_EnableIrqPrivileged (eIrqNumber);
  return;

}


IntCtrl_Ip_InstallHandler (IRQn_Type eIrqNumber, void (*IntCtrl_Ip_IrqHandlerType) (void) pfNewHandler, void (*IntCtrl_Ip_IrqHandlerType) (void) * const pfOldHandler)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  IntCtrl_Ip_InstallHandlerPrivileged (eIrqNumber, pfNewHandler, pfOldHandler);
  return;

}


IntCtrl_Ip_Init (const struct IntCtrl_Ip_CtrlConfigType * pIntCtrlCtrlConfig)
{
  uint32 irqIdx;
  IntCtrl_Ip_StatusType D.6273;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  irqIdx = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = pIntCtrlCtrlConfig->aIrqConfig;
  _2 = irqIdx * 8;
  _3 = _1 + _2;
  _4 = _3->eIrqNumber;
  IntCtrl_Ip_ClearPending (_4);
  # DEBUG BEGIN_STMT
  _5 = pIntCtrlCtrlConfig->aIrqConfig;
  _6 = irqIdx * 8;
  _7 = _5 + _6;
  _8 = _7->eIrqNumber;
  _9 = pIntCtrlCtrlConfig->aIrqConfig;
  _10 = irqIdx * 8;
  _11 = _9 + _10;
  _12 = _11->u8IrqPriority;
  IntCtrl_Ip_SetPriority (_8, _12);
  # DEBUG BEGIN_STMT
  _13 = pIntCtrlCtrlConfig->aIrqConfig;
  _14 = irqIdx * 8;
  _15 = _13 + _14;
  _16 = _15->eIrqNumber;
  _17 = pIntCtrlCtrlConfig->aIrqConfig;
  _18 = irqIdx * 8;
  _19 = _17 + _18;
  _20 = _19->pfHandler;
  IntCtrl_Ip_InstallHandler (_16, _20, 0B);
  # DEBUG BEGIN_STMT
  _21 = pIntCtrlCtrlConfig->aIrqConfig;
  _22 = irqIdx * 8;
  _23 = _21 + _22;
  _24 = _23->bIrqEnabled;
  if (_24 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _25 = pIntCtrlCtrlConfig->aIrqConfig;
  _26 = irqIdx * 8;
  _27 = _25 + _26;
  _28 = _27->eIrqNumber;
  IntCtrl_Ip_EnableIrq (_28);
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _29 = pIntCtrlCtrlConfig->aIrqConfig;
  _30 = irqIdx * 8;
  _31 = _29 + _30;
  _32 = _31->eIrqNumber;
  IntCtrl_Ip_DisableIrq (_32);

  <bb 6> :
  # DEBUG BEGIN_STMT
  irqIdx = irqIdx + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _33 = pIntCtrlCtrlConfig->u32ConfigIrqCount;
  if (irqIdx < _33)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.6273 = 0;
  return D.6273;

}


IntCtrl_Ip_GenerateDirectedCpuInterruptPrivileged (IRQn_Type eIrqNumber, IntCtrl_Ip_IrqTargetType eCpuTarget)
{
  uint32 target;
  uint32 core;
  uint32 irqId;

  <bb 2> :
  # DEBUG BEGIN_STMT
  irqId = (uint32) eIrqNumber;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (eCpuTarget == -1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  core = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = 1076232192B;
  _2 = _1->CPXNUM;
  _3 = _2 & 7;
  if (core != _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = 1076232704B;
  _4->IRCPnIRx[core][irqId].IGR = 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  core = core + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (core <= 2)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (eCpuTarget == -2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _5 = 1076232192B;
  _6 = _5->CPXNUM;
  target = _6 & 7;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  target = (uint32) eCpuTarget;

  <bb 11> :
  # DEBUG BEGIN_STMT
  _7 = 1076232704B;
  _7->IRCPnIRx[target][irqId].IGR = 1;

  <bb 12> :
  return;

}


IntCtrl_Ip_GetDirectedCpuInterruptPrivileged (IRQn_Type eIrqNumber)
{
  uint32 irqId;
  uint32 currentCpu;
  uint32 D.6260;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = 1076232192B;
  _2 = _1->CPXNUM;
  currentCpu = _2 & 7;
  # DEBUG BEGIN_STMT
  irqId = (uint32) eIrqNumber;
  # DEBUG BEGIN_STMT
  _3 = 1076232704B;
  _4 = _3->IRCPnIRx[currentCpu][irqId].IntStatusR;
  _5 = _4 != 0;
  D.6260 = (uint32) _5;
  return D.6260;

}


IntCtrl_Ip_ClearDirectedCpuInterruptPrivileged (IRQn_Type eIrqNumber)
{
  uint32 irqId;
  uint32 currentCpu;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = 1076232192B;
  _2 = _1->CPXNUM;
  currentCpu = _2 & 7;
  # DEBUG BEGIN_STMT
  irqId = (uint32) eIrqNumber;
  # DEBUG BEGIN_STMT
  _3 = 1076232704B;
  _3->IRCPnIRx[currentCpu][irqId].IntStatusR = 127;
  return;

}


IntCtrl_Ip_ClearPendingPrivileged (IRQn_Type eIrqNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  eIrqNumber.2_1 = (unsigned short) eIrqNumber;
  _2 = (long unsigned int) eIrqNumber.2_1;
  _3 = _2 & 31;
  _4 = 3758153728B;
  _5 = (long unsigned int) eIrqNumber;
  _6 = _5 >> 5;
  _7 = 1 << _3;
  _4->ICPR[_6] = _7;
  return;

}


IntCtrl_Ip_GetPriorityPrivileged (IRQn_Type eIrqNumber)
{
  uint8 shift;
  uint8 priority;
  uint8 D.6258;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  shift = 4;
  # DEBUG BEGIN_STMT
  _1 = 3758153728B;
  _2 = (long unsigned int) eIrqNumber;
  _3 = _1->IP[_2];
  _4 = (int) _3;
  _5 = (int) shift;
  _6 = _4 >> _5;
  priority = (uint8) _6;
  # DEBUG BEGIN_STMT
  D.6258 = priority;
  return D.6258;

}


IntCtrl_Ip_SetPriorityPrivileged (IRQn_Type eIrqNumber, uint8 u8Priority)
{
  uint8 shift;

  <bb 2> :
  # DEBUG BEGIN_STMT
  shift = 4;
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) u8Priority;
  _2 = (int) shift;
  _3 = _1 << _2;
  _4 = 3758153728B;
  _5 = (long unsigned int) eIrqNumber;
  _6 = (unsigned char) _3;
  _4->IP[_5] = _6;
  return;

}


IntCtrl_Ip_DisableIrqPrivileged (IRQn_Type eIrqNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  eIrqNumber.1_1 = (unsigned short) eIrqNumber;
  _2 = (long unsigned int) eIrqNumber.1_1;
  _3 = _2 & 31;
  _4 = 3758153728B;
  _5 = (long unsigned int) eIrqNumber;
  _6 = _5 >> 5;
  _7 = 1 << _3;
  _4->ICER[_6] = _7;
  return;

}


IntCtrl_Ip_EnableIrqPrivileged (IRQn_Type eIrqNumber)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  eIrqNumber.0_1 = (unsigned short) eIrqNumber;
  _2 = (long unsigned int) eIrqNumber.0_1;
  _3 = _2 & 31;
  _4 = 3758153728B;
  _5 = (long unsigned int) eIrqNumber;
  _6 = _5 >> 5;
  _7 = 1 << _3;
  _4->ISER[_6] = _7;
  return;

}


IntCtrl_Ip_InstallHandlerPrivileged (IRQn_Type eIrqNumber, void (*IntCtrl_Ip_IrqHandlerType) (void) pfNewHandler, void (*IntCtrl_Ip_IrqHandlerType) (void) * const pfOldHandler)
{
  void (*IntCtrl_Ip_IrqHandlerType) (void) * pVectorRam;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 3758153728B;
  _2 = _1->VTOR;
  pVectorRam = (void (*IntCtrl_Ip_IrqHandlerType) (void) *) _2;
  # DEBUG BEGIN_STMT
  if (pfOldHandler != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = (sizetype) eIrqNumber;
  _4 = _3 + 16;
  _5 = _4 * 4;
  _6 = pVectorRam + _5;
  _7 = *_6;
  *pfOldHandler = _7;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (sizetype) eIrqNumber;
  _9 = _8 + 16;
  _10 = _9 * 4;
  _11 = pVectorRam + _10;
  *_11 = pfNewHandler;
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" ISB");
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  return;

}


